authors,description,hash,isbn10,isbn13,publication_date,site,summary,tags,title,url
"['Stanley Lippman', 'Josée Lajoie', 'Barbara Moo']",,1f922f9b94b9ee18ac94965f40f162bf77737fc3d39025532e2596082523bba5,,,"August 6, 2012",amazon.com,"Bestselling Programming Tutorial and Reference Completely Rewritten for the New C++11 Standard

Fully updated and recast for the newly released C++11 standard, this authoritative and comprehensive introduction to C++ will help you to learn the language fast, and to use it in modern, highly effective ways. Highlighting today’s best practices, the authors show how to use both the core language and its standard library to write efficient, readable, and powerful code.

C++ Primer, Fifth Edition, introduces the C++ standard library from the outset, drawing on its common functions and facilities to help you write useful programs without first having to master every language detail. The book’s many examples have been revised to use the new language features and demonstrate how to make the best use of them. This book is a proven tutorial for those new to C++, an authoritative discussion of core C++ concepts and techniques, and a valuable resource for experienced programmers, especially those eager to see C++11 enhancements illuminated.

Start Fast and Achieve More

Learn how to use the new C++11 language features and the standard library to build robust programs quickly, and get comfortable with high-level programming
Learn through examples that illuminate today’s best coding styles and program design techniques
Understand the “rationale behind the rules”: why C++11 works as it does
Use the extensive cross-references to help you connect related concepts and insights
Benefit from up-to-date learning aids and exercises that emphasize key points, help you to avoid pitfalls, promote good practices, and reinforce what you’ve learned

Access the source code for the extended examples from informit.com/title/0321714113

C++ Primer, Fifth Edition, features an enhanced, layflat binding, which allows the book to stay open more easily when placed on a flat surface. This special binding method—notable by a small space inside the spine—also increases durability.","['C++ Programming Language', 'Object-Oriented Design', 'Software Development']",C++ Primer (5th Edition),https://www.amazon.com/dp/0321714113
['Bjarne Stroustrup'],,3c247e615866dd8f54e19393b4bd9b9e34deae19bd32455c32235c4641228473,,,"April 22, 2024",amazon.com,"An Introduction to Programming by the Inventor of C++

Programming: Principles and Practice Using C++, Third Edition, will help anyone who is willing to work hard learn the fundamental principles of programming and develop the practical skills needed for programming in the real world. Previous editions have been used successfully by many thousands of students. This revised and updated edition

Assumes that your aim is to eventually write programs that are good enough for others to use and maintain
Focuses on fundamental concepts and techniques, rather than on obscure language-technical details
Is an introduction to programming in general, including procedural, object-oriented, and generic programming, rather than just an introduction to a programming language
Covers both contemporary high-level techniques and the lower-level techniques needed for efficient use of hardware
Will give you a solid foundation for writing useful, correct, type-safe, maintainable, and efficient code
Is primarily designed for people who have never programmed before, but even seasoned programmers have found previous editions useful as an introduction to more effective concepts and techniques
Covers a wide range of essential concepts, design and programming techniques, language features, and libraries
Uses contemporary C++ (C++20 and C++23)
Covers the design and use of both built-in types and user-defi ned types, complete with input, output, computation, and simple graphics/GUI
Offers an introduction to the C++ standard library containers and algorithms

Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.","['Object-Oriented Software Design', 'C++ Programming Language', 'Object-Oriented Design']",Programming: Principles and Practice Using C++ (C++ In-depth),https://www.amazon.com/dp/0138308683
['John Horton'],,27d4dbc7ffe02e7c1cf3b3b13c3a64feb5883f13f3e1bbdcdc7c14bb9100925d,,,"October 31, 2019",amazon.com,"Get to grips with programming techniques and game development using C++ libraries and Visual Studio 2019

Key Features
Learn game development and C++ with a fun, example-driven approach
Build clones of popular games such as Timberman, Zombie Survival Shooter, a co-op puzzle platformer, and Space Invaders
Discover tips to expand your finished games by thinking critically, technically, and creatively
Book Description

The second edition of Beginning C++ Game Programming is updated and improved to include the latest features of Visual Studio 2019, SFML, and modern C++ programming techniques. With this book, you'll get a fun introduction to game programming by building five fully playable games of increasing complexity. You'll learn to build clones of popular games such as Timberman, Pong, a Zombie survival shooter, a coop puzzle platformer and Space Invaders.

The book starts by covering the basics of programming. You'll study key C++ topics, such as object-oriented programming (OOP) and C++ pointers, and get acquainted with the Standard Template Library (STL). The book helps you learn about collision detection techniques and game physics by building a Pong game. As you build games, you'll also learn exciting game programming concepts such as particle effects, directional sound (spatialization), OpenGL programmable shaders, spawning objects, and much more. Finally, you'll explore game design patterns to enhance your C++ game programming skills.

By the end of the book, you'll have gained the knowledge you need to build your own games with exciting features from scratch

What you will learn
Set up your game development project in Visual Studio 2019 and explore C++ libraries such as SFML
Explore C++ OOP by building a Pong game
Understand core game concepts such as game animation, game physics, collision detection, scorekeeping, and game sound
Use classes, inheritance, and references to spawn and control thousands of enemies and shoot rapid-fire machine guns
Add advanced features to your game using pointers, references, and the STL
Scale and reuse your game code by learning modern game programming design patterns
Who this book is for

This book is perfect for you if you have no C++ programming knowledge, you need a beginner-level refresher course, or you want to learn how to build games or just use games as an engaging way to learn C++. Whether you aspire to publish a game (perhaps on Steam) or just want to impress friends with your creations, you'll find this book useful.

Table of Contents
C++, SFML, Visual Studio, and Starting the First Game
Variables, Operators, and Decisions - Animating Sprites
C++ Strings and SFML Time - Player Input and HUD
Loops, Arrays, Switches, Enumerations, and Functions - Implementing Game Mechanics
Collisions, Sound, and End Conditions - Making the Game Playable
Object-Oriented Programming - Starting the Pong Game
Dynamic Collision Detection and Physics - Finishing the Pong Game
SFML Views - Starting the Zombie Shooter Game
C++ References, Sprite Sheets, and Vertex Arrays
Pointers, the Standard Template Library, and Texture Management
Collision Detection, Pickups, and Bullets
Layering Views and Implementing the HUD
Sound Effects, File I/O, and Finishing the Game
Abstraction and Code Management - Making Better Use of OOP
Advanced OOP - Inheritance and Polymorphism
Building Playable Levels and Collision Detection
Sound Spatialization and the HUD
Particle Systems and Shaders

(N.B. Please use the Look Inside option to see further chapters)","['C++ Programming Language', 'Game Programming', 'Introductory & Beginning Programming']","Beginning C++ Game Programming: Learn to program with C++ by building fun games, 2nd Edition",https://www.amazon.com/dp/1838648577
['Tony Gaddis'],,763c6029cf02d0f4484e1ef2b7f3229ba949c58681c518a9887741aa9a743d1a,,,"February 13, 2017",amazon.com,"For two-semester courses in the C++ programming sequence, or an accelerated one-semester course.

A clear and student-friendly way to teach the fundamentals of C++

Starting Out with C++: From Control Structures through Objectscovers control structures, functions, arrays,

and pointers before objects and classes in Tony Gaddis’s hallmark accessible, step-by-step presentation. His books help beginning students understand the important details necessary to become skilled programmers at an introductory level. Gaddis motivates the study of both programming skills and the C++ programming language by presenting all the details needed to understand the “how” and the “why”–but never losing sight of the fact that most beginners struggle with this material. His approach is gradual and highly accessible, ensuring that students understand the logic behind developing high-quality programs. As with all Gaddis texts, clear and easy-to-read code listings, concise and practical real-world examples, and an abundance of exercises appear in every chapter. Updates to the 9th Edition include revised, improved problems throughout and a new chapter featuring completely rewritten and expanded material on the Standard Template Library (STL).

Also Available with MyLab Programming.

MyLabTM Programming is an online learning system designed to engage students and improve results. MyLab Programming consists of programming exercises correlated to the concepts and objectives in this book. Through practice exercises and immediate, personalized feedback, MyLab Programming improves the programming competence of beginning students who often struggle with the basic concepts of programming languages.

Note: You are purchasing a standalone product; MyLabTM & MasteringTM does not come packaged with this content. Students, if interested in purchasing this title with MyLab & Mastering, ask your instructor for the correct package ISBN and Course ID. Instructors, contact your Pearson representative for more information.

If you would like to purchase both the physical text and MyLab & Mastering, search for:

0134544846 / 9780134544847 Starting Out with C++ from Control Structures to Objects Plus MyProgrammingLab with Pearson eText -- Access Card Package, 9/e

Package consists of:

0134484193 / 9780134484198 MyProgrammingLab with Pearson eText -- Access Card -- for Starting Out with C++ from Control Structures to Objects, 9/e
0134498372 / 9780134498379 Starting Out with C++ from Control Structures to Objects

Students can use the URL and phone number below to help answer their questions:

https://support.pearson.com/getsupport/s/

800-677-6337","['C++ Programming Language', 'Computer Programming Languages']",Starting Out with C++ from Control Structures to Objects,https://www.amazon.com/dp/0134498372
"['Paul Deitel', 'Harvey Deitel']",,7300dd2c105742a0d31d691c6fc0f5c4cd13b18439e1bcb710c75136f0281962,,,"February 29, 2016",amazon.com,"C++ How to Program presents leading-edge computing technologies in a friendly manner appropriate for introductory college course sequences, based on the curriculum recommendations of two key professional organizations–the ACM and the IEEE.

The best-selling C++ How to Program is accessible to readers with little or no programming experience, yet comprehensive enough for the professional programmer. The Deitels’ signature live-code approach presents the concepts in the context of full working programs followed by sample executions. The early objects approach gets readers thinking about objects immediately–allowing them to more thoroughly master the concepts. Emphasis is placed on achieving program clarity and building well-engineered software. Interesting, entertaining, and challenging exercises encourage students to make a difference and use computers and the Internet to work on problems. To keep readers up-to-date with leading-edge computing technologies, the Tenth Edition conforms to the C++11 standard and the new C++14 standard.","['C++ Programming Language', 'Computer Programming Languages']",C++ How to Program,https://www.amazon.com/dp/0134448235
['Bjarne Stroustrup'],,2879c82e735eecaee6728fd7154487af300345bed730a8f0ad23e31159250e52,,,"September 24, 2022",amazon.com,"In A Tour of C++, Third Edition, Bjarne Stroustrup provides an overview of ISO C++, C++20, that aims to give experienced programmers a clear understanding of what constitutes modern C++. Featuring carefully crafted examples and practical help in getting started, this revised and updated edition concisely covers most major language features and the major standard-library components needed for effective use.

Stroustrup presents C++ features in the context of the programming styles they support, such as object-oriented and generic programming. His tour is remarkably comprehensive. Coverage begins with the basics, then ranges widely through more advanced topics, emphasizing newer language features. This edition covers many features that are new in C++20 as implemented by major C++ suppliers, including modules, concepts, coroutines, and ranges. It even introduces some library components in current use that are not scheduled for inclusion in the standard until C++23.

This authoritative guide does not aim to teach you how to program (for that, see Stroustrup's Programming: Principles and Practice Using C++, Second Edition), nor will it be the only resource you'll need for C++ mastery (for that, see Stroustrup's The C++ Programming Language, Fourth Edition, and recommended online sources). If, however, you are a C or C++ programmer wanting greater familiarity with the current C++ language, or a programmer versed in another language wishing to gain an accurate picture of the nature and benefits of modern C++, you won't find a shorter or simpler introduction.","['C++ Programming Language', 'Object-Oriented Design', 'Computer & Technology Certification Guides']","Tour of C++, A (C++ In-Depth Series)",https://www.amazon.com/dp/0136816487
"['Ivor Horton', 'Peter Van Weert']",,dd5fda3d3b9df8c0f0a7a696591bf70d81e59cf96b9832332132315a87cc5c2f,,,"October 8, 2023",amazon.com,"Begin your programming journey with C++ , starting with the basics and progressing through step-by-step examples that will help you become a proficient C++ programmer. This book includes new features from the C++23 standard. All you need are Beginning C++23 and any recent C++ compiler and you'll soon be writing real C++ programs.
There is no assumption of prior programming knowledge. All language concepts that are explained in the book are illustrated with working program examples, and all chapters include exercises for you to test and practice your knowledge. Free source code downloads are provided for all examples from the text and solutions to the exercises.
This latest edition has been fully updated to the latest version of the language, C++23, and to all conventions and best practices of modern C++. This bookalso introduces elements of the C++ Standard Library that provide essential support for C++23. After completing this book, you will have the knowledge and skills needed to build your first C++ applications.
What You Will Learn
Begin programming with the C++23 standard
Carry out modular programming in C++
Work with arrays and loops, pointers and references, strings, and more
Write your own functions, types, and operators
Discover the essentials of object-oriented programming
Use overloading, inheritance, virtual functions, and polymorphism
Write generic function and class templates, and make them safer using concepts
Learn the ins and outs of containers, algorithms, and ranges
Use auto type declarations, exceptions, move semantics, lambda expressions, and much more
Who This Book Is For
Programmers new to C++ and those who may be looking for a refresh primer on C++ in general.","['C++ Programming Language', 'Computer Programming Languages', 'Software Development']",Beginning C++23: From Beginner to Pro,https://www.amazon.com/dp/1484293428
['Anthony J. Dos Reis'],,efa76c6cbd8c1777df6deafbfa1d839e5691f4fb360c3bc7637905e663bb3da5,,,"February 9, 2019",amazon.com,"THERE IS AN UPDATED AND IMPROVED VERSION (THE SECOND EDITION) OF THIS BOOK.

This book provides the reader with an invaluable insight to C and C++ in particular and programming languages in general. Although the title suggests that the book has a narrow scope, in fact, just the opposite is the case: The book is an introduction to programming language design, object-oriented programming, assemblers, compilers, interpreters, linkers, computer architecture, and system programming--everything you need to know to be a master of C and C++. Included in the book are several well-defined system programming projects that support the material covered, including a machine interpreter implementation, an assembler implementation, and a linker implementation. The software package for the book supports Windows, OS X, Linux, and Raspbian.","['C Programming Language', 'C++ Programming Language', 'Computer Programming Languages']",C and C++ Under the Hood,https://www.amazon.com/dp/1793302898/
['Peter Gottschling'],,aa56d83f6dfd5deb33268337d190fa4c5a05777538cd309541d8cf9abbaa3816,,,"December 17, 2021",amazon.com,"Write Powerful, Modern C++ Code for Scientific, Engineering, and Embedded Applications

Discovering Modern C++, Second Edition, will help you master valuable skills for programming with C++ at nearly every level, from ""close to the hardware"" to high-level abstractions.

Updated for C++17 and C++ 20, this intensive introduction teaches C++ using realistic examples from diverse technical problem domains. Drawing on extensive experience teaching C++ to physicists, mathematicians, engineers, and students, Peter Gottschling guides you smoothly to sophisticated approaches based on advanced features.

Whatever your programming experience, you'll rapidly master increasingly powerful features, from lambdas to expression and variadic templates. Gottschling also shows you how to apply C++'s libraries: both the Standard Template Library (STL) and scientific libraries for arithmetic, linear algebra, differential equations, and graphs. Step by step, you'll learn to write clear and expressive code using object orientation, generics, metaprogramming, and procedural techniques, and master all the abstractions you need to write high-quality, well-performing software.

Quickly master core features: variables, operators, expressions, statements, functions, error handling, I/O, arrays, pointers, references, and more
Make the most of classes and object-oriented programming, from constructors/destructors to operator overloading and multiple inheritance
Apply advanced generic programming and template-based techniques
Use C++'s libraries to write more robust and powerful code more quickly
Explore metaprogramming in depth, and master cutting-edge optimization techniques
Walk through representative scientific projects, and create your own
Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.","['C++ Programming Language', 'Computer Programming Languages', 'Microsoft Programming']",Discovering Modern C++ (C++ In-Depth Series),https://www.amazon.com/Discovering-Modern-Depth-Peter-Gottschling/dp/0136677649/
"['Paul Deitel', 'Harvey Deitel']",,333ab369ecc1a99fa145938ed7656b9169da86bfcc8fc986b463ef8681a4438b,,,"July 27, 2023",amazon.com,"C++ How to Program: An Objects-Natural Approach is a code-intensive, modular introduction to C++ programming. The Deitel live-code approach presents concepts using full working programs rather than code snippets so that you can immediately start to run programs as you read. Interesting, entertaining and challenging examples, exercises and projects help you see how what you're learning applies to real-world scenarios.

The 11th Edition presents new features of C++ 20 and even more hands-on application opportunities. Hundreds of new self-checks let you test your code and understanding of key concepts. New case studies and exercises focus on security, data science, ethics and more.",['Kindle eBooks'],C++ How to Program: An Objects-Natural Approach,https://www.amazon.com/dp/B0CF4TX8XG
['Marc Gregoire'],,1ffb2f437f450cfce6701b69f4ed16fffea29605ff255ba4053bc3c986255a4d,,,"February 13, 2024",amazon.com,"Expand your C++ knowledge quickly and efficiently with this advanced resource

In the newly revised sixth edition of Professional C++, veteran software engineer and developer Marc Gregoire delivers yet another volume that raises the bar for advanced programming manuals. Covering almost all features of the new C++ standard codenamed C++23, the book offers case studies with working code that’s been tested on Windows and Linux.

As the leading resource for dedicated and knowledgeable professionals seeking to advance their C++ skills, this book provides resources that help readers:

Master new features of the latest standard, C++23
Maximize C++ capabilities with effective design solutions
Discover little-known elements and learn about pitfalls and what practices to avoid
Grasp testing and debugging best practices
Learn about tips and tricks for efficiency and performance

C++ is a complex language. Professional C++, 6th Edition, allows dedicated practitioners to remain current and abreast of the latest developments and advances.","['C Programming Language', 'Object-Oriented Design', 'Software Development']",Professional C++ (Tech Today),https://www.amazon.com/dp/1394193173
['Stephen C. Dewhurst'],,4a6368fc06fa5317839310ef6cddf04b23b10b0ade60d37cafe9e6da383d5d0e,,,"February 28, 2005",amazon.com,"C++ Common Knowledge covers essential but commonly misunderstood topics in C++ programming and design while filtering out needless complexity in the discussion of each topic. What remains is a clear distillation of the essentials required for production C++ programming, presented in the author's trademark incisive, engaging style.","['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']",C++ Common Knowledge: Essential Intermediate Programming: Essential Intermediate Programming,https://www.amazon.com/dp/0321321928
"['D. Ryan Stephens', 'Christopher Diggins', 'Jonathan Turkanis']",,401108fdeac6304ac31d99f8f28064f45444c37b1497723eb1a5263a8835c0d3,,,"December 13, 2005",amazon.com,"Despite its highly adaptable and flexible nature, C++ is also one of the more complex programming languages to learn. Once mastered, however, it can help you organize and process information with amazing efficiency and quickness.

The C++ Cookbook will make your path to mastery much shorter. This practical, problem-solving guide is ideal if you're an engineer, programmer, or researcher writing an application for one of the legions of platforms on which C++ runs. The algorithms provided in C++ Cookbook will jump-start your development by giving you some basic building blocks that you don't have to develop on your own.

Less a tutorial than a problem-solver, the book addresses many of the most common problems you're likely encounter--whether you've been programming in C++ for years or you're relatively new to the language. Here are just some of the time-consuming tasks this book contains practical solutions for:

Reading the contents of a directory
Creating a singleton class
Date and time parsing/arithmetic
String and text manipulation
Working with files
Parsing XML
Using the standard containers

Typical of O'Reilly's ""Cookbook"" series, C++ Cookbook is written in a straightforward format, featuring recipes that contain problem statements and code solutions, and apply not to hypothetical situations, but those that you're likely to encounter. A detailed explanation then follows each recipe in order to show you how and why the solution works. This question-solution-discussion format is a proven teaching method, as any fan of the ""Cookbook"" series can attest to. This book will move quickly to the top of your list of essential C++ references.","['C++ Programming Language', 'Software Development', 'Computer Software']",C++ Cookbook: Solutions and Examples for C++ Programmers,https://www.amazon.com/dp/0596007612
['Scott Meyers'],,d7fb689afe45990fecb30f8883a4a9036fe3039e93737bdf560bb9082a515622,,,"May 12, 2005",amazon.com,"“Every C++ professional needs a copy of Effective C++. It is an absolute must-read for anyone thinking of doing serious C++ development. If you’ve never read Effective C++ and you think you know everything about C++, think again.”
― Steve Schirripa, Software Engineer, Google “C++ and the C++ community have grown up in the last fifteen years, and the third edition of Effective C++ reflects this. The clear and precise style of the book is evidence of Scott’s deep insight and distinctive ability to impart knowledge.”
― Gerhard Kreuzer, Research and Development Engineer, Siemens AG

The first two editions of Effective C++ were embraced by hundreds of thousands of programmers worldwide. The reason is clear: Scott Meyers’ practical approach to C++ describes the rules of thumb used by the experts ― the things they almost always do or almost always avoid doing ― to produce clear, correct, efficient code.

The book is organized around 55 specific guidelines, each of which describes a way to write better C++. Each is backed by concrete examples. For this third edition, more than half the content is new, including added chapters on managing resources and using templates. Topics from the second edition have been extensively revised to reflect modern design considerations, including exceptions, design patterns, and multithreading.

Important features of Effective C++ include:

Expert guidance on the design of effective classes, functions, templates, and inheritance hierarchies.
Applications of new “TR1” standard library functionality, along with comparisons to existing standard library components.
Insights into differences between C++ and other languages (e.g., Java, C#, C) that help developers from those languages assimilate “the C++ way” of doing things.","['C++ Programming Language', 'Software Development', 'Computer Software']",Effective C++: 55 Specific Ways to Improve Your Programs and Designs,https://www.amazon.com/dp/0321334876
['Scott Meyers'],,0acdc63dd949613a48a2375393eecee7dcbdae68d8ad1d2ee280e0d1299159ed,,,"June 6, 2001",amazon.com,"“This is Effective C++ volume three – it’s really that good.”
– Herb Sutter, independent consultant and secretary of the ISO/ANSI C++ standards committee “There are very few books which all C++ programmers must have. Add Effective STL to that list.”
– Thomas Becker, Senior Software Engineer, Zephyr Associates, Inc., and columnist, C/C++ Users Journal

C++’s Standard Template Library is revolutionary, but learning to use it well has always been a challenge. Until now. In this book, best-selling author Scott Meyers (Effective C++, and More Effective C++) reveals the critical rules of thumb employed by the experts – the things they almost always do or almost always avoid doing – to get the most out of the library.

Other books describe what’s in the STL. Effective STL shows you how to use it. Each of the book’s 50 guidelines is backed by Meyers’ legendary analysis and incisive examples, so you’ll learn not only what to do, but also when to do it – and why.

Highlights of Effective STL include:

Advice on choosing among standard STL containers (like vector and list), nonstandard STL containers (like hash_set and hash_map), and non-STL containers (like bitset).
Techniques to maximize the efficiency of the STL and the programs that use it.
Insights into the behavior of iterators, function objects, and allocators, including things you should not do.
Guidance for the proper use of algorithms and member functions whose names are the same (e.g., find), but whose actions differ in subtle (but important) ways.
Discussions of potential portability problems, including straightforward ways to avoid them.

Like Meyers’ previous books, Effective STL is filled with proven wisdom that comes only from experience. Its clear, concise, penetrating style makes it an essential resource for every STL programmer.","['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']",Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library,https://www.amazon.com/dp/0201749629
['Herb Sutter'],,9fc968bd25f5468e66394091f20896fd81d6f64985aeec7914c6dec4d819aebf,,,"November 18, 1999",amazon.com,"The puzzles and problems in Exceptional C++ not only entertain, they will help you hone your skills to become the sharpest C++ programmer you can be. Many of these problems are culled from the famous Guru of the Week feature of the Internet newsgroup comp.lang.c++, moderated, expanded and updated to conform to the official ISO/ANSI C++ Standard.
Try your skills against the C++ masters and come away with the insight and experience to create more efficient, effective, robust, and portable C++ code.","['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']","Exceptional C++: 47 Engineering Puzzles, Programming Problems, and Solutions",https://www.amazon.com/dp/0201615622
['Herb Sutter'],,8c19ca819af80969485aff3fe1ba273b8eadd8738468eaf4050f49389edadb18,,,"December 17, 2001",amazon.com,"Picks up where the widely acclaimed Exceptional C++ leaves off, providing successful strategies for solving real-world problems in C++. Promotes the practical and pragmatic understanding of the language while showing you how to write exceptional code in C++. Softcover.","['C++ Programming Language', 'Computer Software', 'Marketing']","More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions",https://www.amazon.com/dp/020170434X
"['Herb Sutter', 'John Fuller']",,93e5b2f2f9751c9c3bdfe4aa8027ed04ddb69b9239c8f9c6aeb7a8309163e703,,,"August 2, 2004",amazon.com,"Software ""style"" is about finding the perfect balance between overhead and functionality... elegance and maintainability... flexibility and excess. In Exceptional C++ Style, legendary C++ guru Herb Sutter presents 40 new programming scenarios designed to analyze not only the what but the why and help you find just the right balance in your software.

Organized around practical problems and solutions, this book offers new insight into crucial C++ details and interrelationships, and new strategies for today's key C++ programming techniques--including generic programming, STL, exception safety, and more. You'll find answers to questions like:

What can you learn about library design from the STL itself?
How do you avoid making templated code needlessly non-generic?
Why shouldn't you specialize function templates? What should you do instead?
How does exception safety go beyond try and catch statements?
Should you use exception specifications, or not?
When and how should you ""leak"" the private parts of a class?
How do you make classes safer for versioning?
What's the real memory cost of using standard containers?
How can using const really optimize your code?
How does writing inline affect performance?
When does code that looks wrong actually compile and run perfectly, and why should you care?
What's wrong with the design of std::string?

Exceptional C++ Style will help you design, architect, and code with style--and achieve greater robustness and performance in all your C++ software.","['C++ Programming Language', 'Microsoft Programming', 'Computer Software']","Exceptional C++ Style: 40 New Engineering Puzzles, Programming Problems, and Solutions",https://www.amazon.com/dp/0201760428
"['Herb Sutter', 'Andrei Alexandrescu', 'John Fuller']",,6d64121fcefdd1163266be0f9a405ff15920133c800f055025f13ccc02e54645,,,"October 25, 2004",amazon.com,"Consistent, high-quality coding standards improve software quality, reduce time-to-market, promote teamwork, eliminate time wasted on inconsequential matters, and simplify maintenance. Now, two of the world's most respected C++ experts distill the rich collective experience of the global C++ community into a set of coding standards that every developer and development team can understand and use as a basis for their own coding standards.

The authors cover virtually every facet of C++ programming: design and coding style, functions, operators, class design, inheritance, construction/destruction, copying, assignment, namespaces, modules, templates, genericity, exceptions, STL containers and algorithms, and more. Each standard is described concisely, with practical examples. From type definition to error handling, this book presents C++ best practices, including some that have only recently been identified and standardized-techniques you may not know even if you've used C++ for years. Along the way, you'll find answers to questions like

What's worth standardizing--and what isn't?
What are the best ways to code for scalability?
What are the elements of a rational error handling policy?
How (and why) do you avoid unnecessary initialization, cyclic, and definitional dependencies?
When (and how) should you use static and dynamic polymorphism together?
How do you practice ""safe"" overriding?
When should you provide a no-fail swap?
Why and how should you prevent exceptions from propagating across module boundaries?
Why shouldn't you write namespace declarations or directives in a header file?
Why should you use STL vector and string instead of arrays?
How do you choose the right STL search or sort algorithm?
What rules should you follow to ensure type-safe code?

Whether you're working alone or with others, C++ Coding Standards will help you write cleaner code--and write it faster, with fewer hassles and less frustration.","['C++ Programming Language', 'Software Development', 'Computer Software']","C++ Coding Standards: 101 Rules, Guidelines, and Best Practices",https://www.amazon.com/dp/0321113586
['Bjarne Stroustrup'],,aa2effbb6a9a2a8fd429cb2edbee81e1a85fcf450216c38c4ed270933016ac50,,,"July 24, 2013",amazon.com,"The new C++11 standard allows programmers to express ideas more clearly, simply, and directly, and to write faster, more efficient code. Bjarne Stroustrup, the designer and original implementer of C++, has reorganized, extended, and completely rewritten his definitive reference and tutorial for programmers who want to use C++ most effectively.

The C++ Programming Language, Fourth Edition, delivers meticulous, richly explained, and integrated coverage of the entire language―its facilities, abstraction mechanisms, standard libraries, and key design techniques. Throughout, Stroustrup presents concise, “pure C++11” examples, which have been carefully crafted to clarify both usage and program design. To promote deeper understanding, the author provides extensive cross-references, both within the book and to the ISO standard.

New C++11 coverage includes

Support for concurrency
Regular expressions, resource management pointers, random numbers, and improved containers
General and uniform initialization, simplified for-statements, move semantics, and Unicode support
Lambdas, general constant expressions, control over class defaults, variadic templates, template aliases, and user-defined literals
Compatibility issues

Topics addressed in this comprehensive book include

Basic facilities: type, object, scope, storage, computation fundamentals, and more
Modularity, as supported by namespaces, source files, and exception handling
C++ abstraction, including classes, class hierarchies, and templates in support of a synthesis of traditional programming, object-oriented programming, and generic programming
Standard Library: containers, algorithms, iterators, utilities, strings, stream I/O, locales, numerics, and more
The C++ basic memory model, in depth

This fourth edition makes C++11 thoroughly accessible to programmers moving from C++98 or other languages, while introducing insights and techniques that even cutting-edge C++11 programmers will find indispensable.

This is a hardcover version of the Fourth Edition. Content in this hardcover and the paperback version is identical.

This book features an enhanced, layflat binding, which allows the book to stay open more easily when placed on a flat surface. This special binding method―noticeable by a small space inside the spine―also increases durability.","['C++ Programming Language', 'Computer Programming Languages']","C++ Programming Language, The",https://www.amazon.com/dp/0321958322
['Nicolai Josuttis'],,0920a6dcc7e29d354ede4d2f54544324562c231417723be98fcac931346022dc,,,"March 30, 2012",amazon.com,"The Best-Selling C++ Resource

Now Updated for C++11

The C++ standard library provides a set of common classes and interfaces that greatly extend the core C++ language. The library, however, is not self-explanatory. To make full use of its components–and to benefit from their power–you need a resource that does far more than list the classes and their functions.

The C++ Standard Library: A Tutorial and Reference, Second Edition, describes this library as now incorporated into the new ANSI/ISO C++ language standard (C++11). The book provides comprehensive documentation of each library component, including an introduction to its purpose and design; clearly written explanations of complex concepts; the practical programming details needed for effective use; traps and pitfalls; the exact signature and definition of the most important classes and functions; and numerous examples of working code. The book focuses in particular on the Standard Template Library (STL), examining containers, iterators, function objects, and STL algorithms.

The book covers all the new C++11 library components, including

Concurrency
Fractional arithmetic
Clocks and timers
Tuples
New STL containers
New STL algorithms
New smart pointers
New locale facets
Random numbers and distributions
Type traits and utilities
Regular expressions

The book also examines the new C++ programming style and its effect on the standard library, including lambdas, range-based for loops, move semantics, and variadic templates.

An accompanying Web site, including source code, can be found at www.cppstdlib.com.","['C++ Programming Language', 'Computer Programming Languages']","C++ Standard Library, The: A Tutorial and Reference",https://www.amazon.com/dp/0321623215
"['Angelika Langer', 'Klaus Kreft']",,4c6449031e0e77898f0811c6c62d1614e9aadbeb3693425d951be6d8e3176878,,,"January 1, 2000",amazon.com,"Provides a comprehensive description of, and reference to, the iostreams and locales classes, showing how to put them ot use and offering advanced information on customizing and extending their basic operation. DLC: C++ (Computer program language)","['C++ Programming Language', 'Computer Software', 'Mathematics']",Standard C++ Iostreams and Locales: Advanced Programmer's Guide and Reference,https://www.amazon.com/dp/0201183951
['Nicolai M. Josuttis'],,47be6794d595e64e6be8618f27c6fa8562877cf91bb9a0a19d1f87d7b82ce925,,,"August 30, 2020",amazon.com,"All aspects of C++ Move Semantics.

Move semantics, introduced with C++11, has become a hallmark of modern C++ programming. However, it also complicates the language in many ways. Even after several years of support of move semantics experienced programmers struggle with all the details of move semantics. And style guides still don't recommend the right consequences for programming even of trivial classes. Time to explain all aspects of C++ move semantics in detail.

This book teaches C++ move semantics. Starting from the basic principles it motivates and explains all the corner cases of move semantics so that you as a programmer can use move semantics right. The book is valuable for those that are beginning to learn about move semantics and is essential for those that are using it already.

You will learn:

Motivation and terminology of move semantics
How and why you implicitly benefit from move semantics
How to explicitly benefit from move semantics
All traps and how to deal with them
All consequences for your programming style

The focus lies on the application of the described features in practice. Compelling examples and useful background information help to understand and improve code from trivial classes up to generic foundation libraries and frameworks.

""I thought I understood move semantics but I didn't really! I learned a lot in your book.""
(Jonathan Boccara)

""This is the book I’ve needed for a long time.""
(Rob Bernstein)

""Sometimes I think I have a better grasp on entanglement & quantum teleportation than I do in some weird C++ move semantics. To paraphrase Feynman: If you think you understand C++ move semantics, you don't understand C++ move semantics. Read this book.""
(Victor Ciura)","['C++ Programming Language', 'Schools & Teaching']",C++ Move Semantics - The Complete Guide: First Edition,https://www.amazon.com/dp/3967309002
['Ivan Cukic'],,3ecbb6166ff2d6832bd16317da99c22f82fae1874423b9b817fcdcef5c7a7824,,,"November 19, 2018",amazon.com,"Summary

Functional Programming in C++ teaches developers the practical side of functional programming and the tools that C++ provides to develop software in the functional style. This in-depth guide is full of useful diagrams that help you understand FP concepts and begin to think functionally.

Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.

About the Technology

Well-written code is easier to test and reuse, simpler to parallelize, and less error prone. Mastering the functional style of programming can help you tackle the demands of modern apps and will lead to simpler expression of complex program logic, graceful error handling, and elegant concurrency. C++ supports FP with templates, lambdas, and other core language features, along with many parts of the STL.

About the Book

Functional Programming in C++ helps you unleash the functional side of your brain, as you gain a powerful new perspective on C++ coding. You'll discover dozens of examples, diagrams, and illustrations that break down the functional concepts you can apply in C++, including lazy evaluation, function objects and invokables, algebraic data types, and more. As you read, you'll match FP techniques with practical scenarios where they offer the most benefit.

What's inside


Writing safer code with no performance penalties
Explicitly handling errors through the type system
Extending C++ with new control structures
Composing tasks with DSLs

About the Reader

Written for developers with two or more years of experience coding in C++.

About the Author

Ivan Čukić is a core developer at KDE and has been coding in C++ since 1998. He teaches modern C++ and functional programming at the Faculty of Mathematics at the University of Belgrade.

Table of Contents


Introduction to functional programming
Getting started with functional programming
Function objects
Creating new functions from the old ones
Purity: Avoiding mutable state
Lazy evaluation
Ranges
Functional data structures
Algebraic data types and pattern matching
Monads
Template metaprogramming
Functional design for concurrent systems
Testing and debugging","['C Programming Language', 'C++ Programming Language', 'Computer Programming Languages']",Functional Programming in C++: How to improve your C++ programs using functional techniques,https://www.amazon.com/dp/1617293814
"['Björn Andrist', 'Viktor Sehr']",,ab63389f4ad38b5154f5fd294bdb1e73ed818ce34521cdc960e6113f96bd40da,,,"December 21, 2020",amazon.com,"A comprehensive guide to help aspiring and professional C++ developers elevate the performance of their apps by allowing them to run faster and consume fewer resources

Purchase of the print or Kindle book includes a free eBook in PDF format.




Key features

Updated to C++20 with completely revised code and more content on error handling, benchmarking, memory allocators, and concurrent programming
Explore the latest C++20 features including concepts, ranges, and coroutines
Utilize C++ constructs and techniques to carry out effective data structure optimization and memory management




Book Description

C++ High Performance, Second Edition intends to guide you through optimizing the performance of your C++ apps by allowing them to run faster and consume fewer resources on the device they're running on without compromising the readability of your codebase.

The book begins by introducing C++ language and some of its modern concepts to you in brief. Once you are familiar with the fundamentals, it enables you to measure and identify bottlenecks in a C++ codebase and how to eradicate them using modern C++ constructs and techniques. In this process, you will gradually improve your style of writing code. You will further dive deep to explore data structure optimization, memory management, and how it can be used efficiently concerning CPU caches.

After laying the foundation, the book trains you to leverage algorithms, ranges, and containers from the standard library to achieve faster execution, write readable code and use customized iterators. It provides hands-on experience of C++ metaprogramming, coroutines, reflection to reduce boilerplate code, proxy objects to perform optimizations under the hood, concurrent programming and lock-free data structures. The book concludes with an overview of parallel algorithms.

By the end of this book, you will have developed the ability to use every tool as per its need to boost the efficiency of your C++ project.




What you will learn

Write specialized data structures for performance-critical code
Use modern metaprogramming techniques to reduce runtime calculations
Achieve efficient memory management using custom memory allocators
Reduce boilerplate code using reflection techniques
Reap the benefits of lock-free concurrent programming
Gain insights into subtle optimizations used by standard library algorithms
Compose algorithms using ranges library
Develop the ability to apply metaprogramming aspects such as constexpr, constraints and concepts
Implement lazy generators and asynchronous tasks using C++20 coroutines




Who this book is for

﻿If you're a C++ developer looking to improve the efficiency of your code or just keen to upgrade your skills to the next level, this book is for you.","['Memory Management Algorithms', 'Parallel Computer Programming', 'C++ Programming Language']","C++ High Performance, Second Edition: Master the art of optimizing the functioning of your C++ code",https://www.amazon.com/dp/1839216549
['Bill Blunden'],,787ba1fd312a52c4c8bd14263f068acb9d12d7e222d92dc7d58168a17fe50ba9,,,"October 18, 2002",amazon.com,"Memory Management: Algorithms and Implementation in C/C++ presents several concrete implementations of garbage collection and explicit memory management algorithms. Every implementation is complemented by an in-depth presentation of theory, followed by benchmark tests, a complete listing of C/C++ source code, and a discussion of each implementation’s trade-offs.Find out how memory is managed at the hardware level by the processor. Discover the ways in which different operating systems take advantage of processor facilities to provide memory services via the system call interface. Understand how development libraries and run-time systems build upon the operating system services to manage memory on behalf of user applications. Learn about five complete memory management subsystems that utilize both explicit and automatic collection algorithms.","['Memory Management Algorithms', 'C Programming Language', 'C++ Programming Language']",Memory Management Algorithms and Implementation in C/C++ (Windows Programming/Development),https://www.amazon.com/dp/1556223471
['Antony Polukhin'],,b74faba1e09d1be994665c666c3947ee9a5d8109a6946b87b52173d1487e8d26,,,"August 30, 2017",amazon.com,"Learn to build applications faster and better by leveraging the real power of Boost and C++

About This Book
Learn to use the Boost libraries to simplify your application development
Learn to develop high quality, fast and portable applications
Learn the relations between Boost and C++11/C++4/C++17
Who This Book Is For

This book is for developers looking to improve their knowledge of Boost and who would like to simplify their application development processes. Prior C++ knowledge and basic knowledge of the standard library is assumed.

What You Will Learn
Get familiar with new data types for everyday use
Use smart pointers to manage resources
Get to grips with compile-time computations and assertions
Use Boost libraries for multithreading
Learn about parallel execution of different task
Perform common string-related tasks using Boost libraries
Split all the processes, computations, and interactions to tasks and process them independently
Learn the basics of working with graphs, stacktracing, testing and interprocess communications
Explore different helper macros used to detect compiler, platform and Boost features
In Detail

If you want to take advantage of the real power of Boost and C++ and avoid the confusion about which library to use in which situation, then this book is for you.

Beginning with the basics of Boost C++, you will move on to learn how the Boost libraries simplify application development. You will learn to convert data such as string to numbers, numbers to string, numbers to numbers and more. Managing resources will become a piece of cake. You'll see what kind of work can be done at compile time and what Boost containers can do. You will learn everything for the development of high quality fast and portable applications. Write a program once and then you can use it on Linux, Windows, MacOS, Android operating systems. From manipulating images to graphs, directories, timers, files, networking – everyone will find an interesting topic.

Be sure that knowledge from this book won't get outdated, as more and more Boost libraries become part of the C++ Standard.","['Parallel Computer Programming', 'C++ Programming', 'Open Source Programming']",Boost C++ Application Development Cookbook - Second Edition: Recipes to simplify your application development,https://www.amazon.com/dp/B06Y2WTZPR
['Fedor G. Pikus'],,2b910c88a63c3aac9c39080811ba4c3d0455ff1f3bb4c28f0f471d0a5184e8a5,,,"October 22, 2021",amazon.com,"Become a better programmer with performance improvement techniques such as concurrency, lock-free programming, atomic operations, parallelism, and memory management

Key Features
Learn proven techniques from a heavyweight and recognized expert in C++ and high-performance computing
Understand the limitations of modern CPUs and their performance impact
Find out how you can avoid writing inefficient code and get the best optimizations from the compiler
Learn the tradeoffs and costs of writing high-performance programs
Book Description

The great free lunch of ""performance taking care of itself"" is over. Until recently, programs got faster by themselves as CPUs were upgraded, but that doesn't happen anymore. The clock frequency of new processors has almost peaked, and while new architectures provide small improvements to existing programs, this only helps slightly. To write efficient software, you now have to know how to program by making good use of the available computing resources, and this book will teach you how to do that.

The Art of Efficient Programming covers all the major aspects of writing efficient programs, such as using CPU resources and memory efficiently, avoiding unnecessary computations, measuring performance, and how to put concurrency and multithreading to good use. You'll also learn about compiler optimizations and how to use the programming language (C++) more efficiently. Finally, you'll understand how design decisions impact performance.

By the end of this book, you'll not only have enough knowledge of processors and compilers to write efficient programs, but you'll also be able to understand which techniques to use and what to measure while improving performance. At its core, this book is about learning how to learn.

What you will learn
Discover how to use the hardware computing resources in your programs effectively
Understand the relationship between memory order and memory barriers
Familiarize yourself with the performance implications of different data structures and organizations
Assess the performance impact of concurrent memory accessed and how to minimize it
Discover when to use and when not to use lock-free programming techniques
Explore different ways to improve the effectiveness of compiler optimizations
Design APIs for concurrent data structures and high-performance data structures to avoid inefficiencies
Who this book is for

This book is for experienced developers and programmers who work on performance-critical projects and want to learn new techniques to improve the performance of their code. Programmers in algorithmic trading, gaming, bioinformatics, computational genomics, or computational fluid dynamics communities will get the most out of the examples in this book, but the techniques are fairly universal. Although this book uses the C++ language, the concepts demonstrated in the book can be easily transferred or applied to other compiled languages such as C, Java, Rust, Go, and more.

Table of Contents
Introduction to Performance and Concurrency
Performance Measurements
CPU Architecture, Resources, and Performance Implications
Memory Architecture and Performance
Threads, Memory, and Concurrency
Concurrency and Performance
Data Structures for Concurrency
Concurrency in C++
High-Performance C++
Compiler Optimizations in C++
Undefined Behavior and Performance
Design for Performance","['C++ Programming Language', 'Computer Systems Analysis & Design', 'Software Development']",The Art of Writing Efficient Programs: An advanced programmer's guide to efficient hardware utilization and compiler optimizations using C++ examples,https://www.amazon.com/dp/1800208111
"['J. Davidson', 'Kate Gregory']",,4606e785afc81733c1835dd62796211afcf59df089382b5e71f4b4fa44e8d171,,,"December 16, 2021",amazon.com,"Discover the Beauty of Modern C++

""
Beautiful C++
presents the C++ Core Guidelines from a developer's point of view with an emphasis on what benefits can be obtained from following the rules and what nightmares can result from ignoring them. For true geeks, it is an easy and entertaining read. For most software developers, it offers something new and useful.""
--Bjarne Stroustrup, inventor of C++ and co-editor of the C++ Core Guidelines

Writing great C++ code needn't be difficult. The C++ Core Guidelines can help every C++ developer design and write C++ programs that are exceptionally reliable, efficient, and well-performing. But the Guidelines are so jam-packed with excellent advice that it's hard to know where to start. Start here, with Beautiful C++.

Expert C++ programmers Guy Davidson and Kate Gregory identify 30 Core Guidelines you'll find especially valuable and offer detailed practical knowledge for improving your C++ style. For easy reference, this book is structured to align closely with the official C++ Core Guidelines website.

Throughout, Davidson and Gregory offer useful conceptual insights and expert sample code, illuminate proven ways to use both new and longstanding language features more successfully, and show how to write programs that are more robust and performant by default.

Avoid ""bikeshedding"": stop wasting valuable time on trivia
Don't hurt yourself by writing code that will cause problems later
Know which legacy features to avoid and the modern features to use instead
Use newer features properly, to get their benefits without creating new problems
Default to higher-quality code that's statically type-safe, leak resistant, and easier to evolve
Use the Core Guidelines with any modern C++ version: C++20, C++17, C++14, or C++11

There's something here to improve virtually every program you write, design, or maintain.

For ease of experimentation, all sample code is available on Compiler Explorer at https://godbolt.org/z/cg30-ch0.0.

Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.","['C++ Programming Language', 'Computer Programming Languages']","Beautiful C++: 30 Core Guidelines for Writing Clean, Safe, and Fast Code",https://www.amazon.com/dp/0137647840
"['David Vandevoorde', 'Nicolai Josuttis', 'Douglas Gregor']",,3bd2c34cbe78c3219d56dafc5f83150e72c8ee44daee1037c222ef2f037698e5,,,"September 8, 2017",amazon.com,"Templates are among the most powerful features of C++, but they remain misunderstood and underutilized, even as the C++ language and development community have advanced. In C++ Templates, Second Edition, three pioneering C++ experts show why, when, and how to use modern templates to build software that’s cleaner, faster, more efficient, and easier to maintain.

Now extensively updated for the C++11, C++14, and C++17 standards, this new edition presents state-of-the-art techniques for a wider spectrum of applications. The authors provide authoritative explanations of all new language features that either improve templates or interact with them, including variadic templates, generic lambdas, class template argument deduction, compile-time if, forwarding references, and user-defined literals. They also deeply delve into fundamental language concepts (like value categories) and fully cover all standard type traits.

The book starts with an insightful tutorial on basic concepts and relevant language features. The remainder of the book serves as a comprehensive reference, focusing first on language details and then on coding techniques, advanced applications, and sophisticated idioms. Throughout, examples clearly illustrate abstract concepts and demonstrate best practices for exploiting all that C++ templates can do.


Understand exactly how templates behave, and avoid common pitfalls
Use templates to write more efficient, flexible, and maintainable software
Master today’s most effective idioms and techniques
Reuse source code without compromising performance or safety
Benefit from utilities for generic programming in the C++ Standard Library
Preview the upcoming concepts feature

The companion website, tmplbook.com, contains sample code and additional updates.","['C++ Programming Language', 'Computer Programming Languages']",C++ Templates: The Complete Guide,https://www.amazon.com/dp/0321714121
['Davide Di Gennaro'],,dfab4ea428227460e19ef714d0ee85d8463712630bc55b687100633b3d5ecba7,,,"May 8, 2015",amazon.com,"Advanced Metaprogramming in Classic C++ aims to be both an introduction and a reference to C++ template metaprogramming (TMP); TMP is presented in the book as a set of techniques that will bring a new style in C++ and make code exceptionally clear and efficient. The book deals with language aspects, design patterns, examples and applications (seen as case studies). Special emphasis is put on small reusable techniques that will improve the quality of daily work.

What makes the book exceptional is the level of understanding of the concepts involved imparted by the author. This is not just a rote overview of metaprogramming. You will truly understand difficult topics like static assertions, how to write metafunctions, overload resolution, lambda expressions, and many others. More than that, you will work through them with practical examples guided by the author's frank explanations. This book requires you to think and to learn and to understand the language so that youcan program at a higher level.","['C++ Programming', 'Compiler Design', 'Software Programming Compilers']",Advanced Metaprogramming in Classic C++,https://www.amazon.com/dp/B01JCOFWD4
['Marius Bancila'],,816fb6780ec6906fa8d4a4f14f22f4b103c01f735e84bd3d2aa1bcaba32cd34a,,,"August 19, 2022",amazon.com,"Understand how to use modern C++ templates for writing maintainable, robust, and fast software

Key Features
Grasp the fundamentals of and learn to write effective C++ templates
Get up to speed with the latest C++20 template features such as constraints and concepts
Explore different patterns and idioms to integrate templates in your program design
Book Description

Learn how the metaprogramming technique enables you to create data structures and functions that allow computation to happen at compile time. With this book, you'll realize how templates help you avoid writing duplicate code and are key to creating generic libraries, such as the standard library or Boost, that can be used in a multitude of programs.

The introductory chapters of this book will give you insights into the fundamentals of templates and metaprogramming. You'll then move on to practice writing complex templates and exploring advanced concepts such as template recursion, template argument deduction, forwarding references, type traits, and conditional compilation. Along the way, you'll learn how to write variadic templates and how to provide requirements to the template arguments with C++20 constraints and concepts. Finally, you'll apply your knowledge of C++ metaprogramming templates to implement various metaprogramming patterns and techniques.

By the end of this book, you'll have learned how to write effective templates and implement metaprogramming in your everyday programming journey.

What you will learn
Understand the syntax for all types of templates
Discover how specialization and instantiation works
Get to grips with template argument deduction and forwarding references
Write variadic templates with ease
Become familiar with type traits and conditional compilation
Restrict template arguments in C++20 with constraints and concepts
Implement patterns such as CRTP, mixins, and tag dispatching
Who this book is for

This book is for beginner-to-intermediate C++ developers who want to learn about template metaprogramming as well as advanced C++ developers looking to get up to speed with the new C++20 features related to templates and the the various idioms and patterns. Basic C++ coding experience is necessary to get started with this book.

Table of Contents
Introduction to Templates
Template Fundamentals
Variadic Templates
Advanced Template Concepts
Type Traits and Conditional Compilation
Concepts and Constraints
Patterns and Idioms
Ranges and Algorithms
The Ranges Library
Appendix","['C++ Programming', 'Computer Systems Analysis & Design (Kindle Store)', 'C++ Programming Language']",Template Metaprogramming with C++: Learn everything about C++ templates and unlock the power of template metaprogramming,https://www.amazon.com/dp/B09ZHZFTKV
['Anthony Williams'],,2c1bfc786745ce1030ce0bc0e9aabf2e15d796fc1ab9baeaa48dd45d7ff8048d,,,"February 10, 2019",amazon.com,"Summary

This bestseller has been updated and revised to cover all the latest changes to C++ 14 and 17! C++ Concurrency in Action, Second Edition teaches you everything you need to write robust and elegant multithreaded applications in C++17.

Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.

About the Technology

You choose C++ when your applications need to run fast. Well-designed concurrency makes them go even faster. C++ 17 delivers strong support for the multithreaded, multiprocessor programming required for fast graphic processing, machine learning, and other performance-sensitive tasks. This exceptional book unpacks the features, patterns, and best practices of production-grade C++ concurrency.

About the Book

C++ Concurrency in Action, Second Edition is the definitive guide to writing elegant multithreaded applications in C++. Updated for C++ 17, it carefully addresses every aspect of concurrent development, from starting new threads to designing fully functional multithreaded algorithms and data structures. Concurrency master Anthony Williams presents examples and practical tasks in every chapter, including insights that will delight even the most experienced developer.

What's inside


Full coverage of new C++ 17 features
Starting and managing threads
Synchronizing concurrent operations
Designing concurrent code
Debugging multithreaded applications

About the Reader

Written for intermediate C and C++ developers. No prior experience with concurrency required.

About the Author

Anthony Williams has been an active member of the BSI C++ Panel since 2001 and is the developer of the just::thread Pro extensions to the C++ 11 thread library.

Table of Contents


Hello, world of concurrency in C++!
Managing threads
Sharing data between threads
Synchronizing concurrent operations
The C++ memory model and operations on atomic types
Designing lock-based concurrent data structures
Designing lock-free concurrent data structures
Designing concurrent code
Advanced thread management
Parallel algorithms
Testing and debugging multithreaded applications","['Parallel Computer Programming', 'C Programming Language', 'C++ Programming Language']",C++ Concurrency in Action,https://www.amazon.com/dp/1617294691
"['Praseed Pai', 'Peter Abraham']",,435c0b5817cd3fbe7359fefb9668e5970a5060369df6b0d469963729739b50ac,,,"June 29, 2018",amazon.com,"Learn how to implement the reactive programming paradigm with C++ and build asynchronous and concurrent applications

Key Features
Efficiently exploit concurrency and parallelism in your programs
Use the Functional Reactive programming model to structure programs
Understand reactive GUI programming to make your own applications using Qt
Book Description

Reactive programming is an effective way to build highly responsive applications with an easy-to-maintain code base. This book covers the essential functional reactive concepts that will help you build highly concurrent, event-driven, and asynchronous applications in a simpler and less error-prone way.

C++ Reactive Programming begins with a discussion on how event processing was undertaken by different programming systems earlier. After a brisk introduction to modern C++ (C++17), you'll be taken through language-level concurrency and the lock-free programming model to set the stage for our foray into the Functional Programming model. Following this, you'll be introduced to RxCpp and its programming model. You'll be able to gain deep insights into the RxCpp library, which facilitates reactive programming. You'll learn how to deal with reactive programming using Qt/C++ (for the desktop) and C++ microservices for the Web.

By the end of the book, you will be well versed with advanced reactive programming concepts in modern C++ (C++17).

What you will learn
Understand language-level concurrency in C++
Explore advanced C++ programming for the FRP
Uncover the RxCpp library and its programming model
Mix the FP and OOP constructs in C++ 17 to write well-structured programs
Master reactive microservices in C++
Create custom operators for RxCpp
Learn advanced stream processing and error handling
Who this book is for

If you're a C++ developer interested in using reactive programming to build asynchronous and concurrent applications, you'll find this book extremely useful. This book doesn't assume any previous knowledge of reactive programming.

Table of Contents
Reactive Programming Model – an Overview and its History
A Breeze tour of the Modern C++ Language and Its key Idioms
The Language level Concurrency and Parallelism in C++
Lock Free and Asynchronous programming in C++
Introduction to Observables
Introduction to Event Stream Programming using C++
An Introduction to data flow computation and the Rxcpp library
Rxcpp – the Key Elements
Reactive GUI Programming using Qt/C++
Design Patterns and Idioms for C++ Reactive programming
Reactive Micro services in C++
Advanced Streams and Handling Errors","['C++ Programming Language', 'Computer Programming Languages', 'Microsoft Programming']",C++ Reactive Programming,https://www.amazon.com/dp/1788629779
"['Maurice Herlihy', 'Nir Shavit', 'Victor Luchangco']",,95d6f49d69e97fd96500014e5a647d87c62f83a364dfe190e346902469f4653b,,,"October 27, 2020",amazon.com,"The Art of Multiprocessor Programming, Second Edition, provides users with an authoritative guide to multicore programming. This updated edition introduces higher level software development skills relative to those needed for efficient single-core programming, and includes comprehensive coverage of the new principles, algorithms, and tools necessary for effective multiprocessor programming. The book is an ideal resource for students and professionals alike who will benefit from its thorough coverage of key multiprocessor programming issues.
Features new exercises developed for instructors using the text, with more algorithms, new examples, and other updates throughout the book
Presents the fundamentals of programming multiple threads for accessing shared memory
Explores mainstream concurrent data structures and the key elements of their design, as well as synchronization techniques, from simple locks to transactional memory systems","['Software Design & Engineering', 'Microsoft Programming', 'Software Development']",The Art of Multiprocessor Programming,https://www.amazon.com/dp/0124159508
"['Rainer Grimm', 'Beatrix Jaud-Grimm']",,a0029bbfd432aee3909b4c90af3ffe6c59a7a3459db58bb8d5b8beff46a65ed7,,,"January 20, 2024",amazon.com,"C++11 is the first C++ standard that deals with concurrency. The story goes on with C++17, C++20, and will continue with C++23. I'll give you a detailed insight into the current and the upcoming concurrency in C++. This insight includes the theory and a lot of practice.

C++11 and C++14 have the basic building blocks for creating concurrent or parallel programs.
With C++17, we got the parallel algorithms of the Standard Template Library (STL). That means most of the algorithms of the STL can be executed sequentially, in parallel, or vectorized.
The concurrency story in C++ goes on. With C++20, we got coroutines, atomic smart pointers, semaphores, latches, and barriers.
C++23 supports the first concrete coroutine: std::generator.
With future C++ standards, we can hope for executors, extended futures, transactional memory, and more.",['C++ Programming Language'],Concurrency with Modern C++: What every professional C++ programmer should know about concurrency.,https://www.amazon.com/dp/B0CT41Q1FF
"['Randal Bryant', ""David O'Hallaron""]",,9a5e5e0e6c903a0cf51c31a609abc06c94a87f442063b42903a84a1c6a8474fc,,,"March 2, 2015",amazon.com,"&>standalone product; MasteringEngineering ® does not come packaged with this content. If you would like to purchase both the physical text and MasteringEngineering search for 0134123832 / 9780134123837 Computer Systems: A Programmer's Perspective plus MasteringEngineering with Pearson eText ― Access Card Package, 3/e

Package consists of:

013409266X/9780134092669 Computer Systems: A Programmer's Perspective, 3/e
0134071921/9780134071923 MasteringEngineering with Pearson eText -- Standalone Access Card -- for Computer Systems: A Programmer's Perspective, 3/e

MasteringEngineering should only be purchased when required by an instructor.

For courses in Computer Science and Programming

Computer systems: A Programmer’s Perspective explains the underlying elements common among all computer systems and how they affect general application performance. Written from the programmer’s perspective, this book strives to teach readers how understanding basic elements of computer systems and executing real practice can lead them to create better programs.

Spanning across computer science themes such as hardware architecture, the operating system, and systems software, the Third Edition serves as a comprehensive introduction to programming. This book strives to create programmers who understand all elements of computer systems and will be able to engage in any application of the field--from fixing faulty software, to writing more capable programs, to avoiding common flaws. It lays the groundwork for readers to delve into more intensive topics such as computer architecture, embedded systems, and cybersecurity.

This book focuses on systems that execute an x86-64 machine code, and recommends that programmers have access to a Linux system for this course. Programmers should have basic familiarity with C or C++.

Also available with MasteringEngineering

MasteringEngineering is an online homework, tutorial, and assessment system, designed to improve results through personalized learning. This innovative online program emulates the instructor’s office hour environment, engaging and guiding students through engineering concepts with self-paced individualized coaching With a wide range of activities available, students can actively learn, understand, and retain even the most difficult concepts.


Students, if interested in purchasing this title with MasteringEngineering, ask your instructor for the correct package ISBN and Course ID. Instructors, contact your Pearson representative for more information.",['Computer Science'],Computer Systems: A Programmer's Perspective,https://www.amazon.com/dp/013409266X
"['Bertil Schmidt Ph.D.', 'Jorge Álvaro Gonzalez-Martinez MD PhD']",,b154a64db52408b2231392121b802ffeddef28d9280ad92f927e3de2a3fbe930,,,"November 27, 2017",amazon.com,"Parallel Programming: Concepts and Practice provides an upper level introduction to parallel programming. In addition to covering general parallelism concepts, this text teaches practical programming skills for both shared memory and distributed memory architectures. The authors’ open-source system for automated code evaluation provides easy access to parallel computing resources, making the book particularly suitable for classroom settings.

Covers parallel programming approaches for single computer nodes and HPC clusters: OpenMP, multithreading, SIMD vectorization, MPI, UPC++
Contains numerous practical parallel programming exercises
Includes access to an automated code evaluation tool that enables students the opportunity to program in a web browser and receive immediate feedback on the result validity of their program
Features an example-based teaching of concept to enhance learning outcomes","['Parallel Computer Programming', 'Information Theory', 'Discrete Mathematics']",Parallel Programming: Concepts and Practice,https://www.amazon.com/dp/0128498900
['Dmytro Kedyk'],,f54c28fd949954d9b4ed9bdd72aff90795dd26d041253393df0d42ed26f67835,,,"December 8, 2020",amazon.com,"Programmers use algorithms and data structures all the time, usually through numerous available APIs. Ideally an algorithm is correct, easy to understand, applicable to many problems, efficient, and free of intellectual property claims. This book covers algorithms and data structures learned in an algorithms class and many that aren't, including statistical algorithms, external memory algorithms, numerical methods, optimization, string algorithms, and data compression.

About a fourth of the book is devoted to machine learning. There is much more theory than in the rest of the book because in machine learning relevant theory is more practical than algorithms. New learning algorithms are proposed often, and it's easy to get lost without understanding how learning actually works. In particular, getting comfortable with the concept of estimation error substantially improves the ability to reason about statistical algorithms.

Another fourth is about numerical algorithms. Separate chapters cover matrix algorithms (such as eigenvalue calculation for spectral clustering), working with functions (integration, root finding, etc.), and optimization (both continuous and convex).

Expect to learn something new in every chapter. Many topics appear only in specialized books and papers, including collections of random number generators and hash functions for various use cases, priority queues that allow random access for applications like Djikstra's shortest path algorithm, the simplex method for linear programming, efficient dictionaries for variable-length keys, Monte Carlo and bootstrap methods for statistical computing, top-performing learning algorithms such as random forest, etc. One of the goals of the book is answering all questions you might have had since taking an algorithms class.

Algorithm descriptions have tested C++ code, illustrations, performance analysis, and suggestions for optimizations and extensions. Still, the book is advanced, requiring some algorithmic maturity. After working through it, you will know more about algorithms and machine learning than before, even if you are already an expert. This is the book the author wishes he had when he started studying algorithms.","['Programming Algorithms', 'Mathematical Analysis', 'Mathematics']",Implementing Useful Algorithms in C++,https://www.amazon.com/dp/B08PXHJCXY
"['Robert Sedgewick', 'Peter Gordon']",,37706bac55acc1a81e4889240c3f1270f264bef0714a8e68601b0d2ccfcd1b81,,,"December 28, 2001",amazon.com,"Software developers and computer scientists have eagerly awaited this comprehensive revision of Robert Sedgewick's landmark texts on algorithms for C++. Sedgewick has completely revamped all five sections, illuminating today's best algorithms for an exceptionally wide range of tasks. This shrink-wrapped package brings together Algorithms in C++, Third Edition, Parts 1-4 and his new Algorithms in C++, Third Edition, Part 5. Together, these books are the most definitive, up-to-date, and practical algorithms resource available. The first book introduces fundamental concepts associated with algorithms; then covers data structures, sorting, and searching. The second book focuses entirely on graphing algorithms, which are critical for a wide range of applications, including network connectivity, circuit design, scheduling, transaction processing, and resource allocation. Sedgewick focuses on practical applications, giving readers all the information, diagrams, and real (not pseudo-) code they need to confidently implement, debug, and use the algorithms he presents. Together, these books present nearly 2,000 new exercises, hundreds of new figures, and dozens of new programs.","['Computer Programming Structured Design', 'C++ Programming Language', 'Computer Systems Analysis & Design']","Bundle of Algorithms in C++, Parts 1-5: Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms",https://www.amazon.com/dp/020172684X
"['Michael T. Goodrich', 'Roberto Tamassia', 'David M. Mount']",,3c5409f622b9c4f1daac82d191c8011073f0f2921a03af97c13e19fa372229da,,,"February 22, 2011",amazon.com,"This second edition of Data Structures and Algorithms in C++ is designed to provide an introduction to data structures and algorithms, including their design, analysis, and implementation. The authors offer an introduction to object-oriented design with C++ and design patterns, including the use of class inheritance and generic programming through class and function templates, and retain a consistent object-oriented viewpoint throughout the book.

This is a “sister” book to Goodrich & Tamassia’s Data Structures and Algorithms in Java, but uses C++ as the basis language instead of Java. This C++ version retains the same pedagogical approach and general structure as the Java version so schools that teach data structures in both C++ and Java can share the same core syllabus.

In terms of curricula based on the IEEE/ACM 2001 Computing Curriculum, this book is appropriate for use in the courses CS102 (I/O/B versions), CS103 (I/O/B versions), CS111 (A version), and CS112 (A/I/O/F/H versions).","['Data Structure and Algorithms', 'C++ Programming Language', 'Computer Programming Languages']",Data Structures and Algorithms in C++,https://www.amazon.com/dp/0470383275
['Mark Weiss'],,ff00a58409dece5a3c2a7ce307f296fa390f08123009feb7706fdf8f18ecd81b,,,"June 13, 2013",amazon.com,"Data Structures and Algorithm Analysis in C++ is an advanced algorithms book that bridges the gap between traditional CS2 and Algorithms Analysis courses.


As the speed and power of computers increases, so does the need for effective programming and algorithm analysis. By approaching these skills in tandem, Mark Allen Weiss teaches readers to develop well-constructed, maximally efficient programs using the C++ programming language.

This book explains topics from binary heaps to sorting to NP-completeness, and dedicates a full chapter to amortized analysis and advanced data structures and their implementation. Figures and examples illustrating successive stages of algorithms contribute to Weiss’ careful, rigorous and in-depth analysis of each type of algorithm.","['Computer Programming Structured Design', 'C++ Programming Language', 'Computer Systems Analysis & Design']",Data Structures & Algorithm Analysis in C++,https://www.amazon.com/dp/013284737X
['Henry Warren'],,9452c821b53e5f6703e2a477b488ba43f6c9c63ff8336371d3c094a7a8232480,,,"September 25, 2012",amazon.com,"In Hacker’s Delight, Second Edition, Hank Warren once again compiles an irresistible collection of programming hacks: timesaving techniques, algorithms, and tricks that help programmers build more elegant and efficient software, while also gaining deeper insights into their craft. Warren’s hacks are eminently practical, but they’re also intrinsically interesting, and sometimes unexpected, much like the solution to a great puzzle. They are, in a word, a delight to any programmer who is excited by the opportunity to improve.





Extensive additions in this edition include

A new chapter on cyclic redundancy checking (CRC), including routines for the commonly used CRC-32 code
A new chapter on error correcting codes (ECC), including routines for the Hamming code
More coverage of integer division by constants, including methods using only shifts and adds
Computing remainders without computing a quotient
More coverage of population count and counting leading zeros
Array population count
New algorithms for compress and expand
An LRU algorithm
Floating-point to/from integer conversions
Approximate floating-point reciprocal square root routine
A gallery of graphs of discrete functions
Now with exercises and answers .","['Computer Algorithms', 'Programming Algorithms', 'Computer Hacking']",Hacker's Delight,https://www.amazon.com/dp/0321842685
"['Adnan Aziz', 'Tsung-Hsien Lee', 'Amit Prakash']",,e64c6b0245578be1d7369299d3e7cc8a067597eb32ae442ae9471c0a773fb8ed,,,"October 11, 2012",amazon.com,"This is the C++ version of our book. See the website for links to the Java version, as well as to a version that uses larger fonts. Have you ever...

Wanted to work at an exciting futuristic company?
Struggled with an interview problem that could have been solved in 15 minutes?
Wished you could study real-world computing problems?

If so, you need to read Elements of Programming Interviews (EPI).

EPI is your comprehensive guide to interviewing for software development roles.

The core of EPI is a collection of over 250 problems with detailed solutions. The problems are representative of interview questions asked at leading software companies. The problems are illustrated with 200 figures, 300 tested programs, and 150 additional variants.

The book begins with a summary of the nontechnical aspects of interviewing, such as strategies for a great interview, common mistakes, perspectives from the other side of the table, tips on negotiating the best offer, and a guide to the best ways to use EPI. We also provide a summary of data structures, algorithms, and problem solving patterns.

Coding problems are presented through a series of chapters on basic and advanced data structures, searching, sorting, algorithm design principles, and concurrency. Each chapter stars with a brief introduction, a case study, top tips, and a review of the most important library methods. This is followed by a broad and thought-provoking set of problems.

A practical, fun approach to computer science fundamentals, as seen through the lens of common programming interview questions.
Jeff Atwood/Co-founder, Stack Overflow and Discourse","['Discrete Mathematics', 'C++ Programming Language', 'Computer Software']",Elements of Programming Interviews: The Insiders' Guide,https://www.amazon.com/dp/1479274836
"['Paul Deitel', 'Harvey Deitel']",,6bb1eff48d29bad5b84c17a2aa3522f741bd6e294b6d63885899af12553a1ce6,,,"January 1, 2014",amazon.com,"In C++11 for Programmers, the Deitels bring their proven Live Code approach to teaching today’s powerful new version of the C++ language. Like all Deitel Developer titles, they teach the best way possible: via hundreds of complete example C++ programs, with thousands of lines of downloadable C++ source code.

Unlike other C++11 books, this guide teaches robust, best-practice coding practices that fully support the CERT® Coordination Center’s authoritative secure coding standards. To help you write programs that are even more secure, the Deitels also introduce C++11’s new non-deterministic random-number generation capabilities. Using all these techniques, you can write industrial-strength C+11 code that stands up to attacks from viruses, worms, and other forms of malware.

Ideal for anyone who’s worked with at least one programming language before, C++11 for Programmers utilizes a proven “early objects” approach, emphasizing program clarity, software reuse, and component-oriented software construction. In addition to the core language, it will help you take advantage of the newest standard libraries and the newest language extensions. Coverage includes many new C++11 features, including smart pointers, regular expressions, shared_ptr and weak_ptr, and more.

This book contains 240 complete C++11 programs (more than 15,000 lines of downloadable code). All code has been thoroughly tested on three popular industrial-strength C++11 compilers: GNU C++ 4.7, Microsoft® Visual C++® 2012, and Apple® LLVM in Xcode® 4.5.","['C# Programming', 'C++ Programming Language', 'Computer Programming Languages']",C++11 for Programmers (Deitel Developer),https://www.amazon.com/dp/0133439852
['Scott Meyers'],,adcc368b589173acf8bda4466471e543644b78af3a50f668cce159a9e23bab2f,,,"December 30, 2014",amazon.com,"Coming to grips with C++11 and C++14 is more than a matter of familiarizing yourself with the features they introduce (e.g., auto type declarations, move semantics, lambda expressions, and concurrency support). The challenge is learning to use those features effectively―so that your software is correct, efficient, maintainable, and portable. That’s where this practical book comes in. It describes how to write truly great software using C++11 and C++14―i.e. using modern C++.

Topics include:

The pros and cons of braced initialization, noexcept specifications, perfect forwarding, and smart pointer make functions
The relationships among std::move, std::forward, rvalue references, and universal references
Techniques for writing clear, correct, effective lambda expressions
How std::atomic differs from volatile, how each should be used, and how they relate to C++'s concurrency API
How best practices in ""old"" C++ programming (i.e., C++98) require revision for software development in modern C++

Effective Modern C++ follows the proven guideline-based, example-driven format of Scott Meyers' earlier books, but covers entirely new material.

""After I learned the C++ basics, I then learned how to use C++ in production code from Meyer's series of Effective C++ books. Effective Modern C++ is the most important how-to book for advice on key guidelines, styles, and idioms to use modern C++ effectively and well. Don't own it yet? Buy this one. Now"".

-- Herb Sutter, Chair of ISO C++ Standards Committee and C++ Software Architect at Microsoft","['C Programming Language', 'C++ Programming Language', 'Software Development']",Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,https://www.amazon.com/dp/1491903996
['Jacek Galowicz'],,0894a7d089bb0782b46319c00fd4d4d6bfa2c762faf995c7062114edda60a0f0,,,"June 28, 2017",amazon.com,"Key Features
Learn the latest features of C++ and how to write better code by using the Standard Library (STL). Reduce the development time for your applications.
Understand the scope and power of STL features to deal with real-world problems.
Compose your own algorithms without forfeiting the simplicity and elegance of the STL way.
Book Description

C++ has come a long way and is in use in every area of the industry. Fast, efficient, and flexible, it is used to solve many problems. The upcoming version of C++ will see programmers change the way they code. If you want to grasp the practical usefulness of the C++17 STL in order to write smarter, fully portable code, then this book is for you.

Beginning with new language features, this book will help you understand the language's mechanics and library features, and offers insight into how they work. Unlike other books, ours takes an implementation-specific, problem-solution approach that will help you quickly overcome hurdles. You will learn the core STL concepts, such as containers, algorithms, utility classes, lambda expressions, iterators, and more, while working on practical real-world recipes. These recipes will help you get the most from the STL and show you how to program in a better way.

By the end of the book, you will be up to date with the latest C++17 features and save time and effort while solving tasks elegantly using the STL.

What you will learn
Learn about the new core language features and the problems they were intended to solve
Understand the inner workings and requirements of iterators by implementing them
Explore algorithms, functional programming style, and lambda expressions
Leverage the rich, portable, fast, and well-tested set of well-designed algorithms provided in the STL
Work with strings the STL way instead of handcrafting C-style code
Understand standard support classes for concurrency and synchronization, and how to put them to work
Use the filesystem library addition available with the C++17 STL
About the Author

Jacek Galowicz obtained his master of science in electrical engineering/computer engineering at RWTH Aachen University, Germany. While at university, he enjoyed working as a student assistant in teaching and research, and he participated in several scientific publications. During and after his studies, he worked as a freelancer and implemented applications as well as kernel drivers in C and C++, touching various areas, including 3D graphics programming, databases, network communication, and physics simulation. In recent years, he has been programming performance- and security-sensitive microkernel operating systems for Intel x86 virtualization at Intel and FireEye in Braunschweig, Germany. He has a strong passion for modern C++ implementations of low-level software, and he tries hard to combine high performance with an elegant coding style. Learning purely functional programming and Haskell in recent years triggered his drive to implement generic code with the aid of meta programming.

Table of Contents
The New C++17 Features
STL Containers
Iterators
Lambda Expressions
STL Algorithm Basics
Advanced Use of STL Algorithms
Strings, Stream Classes, and Regular Expressions
Utility Classses
Parallelism and Concurrency
Filesystem","['Functional Software Programming', 'C++ Programming', 'C++ Programming Language']",C++17 STL Cookbook: Discover the latest enhancements to functional programming and lambda expressions,https://www.amazon.com/dp/B01MTSADN8
['Marius Bancila'],,9b440e2f3426f4b81166936d27cc888776422bb8402585701a8bce672058eb20,,,"May 24, 2018",amazon.com,"Test your C++ programming skills by solving real-world programming problems covered in the book

Key Features

Solve a variety of real-world programming and logic problems by leveraging the power of C++17
Test your skills in using language features, algorithms, data structures, design patterns, and more
Explore areas such as cryptography, communication, and image handling in C++

Book Description

C++ is one of the most widely-used programming languages and has applications in a variety of fields, such as gaming, GUI programming, and operating systems, to name a few. Through the years, C++ has evolved into (and remains) one of the top choices for software developers worldwide. This book will show you some notable C++ features and how to implement them to meet your application needs. Each problem is unique and doesn't just test your knowledge of the language; it tests your ability to think out of the box and come up with the best solutions. With varying levels of difficulty, you'll be faced with a wide variety of challenges. And in case you're stumped, you don't have to worry: we've got the best solutions to the problems in the book. So are you up for the challenge?

What you will learn

Serialize and deserialize JSON and XML data
Perform encryption and signing to facilitate secure communication between parties
Embed and use SQLite databases in your applications
Use threads and asynchronous functions to implement generic purpose parallel algorithms
Compress and decompress files to/from a ZIP archive
Implement data structures such as circular buffer and priority queue
Implement general purpose algorithms as well as algorithms that solve specific problems
Create client-server applications that communicate over TCP/IP
Consume HTTP REST services
Use design patterns to solve real-world problems","['C++ Programming Language', 'Computer Programming Languages', 'Microsoft Programming']",The Modern C++ Challenge: Become an expert programmer by solving real-world problems,https://www.amazon.com/dp/1788993861
['Bartlomiej Filipek'],,35e4309d9d96c5c0132f77e5f200b7d1fc58074f12b39c4e53d4b04eb4bd5715,,,"February 1, 2021",amazon.com,"This book shows the story of lambda expressions in C++. You’ll learn how to use this powerful feature in a step-by-step manner, slowly digesting the new capabilities and enhancements that come with each revision of the C++ Standard.

This is a Black and White version. The full-colour print is also available - look for ""C++ Lambda Story (Full Color)"".

We’ll start with C++98/03, and then we’ll move on to the latest C++ Standards.

C++98/03 - how to code without lambda support. What was the motivation for the new modern C++ feature?
C++11 - early days. You’ll learn about all the elements of a lambda expression and even some tricks. This is the longest chapter as we need to cover a lot.
C++14 - updates. Once lambdas were adopted, we saw some options to improve them.
C++17 - more improvements, especially by handling this pointer and allowing constexpr.
C++20 - in this section we’ll have a look at the latest and very fresh C++20 Standard.
Additionally, throughout the chapters, you’ll learn about the following techniques:
Immediately Invoked Functional Expressions (IIFE)
How to instrument a default functor to gather extra information
Replacing std::bind1st, std::bind2nd and removed functional stuff
The Overloaded Pattern and how to inherit from a lambda
Passing C++ captureless lambda as a function pointer to C API
LIFTING with lambdas
Storing lambdas in a container
Variadic templates and arguments packs
Lambdas and asynchronous execution
and many more

All equipped with more than 85 runnable code samples!","['C++ Programming Language', 'Microsoft Programming']",C++ Lambda Story: Everything you need to know about Lambda Expressions in Modern C++! (C++ Stories),https://www.amazon.com/dp/B08VLM1R76
['Marius Bancila'],,e9f3d05c3d4ec03ffd06a7a13758e958ff2bfb7fdf5922065c54721e849ae309,,,"September 11, 2020",amazon.com,"A pragmatic recipe book for acquiring a comprehensive understanding of the complexities and core fundamentals of C++ programming

Key Features
Explore the latest language and library features of C++20 such as modules, coroutines, concepts, and ranges
Shed new light on the core concepts in C++ programming, including functions, algorithms, threading, and concurrency, through practical self-contained recipes
Leverage C++ features like smart pointers, move semantics, constexpr, and more for increased robustness and performance
Book Description

C++ has come a long way to be one of the most widely used general-purpose languages that is fast, efficient, and high-performance at its core.

The updated second edition of Modern C++ Programming Cookbook addresses the latest features of C++20, such as modules, concepts, coroutines, and the many additions to the standard library, including ranges and text formatting. The book is organized in the form of practical recipes covering a wide range of problems faced by modern developers.

The book also delves into the details of all the core concepts in modern C++ programming, such as functions and classes, iterators and algorithms, streams and the file system, threading and concurrency, smart pointers and move semantics, and many others. It goes into the performance aspects of programming in depth, teaching developers how to write fast and lean code with the help of best practices.

Furthermore, the book explores useful patterns and delves into the implementation of many idioms, including pimpl, named parameter, and attorney-client, teaching techniques such as avoiding repetition with the factory pattern. There is also a chapter dedicated to unit testing, where you are introduced to three of the most widely used libraries for C++: Boost.Test, Google Test, and Catch2.

By the end of the book, you will be able to effectively leverage the features and techniques of C++11/14/17/20 programming to enhance the performance, scalability, and efficiency of your applications.

What you will learn
Understand the new C++20 language and library features and the problems they solve
Become skilled at using the standard support for threading and concurrency for daily tasks
Leverage the standard library and work with containers, algorithms, and iterators
Solve text searching and replacement problems using regular expressions
Work with different types of strings and learn the various aspects of compilation
Take advantage of the file system library to work with files and directories
Implement various useful patterns and idioms
Explore the widely used testing frameworks for C++
Who this book is for

The book is designed for entry- or medium-level C++ programmers who have a basic knowledge of C++ and want to master the language and become prolific modern C++ developers. Experienced C++ programmers can leverage this book to strengthen their command of C++ and find a good reference to many language and library features of C++11/14/17/20.

Table of Contents
Learning Modern Core Language Features
Working with Numbers and Strings
Exploring Functions
Preprocessing and Compilation
Standard Library Containers, Algorithms, and Iterators
General-Purpose Utilities
Working with Files and Streams
Leveraging Threading and Concurrency
Robustness and Performance
Implementing Patterns and Idioms
Exploring Testing Frameworks
C++20 Core Features","['C++ Programming Language', 'Computer Programming Languages', 'Software Development']","Modern C++ Programming Cookbook: Master C++ core language and standard library features, with over 100 recipes, updated to C++20, 2nd Edition",https://www.amazon.com/dp/1800208987
['Ray Lischner'],,16fd6aab914ab2822ae924b86f793a6e847da01dd5cb209496b6ca659ba4d295,,,"August 28, 2020",amazon.com,"Discover everything you need to know about C++ in a logical progression of small lessons that you can work through as quickly or as slowly as you need. This book divides C++ up into bite-sized chunks that will help you learn the language one step at a time. Fully updated to include C++20, it assumes no familiarity with C++ or any other C-based language.

Exploring C++20acknowledges that C++ can be a complicated language, so rather than baffle you with complex chapters explaining functions, classes, and statements in isolation you’ll focus on how to achieve results. By learning a little bit of this and a little of that you’ll soon have amassed enough knowledge to be writing non-trivial programs and will have built a solid foundation of experience that puts those previously baffling concepts into context.

In this fully-revised third edition of Exploring C++, you’ll learn how to use the standard library early in the book. Next, you’ll work with operators, objects, and data-sources in increasingly realistic situations. Finally, you’ll start putting the pieces together to create sophisticated programs of your own design confident that you’ve built a firm base of experience from which to grow.

What You Will Learn

Grasp the basics, including compound statements, modules, and more
Work with custom types and see how to use them
Write useful algorithms, functions, and more
Discover the latest C++ 20 features, including concepts, modules, and ranges

Apply your skills to projects that include a fixed-point numbers and body-mass index applications
Carry out generic programming and apply it in a practical project
Exploit multiple inheritance, traits/policies, overloaded functions, and metaprogramming

Who This Book Is For

Experienced programmers who may have little or no experience with C++ who want an accelerated learning guide to C++20 so they can hit the ground running.","['Compiler Design', 'Software Programming Compilers', 'Software Design & Engineering']",Exploring C++20: The Programmer's Introduction to C++,https://www.amazon.com/dp/1484259602
['Anais Sutherland'],,24ccb0e4428e2864f676d7b9b5d3d30dfbba30b75fb17fdb3988e15c312295d6,,,"March 17, 2024",amazon.com,"""C++ Programming Cookbook"" stands out as a clear, concise, and powerful technical resource for programmers who want to master C++'s intricacies. C++ programmers face a wide variety of problems, and this carefully written book is a treasure trove of solutions and methods to those software development challenges.

Each chapter is organized to help you get a good grasp of the language and everything it can do, from the basics of C++20 to more complex topics like sophisticated type manipulation and performance optimization. Through a series of carefully curated recipes, readers are invited on a journey of learning and competency. Starting with the fundamentals of creating a development environment and comprehending C++ syntax, the book progresses to cover more advanced subjects like concurrency, memory management, file I/O operations, object-oriented design concepts, functional programming, and more. This book focuses on the latest C++ features and aims to get programmers to use idiomatic C++ patterns and modern best practices.

""C++ Programming Cookbook"" goes beyond being a mere collection of recipes; it serves as a manifesto for progressive software development practices and problem-solving. Readers are empowered to adapt and apply their learnings to new, unexplored situations because each recipe not only solves specific problems but also exposes fundamental ideas and methodologies. Writing code that is clean, efficient, and easy to maintain is a priority throughout the book, which aims to help readers develop a skill set that is applicable to more general programming problems.

Key Learnings
Make use of C++20 features to write more expressive, efficient, and modern C++ code effortlessly.
Utilize template metaprogramming for compile-time calculations, enhancing code performance.
Implement smart pointers for robust memory management without the usual complexity.
Put object-oriented programming principles into use to design scalable and maintainable C++ applications.
Explore advanced type manipulation techniques, ensuring type-safe and flexible code across applications.
Harness concurrency and multithreading to build high-performance, responsive C++ software solutions.
Optimize file I/O operations for seamless data handling in text and binary formats.
Implement custom stream buffers for tailored data processing, boosting I/O efficiency.
Navigate stream locales and facets for internationalizing your applications, reaching a global audience.
Uncover efficient error and exception handling strategies to build reliable and error-free C++ program.
Table of Content
Getting Started with C++20
Deep Dive into Functions
Object-Oriented Programming In Action
Effective use of STL
Exploring Advanced C++ Functionalities
Effective Error Handling and Debugging
Concurrency and Multithreading
Performance and Memory Management
Advanced Type Manipulation
File I/O and Streams Operations","['Memory Management Algorithms', 'Computer Programming Debugging', 'C++ Programming']","C++ Programming Cookbook: Proven solutions using C++ 20 across functions, file I/O, streams, memory management, STL, concurrency, type manipulation and error debugging",https://www.amazon.com/dp/B0CYCV5748
['Marius Bancila'],,fed7940345059708f2e9949e3fb60ccf2a16ca79890a3959a9e405514e6e2d25,,,"February 29, 2024",amazon.com,"Meta Description: With a wealth of practical recipes, this third edition isn't just a guide to C++23; it's a complete resource covering key features and techniques from C++11 through to C++23. It's designed to keep you ahead of the curve in C++.

Key Features
Fully updated and packed with new recipes, including sync output streams, expected and mdspan, and C++20/23 range adaptors
Covers all significant features from all modern versions of the standard, providing comprehensive insights into modern C++
Learn through a series of hands-on, self-contained recipes
Purchase of the print or Kindle book includes a free eBook in PDF format
Book Description

The updated third edition of Modern C++ Programming Cookbook addresses the latest features of C++23, such as the stack library, the expected and mdspan types, span buffers, formatting library improvements, and updates to the ranges library. It also gets into more C++20 topics not previously covered, such as sync output streams and source_location

The book is organized into practical recipes covering a wide range of real-world problems, helping you find the solutions you need quickly. You’ll find coverage of all the core concepts of modern C++ programming and features and techniques from C++11 through to C++23, meaning you’ll stay ahead of the curve by learning to incorporate the newest language and library improvements

Beyond the core concepts and new features, you’ll explore recipes related to performance and best practices, how to implement useful patterns and idioms, like pimpl, named parameter, attorney-client, and the factory pattern, and how to complete unit testing with the widely used C++ libraries: Boost.Test, Google Test, and Catch2

With the comprehensive coverage this C++ programming guide offers, by the end of the book you’ll have everything you need to build performant, scalable, and efficient applications in C++.

What you will learn
Explore the new C++23 language and library features
Go deep into the most useful C++20 features
Learn to handle threading and concurrency for better performance
Solve complex string manipulation tasks efficiently with regex
Leverage the standard library for faster development
Master the file system library to work with files and directories
Work with different types of strings and understand compilation
See how you can use CRTP, mixins and other patterns in C++
Who this book is for

This book is designed for entry- and intermediate-level programmers who already have a foundational understanding of the C++ programming language, but who are looking to master the language, implement the newest features, and become proficient modern C++ developers. Experienced C++ programmers can leverage the recipes in this book to quickly get up to speed on all the most important language and library features of C++11/14/17/20 and 23.

Table of Contents
Learning Modern Core Language Features
Working with Numbers and Strings
Exploring Functions
Preprocessing and Compilation
Standard Library Containers, Algorithms, and Iterators
General-Purpose Utilities
Working with Files and Streams
Leveraging Threading and Concurrency
Robustness and Performance
Implementing Patterns and Idioms
Exploring Testing Frameworks
C++23 Features","['C++ Programming Language', 'Computer Programming Languages', 'Software Development']",Modern C++ Programming Cookbook: Master Modern C++ with comprehensive solutions for C++23 and all previous standards,https://www.amazon.com/dp/1835080545
['Fedor G. Pikus'],,50e39da39e7cd4bdd67d3d84bca202074ce0feb31c67975aac02f2bd098e32b9,,,"July 21, 2023",amazon.com,"A comprehensive guide with extensive coverage of concepts such as OOP, functional programming, generic programming, concurrency, and STL along with the latest features of C++

Purchase of the print or Kindle book includes a free PDF eBook

Key Features
Delve into the core patterns and components of C++ to master application design
Learn tricks, techniques, and best practices to solve common design and architectural challenges
Understand the limitation imposed by C++ and how to solve them using design patterns
Book Description

C++ is a general-purpose programming language designed for efficiency, performance, and flexibility. Design patterns are commonly accepted solutions to well-recognized design problems. In essence, they are a library of reusable components, only for software architecture, and not for a concrete implementation.

This book helps you focus on the design patterns that naturally adapt to your needs, and on the patterns that uniquely benefit from the features of C++. Armed with the knowledge of these patterns, you’ll spend less time searching for solutions to common problems and tackle challenges with the solutions developed from experience. You’ll also explore that design patterns are a concise and efficient way to communicate, as patterns are a familiar and recognizable solution to a specific problem and can convey a considerable amount of information with a single line of code.

By the end of this book, you’ll have a deep understanding of how to use design patterns to write maintainable, robust, and reusable software.

What you will learn
Recognize the most common design patterns used in C++
Understand how to use C++ generic programming to solve common design problems
Explore the most powerful C++ idioms, their strengths, and their drawbacks
Rediscover how to use popular C++ idioms with generic programming
Discover new patterns and idioms made possible by language features of C++17 and C++20
Understand the impact of design patterns on the program’s performance
Who this book is for

This book is for experienced C++ developers and programmers who wish to learn about software design patterns and principles and apply them to create robust, reusable, and easily maintainable programs and software systems.

Table of Contents
An Introduction to Inheritance and Polymorphism
Class and Function Templates
Memory and Ownership
Swap – From Simple to Subtle
A Comprehensive Look at RAII
Understanding Type Erasure
SFINAE, Concepts, and Overload Resolution Management
The Curiously Recurring Template Pattern
Named Arguments, Method Chaining, and Builder Pattern
Local Buffer Optimization
ScopeGuard
Friend Factory
Virtual Constructors and Factories
Template pattern and NonVirtual idiom
Singleton - A Classic OOP Pattern
Policy-Based Design
The Visitor Pattern and Multiple Dispatch
Adapters and Decorators","['Microprocessor & System Design', 'Cloud Computing', 'Operating Systems']","Hands-On Design Patterns with C++: Solve common C++ problems with modern design patterns and build robust applications, 2nd Edition",https://www.amazon.com/dp/1804611557
['Dmitri Nesteruk'],,78ee12384f7cc4cbad135d0243f5c85ee090af8fdeb358e44a21166244db2589,,,"January 1, 2018",amazon.com,"Apply modern C++17 to the implementations of classic design patterns. As well as covering traditional design patterns, this book fleshes out new patterns and approaches that will be useful to C++ developers. The author presents concepts as a fun investigation of how problems can be solved in different ways, along the way using varying degrees of technical sophistication and explaining different sorts of trade-offs.Design Patterns in Modern C++ also provides a technology demo for modern C++, showcasing how some of its latest features (e.g., coroutines) make difficult problems a lot easier to solve. The examples in this book are all suitable for putting into production, with only a few simplifications made in order to aid readability.What You Will LearnApply design patterns to modern C++ programmingUse creational patterns of builder, factories, prototype and singletonImplement structural patterns such as adapter, bridge, decorator, facade and moreWork with the behavioral patterns such as chain of responsibility, command, iterator, mediator and moreApply functional design patterns such as Monad and moreWho This Book Is ForThose with at least some prior programming experience, especially in C++.",[],Design Patterns in Modern C++: Reusable Approaches for Object-Oriented Software Design,https://www.amazon.com/dp/1484236025
"['John Debbie Lafferty', 'John Lakos', 'John Fuller']",,83485757510adfa42457aa17584fb533e63926740dc7bfcd8ef70e2e8cff4292,,,"December 17, 2019",amazon.com,"Writing reliable and maintainable C++ software is hard. Designing such software at scale adds a new set of challenges. Creating large-scale systems requires a practical understanding of logical design ― beyond the theoretical concepts addressed in most popular texts. To be successful on an enterprise scale, developers must also address physical design, a dimension of software engineering that may be unfamiliar even to expert developers. Drawing on over 30 years of hands-on experience building massive, mission-critical enterprise systems, John Lakos shows how to create and grow Software Capital. This groundbreaking volume lays the foundation for projects of all sizes and demonstrates the processes, methods, techniques, and tools needed for successful real-world, large-scale development.
Up to date and with a solid engineering focus, Large-Scale C++, Volume I: Process and Architecture, demonstrates fundamental design concepts with concrete examples. Professional developers of all experience levels will gain insights that transform their approach to design and development by understanding how to


Raise productivity by leveraging differences between infrastructure and application development
Achieve exponential productivity gains through feedback and hierarchical reuse
Embrace the component’s role as the fundamental unit of both logical and physical design
Analyze how fundamental properties of compiling and linking affect component design
Discover effective partitioning of logical content in appropriately sized physical aggregates
Internalize the important differences among sufficient, complete, minimal, and primitive software
Deliver solutions that simultaneously optimize encapsulation, stability, and performance
Exploit the nine established levelization techniques to avoid cyclic physical dependencies
Use lateral designs judiciously to avoid the “heaviness” of conventional layered architectures
Employ appropriate architectural insulation techniques for eliminating compile-time coupling
Master the multidimensional process of designing large systems using component-based methods

This is the first of John Lakos’s three authoritative volumes on developing large-scale systems using C++. This book, written for fellow software practitioners, uses familiar C++ constructs to solve real-world problems while identifying (and motivating) modern C++ alternatives. Together with the forthcoming Volume II: Design and Implementation and Volume III: Verification and Testing, Large-Scale C++ offers comprehensive guidance for all aspects of large-scale C++ software development. If you are an architect or project leader, this book will empower you to solve critically important problems right now ― and serve as your go-to reference for years to come.


Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.","['C++ Programming Language', 'Software Development', 'Computer Software']","Large-Scale C++: Process and Architecture, Volume 1 (Addison-Wesley Professional Computing Series)",https://www.amazon.com/dp/0201717069
['John Lakos'],,fd53e9048fd4a696203814a79f7b2f3cfc461691787a390b687f5fc97f9e2ff7,,,"March 14, 2021",amazon.com,"Designing scalable software in C++ requires more than just a sound understanding of logical design. Senior developers, architects, and project leaders need a grasp of high-level physical design concepts that even many software experts have never explored. In Large-Scale C++ Volume Process and Architecture, John Lakos takes a practitioner's view of modern large-scale software development, helping experienced professionals apply architectural-level physical design concepts in their everyday work. Lakos teaches critical concepts clearly and concisely, with new high-value examples. Up to date and modular, Large-Scale C++ Volume I is designed to help you solve problems right now, and serve as an appealing reference for years to come.",[],Large-Scale C++ Volume II: Design and Implementation (Addison-Wesley Professional Computing Series),https://www.amazon.com/dp/0134694694
['Martin Reddy'],,cc5068c8f13bacb65dd2f132a05a0e18785f9ede762fff06c20b4774d3a22249,,,"March 14, 2011",amazon.com,"API Design for C++ provides a comprehensive discussion of Application Programming Interface (API) development, from initial design through implementation, testing, documentation, release, versioning, maintenance, and deprecation. It is the only book that teaches the strategies of C++ API development, including interface design, versioning, scripting, and plug-in extensibility. Drawing from the author's experience on large scale, collaborative software projects, the text offers practical techniques of API design that produce robust code for the long term. It presents patterns and practices that provide real value to individual developers as well as organizations. API Design for C++ explores often overlooked issues, both technical and non-technical, contributing to successful design decisions that product high quality, robust, and long-lived APIs. It focuses on various API styles and patterns that will allow you to produce elegant and durable libraries. A discussion on testing strategies concentrates on automated API testing techniques rather than attempting to include end-user application testing techniques such as GUI testing, system testing, or manual testing. Each concept is illustrated with extensive C++ code examples, and fully functional examples and working source code for experimentation are available online. This book will be helpful to new programmers who understand the fundamentals of C++ and who want to advance their design skills, as well as to senior engineers and software architects seeking to gain new expertise to complement their existing talents. Three specific groups of readers are targeted: practicing software engineers and architects, technical managers, and students and educators.
- The only book that teaches the strategies of C++ API development, including design, versioning, documentation, testing, scripting, and extensibility
- Extensive code examples illustrate each concept, with fully functional examples and working source code for experimentation available online
- Covers various API styles and patterns with a focus on practical and efficient designs for large-scale long-term projects","['Computer Engineering', 'Object-Oriented Design', 'Software Development (Kindle Store)']",API Design for C++,https://www.amazon.com/dp/B004NNUZ6O/
['Ronald Mak'],,a5419c57b52d1a39b92a2cd67d75a9c8a198cf07fec2e28e14cfc776cd234b19,,,"June 18, 2024",amazon.com,"Learn the fundamentals of Object-Oriented design by investigating good—and bad—code!

Well-designed applications run more efficiently, have fewer bugs, and are easier to revise and maintain. Using an engaging “before-and-after” approach, Object-Oriented Software Design in C++ shows you exactly what bad software looks like and how to fix it with good design principles and patterns.

In Object-Oriented Software Design in C++, you’ll find:


Design-code-test iterations that improve code with each revision
Gathering requirements to make sure you’re developing the right application
Design principles like encapsulation and delegation that solve programming problems
Design patterns including Observer Design Pattern that fix architecture issues
Using recursion and multithreading to simplify common solutions

Object-Oriented Software Design in C++ is a vital guide to building the kind of high performance applications delivered by the pros—all using industry-proven design principles and patterns. You’ll learn how to gather and analyze requirements so you’re building exactly what your client is looking for, backtrack mistakes with iterative development, and build a toolbox of design patterns that troubleshoot common issues with application architecture. The book’s accessible examples are written in C++ 17, but its universal principles can be applied to any object-oriented language.

Purchase of the print book includes a free eBook in PDF and ePub formats from Manning Publications.

About the technology

Good design is the foundation of great software. Mastering the principles of object-oriented design is the surest way to create applications that run fast, have few bugs, and last well into the future. Written especially for new C++ programmers, this easy-to-read book gently mentors you in the art of designing great software.

About the book

Object-Oriented Software Design in C++ introduces object-oriented design principles, practices, and patterns in clear, jargon-free language. The instantly-familiar before-and-after examples highlight the benefits of good design. Each chapter is full of friendly conversations that anticipate your questions and help point out the subtleties you might overlook. Along the way, you’ll pick up tips about idiomatic C++ style that will set your code apart.

What's inside


Design-code-test iterations
Design principles for common programming problems
Architecture design patterns in plain English
Recursion and multithreading


About the reader

Examples are in C++ 17.

About the author

Ronald Mak is a former NASA senior scientist. Currently, he teaches computer science at San Jose State University.

The technical editor on this book was Juan Rufes.

Table of Contents

PART 1
1 The path to well-designed software
2 Iterate to achieve good design
PART 2
3 Get requirements to build the right application
4 Good class design to build the application right
PART 3
5 Hide class implementations
6 Don’t surprise your users
7 Design subclasses right
PART 4
8 The Template Method and Strategy Design Patterns
9 The Factory Method and Abstract Factory Design Patterns
10 The Adapter and Façade Design Patterns
11 The Iterator and Visitor Design Patterns
12 The Observer Design Pattern
13 The State Design Pattern
14 The Singleton, Composite, and Decorator Design Patterns
PART 5
15 Designing solutions with recursion and backtracking
16 Designing multithreaded programs","['C++ Programming Language', 'Object-Oriented Design', 'Software Development']",Object-Oriented Software Design in C++,https://www.amazon.com/dp/163343950X/
['Klaus Iglberger'],,ef835bcf7b230abf43415847dfbbb55d0f9c292c84dd50fbc55c1d6550a46bea,,,"October 25, 2022",amazon.com,"Good software design is essential for the success of your project, but designing software is hard to do. You need to have a deep understanding of the consequences of design decisions and a good overview of available design alternatives. With this book, experienced C++ developers will get a thorough, practical, and unparalleled overview of software design with this modern language.

C++ trainer and consultant Klaus Iglberger explains how you can manage dependencies and abstractions, improve changeability and extensibility of software entities, and apply and implement modern design patterns to help you take advantage of today's possibilities. Software design is the most essential aspect of a software project because it impacts the software's most important properties: maintainability, changeability, and extensibility.

Learn how to evaluate your code with respect to software design
Understand what software design is, including design goals such as changeability and extensibility
Explore the advantages and disadvantages of each design approach
Learn how design patterns help solve problems and express intent
Choose the right form of a design pattern to get the most out of its advantages","['C++ Programming Language', 'Object-Oriented Design', 'Software Development']",C++ Software Design: Design Principles and Patterns for High-Quality Software,https://www.amazon.com/dp/1098113160
['Lee Zhi Eng'],,c1f949f787901e99e2fc9c8713e7844cd5df1c0ac77934b868fe94e5f6727c72,,,"May 9, 2024",amazon.com,"Use Qt6 to design and build functional, appealing, and user-friendly graphical user interfaces (GUIs) for your applications.

Key Features
Learn to use Qt6 to design and customize the look and feel of your application
Improve the visual quality of an application by using graphics rendering and animation
Understand the balance of presentation and web content that will make an application appealing yet functional
Book Description

With the growing need to develop GUIs for multiple targets and multiple screens, improving the visual quality of your application becomes important so that it stands out from your competitors. With its cross-platform ability and the latest UI paradigms, Qt makes it possible to build intuitive, interactive, and user-friendly user interfaces for your applications.

Qt6 C++ GUI Programming Cookbook, Third Edition teaches you how to develop functional and appealing user interfaces using the latest version of QT6 and C++. This book will help you learn a variety of topics such as GUI customization and animation, graphics rendering, implementing Google Maps, and more. You will also be taken through advanced concepts like asynchronous programming, event handling using signals and slots, network programming, various aspects of optimizing your application.

By the end of the book, you will be confident to design and customize GUI applications that meet your clients' expectations and have an understanding of best practice solutions for common problems.

What you will learn
Animate GUI elements using Qt5's built-in animation system
Draw shapes and 2D images using Qt5's powerful rendering system
Implement an industry-standard OpenGL library in your project
Build a mobile app that supports touch events and exports it onto devices
Parse and extract data from an XML file and present it on your GUI
Interact with web content by calling JavaScript functions from C++
Access MySQL and SQLite databases to retrieve data and display it on your GUI
Who this book is for

This intermediate-level book is designed for those who want to develop software using Qt6. If you want to improve the visual quality and content presentation of your software application, this book is for you. Prior experience of C++ programming is required.

Table of Contents
Look-and-Feel Customization with Qt Designer
Event Handling - Signals and Slots
States and Animations with Qt and QML
QPainter and 2D Graphics
OpenGL Implementation
Transitioning from Qt5 to Qt6
Using Network and Managing Large Documents
Threading Basics - Asynchronous Programming
Building a Touch Screen Application with Qt6
JSON Parsing Made Easy
Conversion Library
Accessing Databases with SQL Driver and Qt
Develop Web Applications using Qt WebEngine
Performance Optimization","['Cross-platform Software Development', 'C++ Programming Language', 'Mobile App Development & Programming']","QT6 C++ GUI Programming Cookbook: Practical recipes for building cross-platform GUI applications, widgets, and animations with Qt6",https://www.amazon.com/dp/1805122630
['Mark Summerfield'],,95d8e7ed9f87f5d9fee5de180f4f53e0449d7a5da1c648ba9c060b2fa92b8826,,,,amazon.com,"Master Qts Most Powerful APIs, Patterns, and Development Practices

 

Qt has evolved into a remarkably powerful solution for cross-platform desktop, Web, and mobile development. However, even the most experienced Qt programmers only use a fraction of its capabilities. Moreover, practical information about Qts newest features has been scarceuntil now.

 

Advanced Qt Programming shows developers exactly how to take full advantage of Qt 4.5s and Qt 4.6s most valuable new APIs, application patterns, and development practices. Authored by Qt expert Mark Summerfield, this book concentrates on techniques that offer the most power and flexibility with the least added complexity.

 

Summerfield focuses especially on model/view and graphics/view programming, hybrid desktop/Web applications, threading, and applications incorporating media and rich text. Throughout, he presents realistic, downloadable code examples, all tested on Windows, Mac OS X, and Linux using Qt 4.6 (and most tested on Qt 4.5) and designed to anticipate future versions of Qt. The book

 

Walks through using Qt with WebKit to create innovative hybrid desktop/Internet applications
Shows how to use the Phonon framework to build powerful multimedia applications
Presents state-of-the-art techniques for using model/view table and tree models, QStandardItemModels, delegates, and views, and for creating custom table and tree models, delegates, and views
Explains how to write more effective threaded programs with the QtConcurrent module and with the QThread class
Includes detailed coverage of creating rich text editors and documents
Thoroughly covers graphics/view programming: architecture, windows, widgets, layouts, scenes, and more
Introduces Qt 4.6s powerful animation and state machine frameworks",[],Advanced Qt Programming: Creating Great Software With C++ and Qt 4,https://www.amazon.com/dp/0134670876
['Roger Deutsch'],,f203cfb3028098a54dbe100418f02556fe0673411129b63a8c37ba6df4858e0e,,,"December 1, 2017",amazon.com,"Part 1: The first book in the Program Win10 Series contains Chapters 1 - 8.All source code is available from GitHub at https://github.com/raddevus/Win10UWPI have written this book to lead readers into the story of creating apps for the Windows 10 Desktop.This book contains a complete flow so that you can pick it up, read through it and see all the screenshots that you will experience when you begin developing your own Windows 10 app. This book brings the reader into the story of developing Win10 apps and allows the reader to peek inside the head of a developer as he creates complete Win10 apps.How will this book work?Programming Windows 10 For Beginners (and Advanced devs)There are two ways you can learn to program computers: Read a long book that tells you all about the history of programming and lists all the things you can do.Start building projects. Begin at the beginning and go on from there. Programming Windows 10 (PW10) will use the second method to teach. This method makes learning faster and here's why. Read Entire Fish Encyclopedia The first method is similar to reading the entire Fish Encyclopedia so you can know how to catch a fish. Sure, there's a lot of information in the encyclopedia that may be helpful, but perhaps you first want to decide if you even like fishing. Start Fishing The second method gets you fishing so you can feel what it's like to collect bait, put the bait on a hook, cast your line, wait, not catch a fish, and finally (hopefully) catch a fish. There Are Things You Won't Know Using the second method, there are a lot of things that you won't know as you fish. But, those things only matter if you decide to continue fishing. So, as long as you feel comfortable not knowing some things at first, you will like the way this book teaches Windows programming. Try It, Learn It In this book we try it and then we learn it. We build it first and see it work and then we figure out how it works and why it behaves the way it does. Which Is More Memorable? The try it learn it method is more fun and ends up being more memorable too. Which do you think you would remember more? Reading the Encyclopedia of Fish Going on a fishing trip. Right. Going on the fishing trip is a whole lot more fun, a better way to learn and more memorable.What Is the Focus of Programming Windows 10?My focus here is on creating UWAs (Universal Windows Apps) with a focus on creating apps for the Windows 10 desktop. Yes, the dream is to develop an app and deploy it to any type of device (PC, laptop, pad (Surface), phone or whatever). However, the focus here in this book is creating desktop apps that will keep those other platforms in mind but not focus directly on them.","['Windows 10 Guides', 'Microsoft C & C++ Windows Programming', 'Mobile App Development & Programming']",Programming Windows 10 Via UWP: Learn To Program Universal Windows Apps For the Desktop (Program Win10),https://www.amazon.com/dp/1973438771
"['David LeBlanc', 'Michael Howard']",,a6c1be4f15c2d0b949647c16a0ad41baab1f45302e819921942bb292c8d283df,,,"December 4, 2002",amazon.com,"Keep black-hat hackers at bay with the tips and techniques in this entertaining, eye-opening book! Developers will learn how to padlock their applications throughout the entire development process—from designing secure applications to writing robust code that can withstand repeated attacks to testing applications for security flaws. Easily digested chapters reveal proven principles, strategies, and coding techniques. The authors—two battle-scarred veterans who have solved some of the industry’s toughest security problems—provide sample code in several languages. This edition includes updated information about threat modeling, designing a security process, international issues, file-system issues, adding privacy to applications, and performing security code reviews. It also includes enhanced coverage of buffer overruns, Microsoft .NET security, and Microsoft ActiveX development, plus practical checklists for developers, testers, and program managers.","['Software Development (Kindle Store)', 'Security & Encryption', 'Microsoft Programming']",Writing Secure Code (Developer Best Practices),https://www.amazon.com/dp/B00JDMP718
"['John Lakos', 'Vittorio Romeo', 'Rostislav Khlebnikov']",,404ede4a30fe2b617400e937cbcb9acfbae7e43d6312a6ee0c08c882f8c97ed7,,,"December 23, 2021",amazon.com,"Maximize Reward and Minimize Risk with Modern C++

Embracing Modern C++ Safely shows you how to make effective use of the new and enhanced language features of modern C++ without falling victim to their potential pitfalls.

Based on their years of experience with large, mission-critical projects, four leading C++ authorities divide C++11/14 language features into three categories: Safe, Conditionally Safe, and Unsafe. Safe features offer compelling value, are easy to use productively, and are relatively difficult to misuse. Conditionally safe features offer significant value but come with risks that require significant expertise and familiarity before use. Unsafe features have an especially poor risk/reward ratio, are easy to misuse, and are beneficial in only the most specialized circumstances.

This book distills the C++ community's years of experience applying C++11 and C++14 features and will help you make effective and safe design decisions that reflect real-world, economic engineering tradeoffs in large-scale, diverse software development environments. The authors use examples derived from real code bases to illustrate every finding objectively and to illuminate key issues. Each feature identifies the sound use cases, hidden pitfalls, and shortcomings of that language feature. After reading this book, you will

Understand what each C++11/14 feature does and where it works best
Recognize how to work around show-stopping pitfalls and annoying corner cases
Know which features demand additional training, experience, and peer review
Gain insights for preparing coding standards and style guides that suit your organization's needs
Be equipped to introduce modern C++ incrementally and judiciously into established code bases

Seasoned C++ developers, team leads, and technical managers who want to improve productivity, code quality, and maintainability will find the insights in this modular, meticulously organized reference indispensable.

Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.","['C++ Programming Language', 'Computer Programming Languages']",Embracing Modern C++ Safely,https://www.amazon.com/dp/0137380356
['Robert C. Seacord'],,f350a4831486f307c839a938a1fb0de265f506170056edcbf361c3ba5979814a,,,"March 23, 2013",amazon.com,"Learn the Root Causes of Software Vulnerabilities and How to Avoid Them

 

Commonly exploited software vulnerabilities are usually caused by avoidable software defects. Having analyzed tens of thousands of vulnerability reports since 1988, CERT has determined that a relatively small number of root causes account for most of the vulnerabilities.

 

Secure Coding in C and C++, Second Edition, identifies and explains these root causes and shows the steps that can be taken to prevent exploitation. Moreover, this book encourages programmers to adopt security best practices and to develop a security mindset that can help protect software from tomorrow’s attacks, not just today’s. Drawing on the CERT’s reports and conclusions, Robert C. Seacord systematically identifies the program errors most likely to lead to security breaches, shows how they can be exploited, reviews the potential consequences, and presents secure alternatives.

 

Coverage includes technical detail on how to

Improve the overall security of any C or C++ application
Thwart buffer overflows, stack-smashing, and return-oriented programming attacks that exploit insecure string manipulation logic
Avoid vulnerabilities and security flaws resulting from the incorrect use of dynamic memory management functions
Eliminate integer-related problems resulting from signed integer overflows, unsigned integer wrapping, and truncation errors
Perform secure I/O, avoiding file system vulnerabilities
Correctly use formatted output functions without introducing format-string vulnerabilities
Avoid race conditions and other exploitable vulnerabilities while developing concurrent code

 

The second edition features

Updates for C11 and C++11
Significant revisions to chapters on strings, dynamic memory management, and integer security
A new chapter on concurrency
Access to the online secure coding course offered through Carnegie Mellon’s Open Learning Initiative (OLI)

 

Secure Coding in C and C++, Second Edition, presents hundreds of examples of secure code, insecure code, and exploits, implemented for Windows and Linux. If you’re responsible for creating secure C or C++ software–or for keeping it safe–no other book offers you this much detailed, expert assistance.","['C Programming', 'C++ Programming', 'C Programming Language']",Secure Coding in C and C++ (SEI Series in Software Engineering),https://www.amazon.com/dp/B00C0OBZI0
"['Jeffrey M. Richter', 'Christophe Nasarre', 'Mark Russinovich']",,a98b9a00d67593867ef95473a09c22cde26987300a786e86eb33cabe8c8f66a2,,,"November 28, 2007",amazon.com,"Master the intricacies of application development with unmanaged C++ code - with advice straight from the experts. Jeffrey Richter's book is now fully revised for Windows XP, Windows Vista, and Windows Server 2008. You get in-depth, comprehensive guidance, advanced techniques, and extensive code samples to help you program Windows-based applications.
You'll discover how to: architect and implement your applications for both 32-bit and 64-bit Windows; create and manipulate processes and jobs; schedule, manage, synchronize, and destroy threads; perform asynchronous and synchronous device I/O operations with the I/O completion port; allocate memory using various techniques including virtual memory, memory-mapped files, and heaps; manipulate the default committed physical storage of thread stacks; build DLLs for delay-loading, API hooking, and process injection; and use structured exception handling, Windows Error Recovery, and Application Restart.","['C Programming Language', 'C++ Programming Language', 'Object-Oriented Design']",Windows via C/C++,https://www.amazon.com/dp/0735624240
"['Pavel Yosifovich', 'Jeffrey Richter']",,ccce8ec921e58dc82905802f62c2b6df5d5083e4042143e2da263d2ca3a273ef,,,"December 9, 2019",amazon.com,"This is an advanced guide to modern Windows system programming with C and C++ for experienced developers. Thoroughly updated for Windows 10, 8.x, and 7, it offers expert guidance for leveraging Windows foundations to build robust, highly-secure programs. Leading Windows developers Pavel Yosifovich (co-author, Windows Internals, 7th Edition) and Microsoft Partner Architect Jeffrey Richter (author, Windows Runtime via C#) drill down to offer in-depth tutorials and explanations of how Windows works and how to make the most of its capabilities using the Windows APIs. Packed with modern code examples, it covers Windows system architecture, compilation, error handling, processes, advanced threads and synchronization, jobs, sophisticated memory management techniques, device I/O, security, Windows programming patterns, services, the Registry, security, and much more.",[],Windows Via C/C++,https://www.amazon.com/dp/0135953391
['Pavel Yosifovich'],,7c9bfd6b1d3df76fa122a5a056df4a9922e1df3001a30cc01234c586bc2bb7d7,,,"April 11, 2020",amazon.com,"Delve into programming the Windows operating system through the Windows API in with C++. Use the power of the Windows API to working with processes, threads, jobs, memory, I/O and more. The book covers current Windows 10 versions, allowing you to get the most of what Windows has to offer to developers in terms of productivity, performance and scalability.","['Windows 10 Guides', 'Microsoft C & C++ Windows Programming', 'Schools & Teaching']","Windows 10 System Programming, Part 1",https://www.amazon.com/dp/B086Y6M7LH
['Charles Petzold'],,b5c11a8f24c622e8e22523d1cbaf15d342080517696daf87ff6c66e1b6327e3b,,,"January 15, 2013",amazon.com,"Reimagined for full-screen and touch-optimized apps, Windows 8 provides a platform for reaching new users in new ways. In response, programming legend Charles Petzold is rewriting his classic Programming Windows—one of the most popular programming books of all time—to show developers how to use existing skills and tools to build Windows 8 apps.

Programming Windows, Sixth Edition focuses on creating Windows 8 apps accessing the Windows Runtime with XAML and C#. The book also provides C++ code samples. The Sixth Edition is organized in two parts:



Part I, “Elementals,” begins with the interrelationship between code and XAML, basic event handling, dynamic layout, controls, templates, asynchronous processing, the application bar, control customization, and collections. You should emerge from Part I ready to create sophisticated page-oriented collection-based user interfaces using the powerful ListView and GridView controls.

Part II, “Specialties,” explores topics you might not need for every program but are essential to a well-rounded education in Windows 8. These include multitouch, bitmap graphics, interfacing with share and search facilities, printing, working with the sensors (GPS and orientation), text, obtaining input from the stylus (including handwriting recognition), accessing web services, calling Win32 and DirectX functions, and bringing your application to the Windows 8 app store.","['C# Programming (Kindle Store)', 'Microsoft Programming (Kindle Store)', 'C# Programming']",Programming Windows (Developer Reference),https://www.amazon.com/dp/B00JDMPJ8E
['Johnson M. Hart'],,6cd9b7f220be8a98604546305c8069c7a5bfb8b58d96e3bfd24add7bad5a245d,,,"January 1, 2010",amazon.com,"“If you’re writing a native Win32 program or just want to know what the OS is really doing underneath, you need John’s book. He covers the stuff that real systems programmers absolutely must know. Recommended.”

–Chris Sells, Microsoft Corporation

“This fourth edition does a great job of incorporating new features in the Vista, Windows 2008, and Windows 7 API, but also stays true to teaching the foundational elements of building applications that target the Windows OS.”

–Jason Beres, Product Management, Infragistics

The Definitive Guide to Windows API Programming, Fully Updated for Windows 7, Windows Server 2008, and Windows Vista

Windows System Programming, Fourth Edition, now contains extensive new coverage of 64-bit programming, parallelism, multicore systems, and many other crucial topics. Johnson Hart’s robust code examples have been updated and streamlined throughout. They have been debugged and tested in both 32-bit and 64-bit versions, on single and multiprocessor systems, and under Windows 7, Vista, Server 2008, and Windows XP. To clarify program operation, sample programs are now illustrated with dozens of screenshots.

Hart systematically covers Windows externals at the API level, presenting practical coverage of all the services Windows programmers need, and emphasizing how Windows functions actually behave and interact in real-world applications. Hart begins with features used in single-process applications and gradually progresses to more sophisticated functions and multithreaded environments. Topics covered include file systems, memory management, exceptions, processes, threads, synchronization, interprocess communication, Windows services, and security.

New coverage in this edition includes

Leveraging parallelism and maximizing performance in multicore systems
Promoting source code portability and application interoperability across Windows, Linux, and UNIX
Using 64-bit address spaces and ensuring 64-bit/32-bit portability
Improving performance and scalability using threads, thread pools, and completion ports
Techniques to improve program reliability and performance in all systems
Windows performance-enhancing API features available starting with Windows Vista, such as slim reader/writer locks and condition variables

A companion Web site, jmhartsoftware.com, contains all sample code, Visual Studio projects, additional examples, errata, reader comments, and Windows commentary and discussion.","['Microsoft C & C++ Windows Programming', 'Computer Operating Systems', 'Microsoft OS Guides']",Windows System Programming (Addison-Wesley Microsoft Technology Series),https://www.amazon.com/dp/0321657748
['Keith Brown'],,09cb2952d0a8088db920034797624611f95382bb5fb6ae6db7ea17611d8c1c16,,,"July 5, 2000",amazon.com,"A guide to computer security for software developers demonstrates techniques for writing secure applications, covering cryptography, authentication, access control, and credentials.","['Windows Server Guides', 'CompTIA Certification Guides', 'Computer Operating Systems']",Programming Windows Security: The Developers Guide (DevelopMentor),https://www.amazon.com/dp/0201604426
['Robert Dunne'],,0540a81597a8f4048a38eb63b72b0dab1f5a5aaa4e70014b5107d89b9d49d34c,,,"July 31, 2018",amazon.com,"Windows® 64-bit Assembly Language Programming Quick Start is a complete tutorial using the free Community Edition of Microsoft® Visual Studio 17 to introduce the novice to the Intel® X86-64 architecture and the Windows X64 Calling Convention.






With Microsoft® Visual Studio 17, assembly language programs can be built using either its Integrated Development Environment (IDE) or using its ML64 assembler directly in a traditional command line approach. Both techniques are presented in this book, and each has its own merits for gaining a deeper understanding of computer software and hardware. The assistance provided by Visual Studio’s interactive debugger is immense not only for developing real programs but also learning how the CPU instructions work.


Programmers learn by example and develop their skills by examining and modifying working programs. Every sample program is complete, but leaves room for enhancements and experimentation encouraged by the questions at the end of each chapter. All are available for download through GitHub.


The sample programs, ranging from five to over one hundred lines of code, are extensively documented in both flowcharts and comments. Over seventy illustrations are included to explain programming techniques as well as X86, SSE, and AVX instructions. CPU instructions are introduced as needed to achieve programming goals as the projects in each chapter progress to the next.



This is not a book that has been modified or migrates from a 32-bit or 16-bit perspective, but starts right in with 64-bit programming and only refers to past approaches when necessary to explain seemingly unnatural conventions and names.


Topics like binary and hexadecimal are introduced through programming examples as well as appearing in appendices.


The examples in this book have been “classroom tested” with students having very little, if any, previous programming experience. The information is complete, allowing it to be used as an independent study.




Learning computer hardware and software architectures through hands-on assembly language programming experience helps develop well-rounded programmers and computer engineers.","['Assembly Language Programming', 'PC Hardware', 'Computer Hardware']","Windows 64-bit Assembly Language Programming Quick Start: Intel X86-64, SSE, AVX",https://www.amazon.com/dp/B07G2WJFZK
['Tarik Soulami'],,2786694f8530e7bb50cb05148534e2d195d4521615673d548dd28184ca4f5275,,,"May 15, 2012",amazon.com,"Use Windows debuggers throughout the development cycle―and build better software

Rethink your use of Windows debugging and tracing tools―and learn how to make them a key part of test-driven software development. Led by a member of the Windows Fundamentals Team at Microsoft, you’ll apply expert debugging and tracing techniques―and sharpen your C++ and C# code analysis skills―through practical examples and common scenarios. Learn why experienced developers use debuggers in every step of the development process, and not just when bugs appear.

Discover how to:

Go behind the scenes to examine how powerful Windows debuggers work
Catch bugs early in the development cycle with static and runtime analysis tools
Gain practical strategies to tackle the most common code defects
Apply expert tricks to handle user-mode and kernel-mode debugging tasks
Implement postmortem techniques such as JIT and dump debugging
Debug the concurrency and security aspects of your software
Use debuggers to analyze interactions between your code and the operating system
Analyze software behavior with Xperf and the Event Tracing for Windows (ETW) framework","['Computer Programming Debugging', 'Visual Basic Programming', 'Software Development']",Inside Windows Debugging (Developer Reference),https://www.amazon.com/dp/0735662789
"['Jeffrey Richter', 'Jason Clark']",,47c8ff90fdf4e610d40143320148e6f3c2164d295efd656effb29eeccd2513e2,,,"April 22, 2000",amazon.com,"Enterprise developers take an in-depth tour of Windows 2000 services -- the powerful features and subsystems designed specifically to handle mission-critical data processing needs -- and get expert guidance for building applications that exploit their capabilities. Covering the Service Control Manager, Registry, performance monitoring, event logging, security, asynchronous I/O, and other key topics -- and featuring a CD-ROM packed with next-generation 64-bit code examples -- this book provides timely and substantive instruction for creating a powerful new class of enterprise solutions.","['Computer Operating Systems', 'Microsoft OS Guides', 'Software Design & Engineering']",Programming Server-Side Applications for Microsoft Windows 2000 (Dv-Mps Programming),https://www.amazon.com/dp/0735607532
"['Pavel Yosifovich', 'Mark E. Russinovich', 'David A. Solomon', 'Alex Ionescu']",,64d51c39529e9258ef8fcd24d9bd6e42d4c92f4687e3ae22d81ae2706def1d4b,,,"May 5, 2017",amazon.com,"Delve inside Windows architecture and internals - and see how core components work behind the scenes. This classic guide has been fully updated for Windows 10 and Windows Server 2016, and now presents its coverage in two parts.","['Windows Server Guides', 'Windows Administration', 'Microsoft C & C++ Windows Programming']","Windows Internals: System architecture, processes, threads, memory management, and more, Part 1 (Developer Reference)",https://www.amazon.com/dp/0735684189
"['Andrea Allievi', 'Mark Russinovich', 'Alex Ionescu']",,4e635a0a7e9f945b5be8dc7a8d5b7d1179506b85c5b59c2b921e78d880d5f4d8,,,"October 1, 2021",amazon.com,"The definitive guide to modern Windows internals: new coverage of virtualization, file systems, boot, security, and more.

For advanced computing professionals, this is the definitive up-to-date guide to how Windows core components behave “under the hood.” Using it, experienced developers can build more powerful and scalable software, administrators can debug complex system and performance problems, and security researchers can harden their systems. This Seventh Edition is fully updated through the May 2021 (21H1/2104) updates to Windows 10 and Windows Server (2022, 2019, and 2016). It adds extensive content on Hyper-V, plus fully rewritten chapters on the boot process, new storage technologies, and Windows system and management mechanisms. As always, it delivers unparalleled insight based on insider access to Microsoft source code, with hands-on experiments using the latest debugging tools to show you Windows’ internal behaviors firsthand. With Windows 11 introducing new user interface design elements that build upon the same core technologies as Windows 10, readers will be well-prepared for this new chapter of computing.

Leading Windows insiders help you:

• Discover system mechanisms for serving device drivers and applications, including ALPC, Object Manager, synchronization, WNF, WoW64, and the processor execution model

• Explore underlying hardware architecture, including trap processing, segmentation, and side channel vulnerabilities

• Understand Windows virtualization, and how virtualization-based security (VBS) protects against OS vulnerabilities

• Delve into key management and configuration mechanisms, including the Registry, Windows services, WMI, and Task Scheduling

• Explore diagnostic services such as Event Tracing for Windows (ETW) and DTrace

• Learn how the cache manager and file system drivers interact to provide reliable support for files, directories, and disks, including on Persistent Memory (NVDIMM) DAX devices.

• Understand NTFS, ReFS, and other Windows file systems

• Review Windows startup/shutdown operations, and OS components involved in boot flow

• Analyze UEFI-based Secure Boot, Measured Boot, and Secure Launch

About This Book

• For experienced programmers, architects, software quality and performance specialists, administrators, security practitioners, and support professionals

• Assumes you are a Windows power user","['Windows 10 Guides', 'Software Design & Engineering', 'Software Development']","Windows Internals, Part 2 (Developer Reference)",https://www.amazon.com/dp/0135462401
['Pavel Yosifovich'],,1d0d504b088a227420a75115ba41248e306197bb4f86ff5bfefd429a4e17a5ee,,,"February 21, 2021",amazon.com,"There is nothing like the power of the kernel in Windows - but how do you write kernel drivers to take advantage of that power? This book will show you how.The book describes software kernel drivers programming for Windows. These drivers don't deal with hardware, but rather with the system itself: processes, threads, modules, registry and more. Kernel code can be used for monitoring important events, preventing some from occurring if needed. Various filters can be written that can intercept calls that a driver may be interested in.","['Computer Hardware Design & Architecture', 'Microsoft C & C++ Windows Programming']",Windows Kernel Programming,https://www.amazon.com/dp/B08WZHBQYC
['Jack-Benny Persson'],,f157ffed1de476e456c37f0c50353ebd15860b5edc938947999427ca86d45a1e,,,"May 7, 2021",amazon.com,"Find solutions to all your problems related to Linux system programming using practical recipes for developing your own system programs




Key Features:

Develop a deeper understanding of how Linux system programming works
Gain hands-on experience of working with different Linux projects with the help of practical examples
Learn how to develop your own programs for Linux




Book Description:

Linux is the world's most popular open source operating system (OS). Linux System Programming Techniques will enable you to extend the Linux OS with your own system programs and communicate with other programs on the system.




The book begins by exploring the Linux filesystem, its basic commands, built-in manual pages, the GNU compiler collection (GCC), and Linux system calls. You'll then discover how to handle errors in your programs and will learn to catch errors and print relevant information about them. The book takes you through multiple recipes on how to read and write files on the system, using both streams and file descriptors. As you advance, you'll delve into forking, creating zombie processes, and daemons, along with recipes on how to handle daemons using systemd. After this, you'll find out how to create shared libraries and start exploring different types of interprocess communication (IPC). In the later chapters, recipes on how to write programs using POSIX threads and how to debug your programs using the GNU debugger (GDB) and Valgrind will also be covered.




By the end of this Linux book, you will be able to develop your own system programs for Linux, including daemons, tools, clients, and filters.




What You Will Learn:

Discover how to write programs for the Linux system using a wide variety of system calls
Delve into the working of POSIX functions
Understand and use key concepts such as signals, pipes, IPC, and process management
Find out how to integrate programs with a Linux system
Explore advanced topics such as filesystem operations, creating shared libraries, and debugging your programs
Gain an overall understanding of how to debug your programs using Valgrind




Who this book is for:

This book is for anyone who wants to develop system programs for Linux and gain a deeper understanding of the Linux system. The book is beneficial for anyone who is facing issues related to a particular part of Linux system programming and is looking for specific recipes or solutions.","['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']",Linux System Programming Techniques: Become a proficient Linux system programmer using expert recipes and techniques,https://www.amazon.com/dp/1789951283
['Michael Kerrisk'],,f26517329b66feccd3653c1f0225cc52b20ccbd3806595346946af61774401e4,,,"October 28, 2010",amazon.com,"The Linux Programming Interface (TLPI) is the definitive guide to the Linux and UNIX programming interface—the interface employed by nearly every application that runs on a Linux or UNIX system.

In this authoritative work, Linux programming expert Michael Kerrisk provides detailed descriptions of the system calls and library functions that you need in order to master the craft of system programming, and accompanies his explanations with clear, complete example programs.

You'll find descriptions of over 500 system calls and library functions, and more than 200 example programs, 88 tables, and 115 diagrams. You'll learn how to:
–Read and write files efficiently
–Use signals, clocks, and timers
–Create processes and execute programs
–Write secure programs
–Write multithreaded programs using POSIX threads
–Build and use shared libraries
–Perform interprocess communication using pipes, message queues, shared memory, and semaphores
–Write network applications with the sockets API

While The Linux Programming Interface covers a wealth of Linux-specific features, including epoll, inotify, and the /proc file system, its emphasis on UNIX standards (POSIX.1-2001/SUSv3 and POSIX.1-2008/SUSv4) makes it equally valuable to programmers working on other UNIX platforms.

The Linux Programming Interface is the most comprehensive single-volume work on the Linux and UNIX programming interface, and a book that's destined to become a new classic.","['Unix Programming', 'Linux Programming', 'Linux Networking & System Administration']",The Linux Programming Interface: A Linux and UNIX System Programming Handbook,https://www.amazon.com/dp/1593272200
"['W. Stevens', 'Stephen Rago']",,f35ea7ce2ee7c998c6eb75ffc7e0b2feb36fc00724908cd5bf255517474aefca,,,"May 14, 2013",amazon.com,"Practical, in-depth knowledge of the system programming interfaces that drive the UNIX and Linux kernels

Building on W. Rich Stevens’ pioneering work, this third edition of the classic was updated by Steve Rago, a colleague of Stevens, to reflect technical advances and best practices aligning with Version 4 of the Single UNIX Specification.

This edition covers more than seventy interfaces including:

POSIX asynchronous I/O
Spin locks
Barriers
POSIX semaphores

Steve carefully retains the spirit and approach that have made this book so valuable, starting with files, directories, and processes, carefully laying the groundwork for more advanced techniques, such as signal handling and terminal I/O. And he thoroughly covers threads and multithreaded programming, and socket-based IPC.

Filled with examples, case-studies, and access to thousands of lines of downloadable code, Advanced Programming in the UNIX® Environment has helped generations of programmers write code with exceptional power, performance, and reliability.","['Unix Programming', 'Unix Operating System', 'Computer Operating Systems']","Advanced Programming in the UNIX Environment, 3rd Edition",https://www.amazon.com/dp/0321637739
"['Neil Matthew', 'Richard Stones']",,a03bdbaf24f7aedb15f39500643137843df522c4f8de410707290846dd2d8dc1,,,"November 5, 2007",amazon.com,"Beginning Linux Programming, Fourth Edition continues its unique approach to teaching UNIX programming in a simple and structured way on the Linux platform. Through the use of detailed and realistic examples, students learn by doing, and are able to move from being a Linux beginner to creating custom applications in Linux. The book introduces fundamental concepts beginning with the basics of writing Unix programs in C, and including material on basic system calls, file I/O, interprocess communication (for getting programs to work together), and shell programming. Parallel to this, the book introduces the toolkits and libraries for working with user interfaces, from simpler terminal mode applications to X and GTK+ for graphical user interfaces. Advanced topics are covered in detail such as processes, pipes, semaphores, socket programming, using MySQL, writing applications for the GNOME or the KDE desktop, writing device drivers, POSIX Threads, and kernel programming for the latest Linux Kernel.","['Linux Programming', 'Computer Operating Systems', 'Introductory & Beginning Programming']",Beginning Linux Programming,https://www.amazon.com/dp/0470147628
['Robert Love'],,a329493b5714b7fc647a728610540e65ec1490d119531c44ac2146fa188df36d,,,"July 2, 2013",amazon.com,"Write software that draws directly on services offered by the Linux kernel and core system libraries. With this comprehensive book, Linux kernel contributor Robert Love provides you with a tutorial on Linux system programming, a reference manual on Linux system calls, and an insider’s guide to writing smarter, faster code.

Love clearly distinguishes between POSIX standard functions and special services offered only by Linux. With a new chapter on multithreading, this updated and expanded edition provides an in-depth look at Linux from both a theoretical and applied perspective over a wide range of programming topics, including:

A Linux kernel, C library, and C compiler overview
Basic I/O operations, such as reading from and writing to files
Advanced I/O interfaces, memory mappings, and optimization techniques
The family of system calls for basic process management
Advanced process management, including real-time processes
Thread concepts, multithreaded programming, and Pthreads
File and directory management
Interfaces for allocating memory and optimizing memory access
Basic and advanced signal interfaces, and their role on the system
Clock management, including POSIX clocks and high-resolution timers","['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']",Linux System Programming: Talking Directly to the Kernel and C Library,https://www.amazon.com/dp/1449339530
['Eric Raymond'],,ae19f2e0af3100141876ae0d76e7c03bfae4866117b4e827049d823d61f7e7ea,,,"September 23, 2003",amazon.com,"The Art of UNIX Programming poses the belief that understanding the unwritten UNIX engineering tradition and mastering its design patterns will help programmers of all stripes to become better programmers. This book attempts to capture the engineering wisdom and design philosophy of the UNIX, Linux, and Open Source software development community as it has evolved over the past three decades, and as it is applied today by the most experienced programmers. Eric Raymond offers the next generation of ""hackers"" the unique opportunity to learn the connection between UNIX philosophy and practice through careful case studies of the very best UNIX/Linux programs.","['Unix Programming', 'Computer Systems Analysis & Design', 'Computer Software']",The Art of UNIX Programming (The Addison-Wesley Professional Computng Series),https://www.amazon.com/dp/0131429019
['Dr. Rian Quinn'],,f1c8f047b0a51c55fd263c240e40a3c1abfcbb906c2ecbf6c0e8acf87349cd33,,,"December 26, 2018",amazon.com,"A hands-on guide to making system programming with C++ easy

Key Features
Write system-level code leveraging C++17
Learn the internals of the Linux Application Binary Interface (ABI) and apply it to system programming
Explore C++ concurrency to take advantage of server-level constructs
Book Description

C++ is a general-purpose programming language with a bias toward system programming as it provides ready access to hardware-level resources, efficient compilation, and a versatile approach to higher-level abstractions.

This book will help you understand the benefits of system programming with C++17. You will gain a firm understanding of various C, C++, and POSIX standards, as well as their respective system types for both C++ and POSIX. After a brief refresher on C++, Resource Acquisition Is Initialization (RAII), and the new C++ Guideline Support Library (GSL), you will learn to program Linux and Unix systems along with process management. As you progress through the chapters, you will become acquainted with C++'s support for IO. You will then study various memory management methods, including a chapter on allocators and how they benefit system programming. You will also explore how to program file input and output and learn about POSIX sockets. This book will help you get to grips with safely setting up a UDP and TCP server/client.

Finally, you will be guided through Unix time interfaces, multithreading, and error handling with C++ exceptions. By the end of this book, you will be comfortable with using C++ to program high-quality systems.

What you will learn
Understand the benefits of using C++ for system programming
Program Linux/Unix systems using C++
Discover the advantages of Resource Acquisition Is Initialization (RAII)
Program both console and file input and output
Uncover the POSIX socket APIs and understand how to program them
Explore advanced system programming topics, such as C++ allocators
Use POSIX and C++ threads to program concurrent systems
Grasp how C++ can be used to create performant system applications
Who this book is for

If you are a fresh developer with intermediate knowledge of C++ but little or no knowledge of Unix and Linux system programming, this book will help you learn system programming with C++ in a practical way.

Table of Contents
Getting Started with System Programming
Learning the C, C++17 and POSIX Standards
System Types for C++ and POSIX
C++, RAII and the GSL Refresher
Programming Linux / Unix System
Learning to Program Console Input / Output
A Comprehensive Look at Memory Management
Learning to Program File Input / Output
A Hands-On Approach to Allocators
Programming POSIX Sockets using C++
Time Interfaces in Unix
Learn to Program POSIX and C++ Threads
Error Handling with Exceptions","['C++ Programming', 'Computer Systems Analysis & Design (Kindle Store)', 'Linux']",Hands-On System Programming with C++: Build performant and concurrent Unix and Linux systems with C++17,https://www.amazon.com/dp/B07GVNFTWD
['Kaiwan N Billimoria'],,1bb1cbcba6dd8e05a3fbda235bea3e706d02e9795e9a8cfc2c57e229f21cc994,,,"October 31, 2018",amazon.com,"Get up and running with system programming concepts in Linux

Key Features
Acquire insight on Linux system architecture and its programming interfaces
Get to grips with core concepts such as process management, signalling and pthreads
Packed with industry best practices and dozens of code examples
Book Description

The Linux OS and its embedded and server applications are critical components of today's software infrastructure in a decentralized, networked universe. The industry's demand for proficient Linux developers is only rising with time. Hands-On System Programming with Linux gives you a solid theoretical base and practical industry-relevant descriptions, and covers the Linux system programming domain. It delves into the art and science of Linux application programming- system architecture, process memory and management, signaling, timers, pthreads, and file IO.

This book goes beyond the use API X to do Y approach; it explains the concepts and theories required to understand programming interfaces and design decisions, the tradeoffs made by experienced developers when using them, and the rationale behind them. Troubleshooting tips and techniques are included in the concluding chapter.

By the end of this book, you will have gained essential conceptual design knowledge and hands-on experience working with Linux system programming interfaces.

What you will learn
Explore the theoretical underpinnings of Linux system architecture
Understand why modern OSes use virtual memory and dynamic memory APIs
Get to grips with dynamic memory issues and effectively debug them
Learn key concepts and powerful system APIs related to process management
Effectively perform file IO and use signaling and timers
Deeply understand multithreading concepts, pthreads APIs, synchronization and scheduling
Who this book is for

Hands-On System Programming with Linux is for Linux system engineers, programmers, or anyone who wants to go beyond using an API set to understanding the theoretical underpinnings and concepts behind powerful Linux system programming APIs. To get the most out of this book, you should be familiar with Linux at the user-level logging in, using shell via the command line interface, the ability to use tools such as find, grep, and sort. Working knowledge of the C programming language is required. No prior experience with Linux systems programming is assumed.

Table of Contents
Linux System Architecture
Virtual Memory
Resource Limits
Dynamic Memory Allocation
Linux Memory Issues
Debugging Tools for Common Memory Issues
Process Credentials
Process Execution
Process Capabilities
Process Creation
Signalling - Part 1
Signalling - Part 2
Timers
Multithreading with Pthreads Part 1-Essentials
Multithreading with Pthreads Part II - Synchronization
Multithreading with Pthreads Part III
CPU Scheduling on Linux
Advanced File I/O
Troubleshooting and Best Practices
File IO Essentials
Daemon Processes","['Linux Programming', 'C Programming Language', 'Computer Programming Languages']","Hands-On System Programming with Linux: Explore Linux system programming interfaces, theory, and practice",https://www.amazon.com/dp/1788998472
['Robert Love'],,d3fdd37c577b2a11f715e098b6b2f65fb714083f7af7b6334e460df95b85a2b0,,,"June 22, 2010",amazon.com,"Linux Kernel Development details the design and implementation of the Linux kernel, presenting the content in a manner that is beneficial to those writing and developing kernel code, as well as to programmers seeking to better understand the operating system and become more efficient and productive in their coding.

The book details the major subsystems and features of the Linux kernel, including its design, implementation, and interfaces. It covers the Linux kernel with both a practical and theoretical eye, which should appeal to readers with a variety of interests and needs.

The author, a core kernel developer, shares valuable knowledge and experience on the 2.6 Linux kernel. Specific topics covered include process management, scheduling, time management and timers, the system call interface, memory addressing, memory management, the page cache, the VFS, kernel synchronization, portability concerns, and debugging techniques. This book covers the most interesting features of the Linux 2.6 kernel, including the CFS scheduler, preemptive kernel, block I/O layer, and I/O schedulers.

The third edition of Linux Kernel Development includes new and updated material throughout the book:

An all-new chapter on kernel data structures
Details on interrupt handlers and bottom halves
Extended coverage of virtual memory and memory allocation
Tips on debugging the Linux kernel
In-depth coverage of kernel synchronization and locking
Useful insight into submitting kernel patches and working with the Linux kernel community","['Linux Kernel & Peripherals', 'Linux Programming', 'Software Development']",Linux Kernel Development,https://www.amazon.com/dp/0672329468
['Rami Rosen'],,26eb537a45558a2b12d5af70dfeee13beb6208c4effe6430cf5a6ee4cdaf3dca,,,"December 24, 2013",amazon.com,"Linux Kernel Networking takes you on a guided in-depth tour of the current Linux networking implementation and the theory behind it. Linux kernel networking is a complex topic, so the book won't burden you with topics not directly related to networking. This book will also not overload you with cumbersome line-by-line code walkthroughs not directly related to what you're searching for; you'll find just what you need, with in-depth explanations in each chapter and a quick reference at the end of each chapter.

Linux Kernel Networking is the only up-to-date reference guide to understanding how networking is implemented, and it will be indispensable in years to come since so many devices now use Linux or operating systems based on Linux, like Android, and since Linux is so prevalent in the data center arena, including Linux-based virtualization technologies like Xen and KVM.","['Linux Programming', 'Linux Networking & System Administration', 'Software Development']",Linux Kernel Networking: Implementation and Theory (Expert's Voice in Open Source),https://www.amazon.com/dp/143026196X
['Kaiwan N. Billimoria'],,08b235c17df65641cf96149c17615b763faa0aab9b91c42e82649cf33bd91c08,,,"February 29, 2024",amazon.com,"Gain a solid practical understanding and sufficient theoretical insight into Linux kernel internals while learning to write high-quality kernel module code and understanding the complexities of kernel synchronization

Purchase of the print or Kindle book includes a free eBook in PDF format.

Key Features
Discover how to write Linux kernel and module code for real-world products
Implement industry-grade techniques in real-world scenarios for fast, efficient memory allocation and data synchronization
Understand and exploit kernel architecture, CPU scheduling, and kernel synchronization techniques
Book Description

The 2nd Edition of Linux Kernel Programming is an updated, comprehensive guide for those new to Linux kernel development. Built around the latest 6.1 Long-Term Support (LTS) Linux kernel, which is maintained until December 2026, this edition explores its key features and enhancements. Additionally, with the Civil Infrastructure Project extending support for the 6.1 Super LTS (SLTS) kernel until August 2033, this book will remain relevant for years to come.

You'll begin this exciting journey by learning how to build the kernel from source. Step by step, you will then learn how to write your first kernel module by leveraging the kernel's powerful Loadable Kernel Module (LKM) framework. With this foundation, you will delve into key kernel internals topics including Linux kernel architecture, memory management, and CPU (task) scheduling. You'll finish with understanding the deep issues of concurrency, and gain insight into how they can be addressed with various synchronization/locking technologies (for example, mutexes, spinlocks, atomic/refcount operators, rw-spinlocks and even lock-free technologies such as per-CPU and RCU).

By the end of this book, you'll build a strong understanding of the fundamentals to writing the Linux kernel and kernel module code that can straight away be used in real-world projects and products.

What you will learn
Configure and build the 6.1 LTS kernel from source
Write high-quality modular kernel code (LKM framework) for 6.x kernels
Explore modern Linux kernel architecture
Get to grips with key internals details regarding memory management within the kernel
Understand and work with various dynamic kernel memory alloc/dealloc APIs
Discover key internals aspects regarding CPU scheduling within the kernel, including cgroups v2
Gain a deeper understanding of kernel concurrency issues
Learn how to work with key kernel synchronization primitives
Who this book is for

This book is for beginner Linux programmers and developers looking to get started with the Linux kernel, providing a knowledge base to understand required kernel internal topics and overcome frequent and common development issues.

A basic understanding of Linux CLI and C programming is assumed.

Table of Contents
Linux Kernel Programming – A Quick Introduction
Building the 6.x Linux Kernel from Source - Part 1
Building the 6.x Linux Kernel from Source - Part 2
Writing Your First Kernel Module - Part 1
Writing Your First Kernel Module - Part 2
Kernel Internals Essentials - Processes and Threads
Memory Management Internals - Essentials
Kernel Memory Allocation for Module Authors - Part 1
Kernel Memory Allocation for Module Authors - Part 2
The CPU Scheduler - Part 1
The CPU Scheduler - Part 2
Kernel Synchronization - Part 1
Kernel Synchronization - Part 2","['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']","Linux Kernel Programming: A comprehensive and practical guide to kernel internals, writing modules, and kernel synchronization",https://www.amazon.com/dp/1803232226
['Kaiwan N Billimoria'],,f01e9759c739bf81ca8cb5a7ca3f27fec5a91dc5345a2b209bf1bbd5970d7d8f,,,"March 19, 2021",amazon.com,"Discover how to write high-quality character driver code, interface with userspace, work with chip memory, and gain an in-depth understanding of working with hardware interrupts and kernel synchronization




Key Features:

Delve into hardware interrupt handling, threaded IRQs, tasklets, softirqs, and understand which to use when
Explore powerful techniques to perform user-kernel interfacing, peripheral I/O and use kernel mechanisms
Work with key kernel synchronization primitives to solve kernel concurrency issues




Book Description:

Linux Kernel Programming Part 2 - Char Device Drivers and Kernel Synchronization is an ideal companion guide to the Linux Kernel Programming book. This book provides a comprehensive introduction for those new to Linux device driver development and will have you up and running with writing misc class character device driver code (on the 5.4 LTS Linux kernel) in next to no time.




You'll begin by learning how to write a simple and complete misc class character driver before interfacing your driver with user-mode processes via procfs, sysfs, debugfs, netlink sockets, and ioctl. You'll then find out how to work with hardware I/O memory. The book covers working with hardware interrupts in depth and helps you understand interrupt request (IRQ) allocation, threaded IRQ handlers, tasklets, and softirqs. You'll also explore the practical usage of useful kernel mechanisms, setting up delays, timers, kernel threads, and workqueues. Finally, you'll discover how to deal with the complexity of kernel synchronization with locking technologies (mutexes, spinlocks, and atomic/refcount operators), including more advanced topics such as cache effects, a primer on lock-free techniques, deadlock avoidance (with lockdep), and kernel lock debugging techniques.




By the end of this Linux kernel book, you'll have learned the fundamentals of writing Linux character device driver code for real-world projects and products.




What You Will Learn:

Get to grips with the basics of the modern Linux Device Model (LDM)
Write a simple yet complete misc class character device driver
Perform user-kernel interfacing using popular methods
Understand and handle hardware interrupts confidently
Perform I/O on peripheral hardware chip memory
Explore kernel APIs to work with delays, timers, kthreads, and workqueues
Understand kernel concurrency issues
Work with key kernel synchronization primitives and discover how to detect and avoid deadlock




Who this book is for:

An understanding of the topics covered in the Linux Kernel Programming book is highly recommended to make the most of this book. This book is for Linux programmers beginning to find their way with device driver development. Linux device driver developers looking to overcome frequent and common kernel/driver development issues, as well as perform common driver tasks such as user-kernel interfaces, performing peripheral I/O, handling hardware interrupts, and dealing with concurrency will benefit from this book. A basic understanding of Linux kernel internals (and common APIs), kernel module development, and C programming is required.","['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']","Linux Kernel Programming Part 2 - Char Device Drivers and Kernel Synchronization: Create user-kernel interfaces, work with peripheral I/O, and handle hardware interrupts",https://www.amazon.com/dp/180107951X
['Kaiwan N Billimoria'],,1b9dea97d6be090bddc48af77a5ede8c0bfa29ba6bd1ee1d11d0fde8062293ca,,,"August 5, 2022",amazon.com,"Effectively debug kernel modules, device drivers, and the kernel itself by gaining a solid understanding of powerful open source tools and advanced kernel debugging techniques

Key Features
Fully understand how to use a variety of kernel and module debugging tools and techniques using examples
Learn to expertly interpret a kernel Oops and identify underlying defect(s)
Use easy-to-look up tables and clear explanations of kernel-level defects to make this complex topic easy
Book Description

The Linux kernel is at the very core of arguably the world’s best production-quality OS. Debugging it, though, can be a complex endeavor.

Linux Kernel Debugging is a comprehensive guide to learning all about advanced kernel debugging. This book covers many areas in-depth, such as instrumentation-based debugging techniques (printk and the dynamic debug framework), and shows you how to use Kprobes. Memory-related bugs tend to be a nightmare – two chapters are packed with tools and techniques devoted to debugging them. When the kernel gifts you an Oops, how exactly do you interpret it to be able to debug the underlying issue? We’ve got you covered. Concurrency tends to be an inherently complex topic, so a chapter on lock debugging will help you to learn precisely what data races are, including using KCSAN to detect them. Some thorny issues, both debug- and performance-wise, require detailed kernel-level tracing; you’ll learn to wield the impressive power of Ftrace and its frontends. You’ll also discover how to handle kernel lockups, hangs, and the dreaded kernel panic, as well as leverage the venerable GDB tool within the kernel (KGDB), along with much more.

By the end of this book, you will have at your disposal a wide range of powerful kernel debugging tools and techniques, along with a keen sense of when to use which.

What you will learn
Explore instrumentation-based printk along with the powerful dynamic debug framework
Use static and dynamic Kprobes to trap into kernel/module functions
Catch kernel memory defects with KASAN, UBSAN, SLUB debug, and kmemleak
Interpret an Oops in depth and precisely identify it's source location
Understand data races and use KCSAN to catch evasive concurrency defects
Leverage Ftrace and trace-cmd to trace the kernel flow in great detail
Write a custom kernel panic handler and detect kernel lockups and hangs
Use KGDB to single-step and debug kernel/module source code
Who this book is for

This book is for Linux kernel developers, module/driver authors, and testers interested in debugging and enhancing their Linux systems at the level of the kernel. System administrators who want to understand and debug the internal infrastructure of their Linux kernels will also find this book useful. A good grasp on C programming and the Linux command line is necessary. Some experience with kernel (module) development will help you follow along.

Table of Contents
A General Introduction to Debugging Software
Approaches to Kernel Debugging
Debug via Instrumentation – printk and Friends
Debug via Instrumentation – Kprobes
Debugging Kernel Memory Issues – Part 1
Debugging Kernel Memory Issues – Part 2
Oops! Interpreting the Kernel Bug Diagnostic
Lock Debugging
Tracing the Kernel Flow
Kernel Panic, Lockups, and Hangs
Using Kernel GDB (KGDB)
A Few More Kernel Debugging Approaches","['Linux Programming', 'Linux Networking & System Administration', 'Software Development']",Linux Kernel Debugging: Leverage proven tools and advanced techniques to effectively debug Linux kernels and kernel modules,https://www.amazon.com/dp/1801075034
['John Madieu'],,c118242be0a47f10bfd230563161561a26deb708d2261e24e3f5173d569651b5,,,"January 8, 2021",amazon.com,"Master the art of developing customized device drivers for your embedded Linux systems




Key Features:

Stay up to date with the Linux PCI, ASoC, and V4L2 subsystems and write device drivers for them
Get to grips with the Linux kernel power management infrastructure
Adopt a practical approach to customizing your Linux environment using best practices




Book Description:

Linux is one of the fastest-growing operating systems around the world, and in the last few years, the Linux kernel has evolved significantly to support a wide variety of embedded devices with its improved subsystems and a range of new features. With this book, you'll find out how you can enhance your skills to write custom device drivers for your Linux operating system.




Mastering Linux Device Driver Development provides complete coverage of kernel topics, including video and audio frameworks, that usually go unaddressed. You'll work with some of the most complex and impactful Linux kernel frameworks, such as PCI, ALSA for SoC, and Video4Linux2, and discover expert tips and best practices along the way. In addition to this, you'll understand how to make the most of frameworks such as NVMEM and Watchdog. Once you've got to grips with Linux kernel helpers, you'll advance to working with special device types such as Multi-Function Devices (MFD) followed by video and audio device drivers.




By the end of this book, you'll be able to write feature-rich device drivers and integrate them with some of the most complex Linux kernel frameworks, including V4L2 and ALSA for SoC.




What You Will Learn:

Explore and adopt Linux kernel helpers for locking, work deferral, and interrupt management
Understand the Regmap subsystem to manage memory accesses and work with the IRQ subsystem
Get to grips with the PCI subsystem and write reliable drivers for PCI devices
Write full multimedia device drivers using ALSA SoC and the V4L2 framework
Build power-aware device drivers using the kernel power management framework
Find out how to get the most out of miscellaneous kernel subsystems such as NVMEM and Watchdog




Who This Book Is For:

﻿This book is for embedded developers, Linux system engineers, and system programmers who want to explore Linux kernel frameworks and subsystems. C programming skills and a basic understanding of driver development are necessary to get started with this book.","['Device Drivers', 'Linux & UNIX Administration', 'Linux Networking & System Administration']",Mastering Linux Device Driver Development: Write custom device drivers to support computer peripherals in Linux operating systems,https://www.amazon.com/dp/178934204X
['John Madieu'],,0b062146be4d24a5bd6e1174d29a8ac5083feddcecf28e04c9aa31a347741606,,,"April 21, 2022",amazon.com,"Get up to speed with the most important concepts in driver development and focus on common embedded system requirements such as memory management, interrupt management, and locking mechanisms




Key Features:

Write feature-rich and customized Linux device drivers for any character, SPI, and I2C device
Develop a deep understanding of locking primitives, IRQ management, memory management, DMA, and so on
Gain practical experience in the embedded side of Linux using GPIO, IIO, and input subsystems




Book Description:

Linux is by far the most-used kernel on embedded systems. Thanks to its subsystems, the Linux kernel supports almost all of the application fields in the industrial world. This updated second edition of Linux Device Driver Development is a comprehensive introduction to the Linux kernel world and the different subsystems that it is made of, and will be useful for embedded developers from any discipline.




You'll learn how to configure, tailor, and build the Linux kernel. Filled with real-world examples, the book covers each of the most-used subsystems in the embedded domains such as GPIO, direct memory access, interrupt management, and I2C/SPI device drivers. This book will show you how Linux abstracts each device from a hardware point of view and how a device is bound to its driver(s). You'll also see how interrupts are propagated in the system as the book covers the interrupt processing mechanisms in-depth and describes every kernel structure and API involved. This new edition also addresses how not to write device drivers using user space libraries for GPIO clients, I2C, and SPI drivers.




By the end of this Linux book, you'll be able to write device drivers for most of the embedded devices out there.




What You Will Learn:

Download, configure, build, and tailor the Linux kernel
Describe the hardware using a device tree
Write feature-rich platform drivers and leverage I2C and SPI buses
Get the most out of the new concurrency managed workqueue infrastructure
Understand the Linux kernel timekeeping mechanism and use time-related APIs
Use the regmap framework to factor the code and make it generic
Offload CPU for memory copies using DMA
Interact with the real world using GPIO, IIO, and input subsystems




Who this book is for:

This Linux OS book is for embedded system and embedded Linux enthusiasts/developers who want to get started with Linux kernel development and leverage its subsystems. Electronic hackers and hobbyists interested in Linux kernel development as well as anyone looking to interact with the platform using GPIO, IIO, and input subsystems will also find this book useful.","['Device Drivers', 'Linux & UNIX Administration', 'Linux Networking & System Administration']",Linux Device Driver Development - Second Edition: Everything you need to start with device driver development for Linux kernel and embedded Linux,https://www.amazon.com/dp/1803240067
['Rodolfo Giometti'],,4ba59664f544b79e7175ccf6ed023dda0550c9c91fc6576574a2989b2b24f069,,,"May 31, 2019",amazon.com,"Over 30 recipes to develop custom drivers for your embedded Linux applications.

Key Features
Use Kernel facilities to develop powerful drivers
Via a practical approach, learn core concepts of developing device drivers
Program a custom character device to get access to kernel internals
Book Description

Linux is a unified kernel that is widely used to develop embedded systems. As Linux has turned out to be one of the most popular operating systems used, the interest in developing proprietary device drivers has also increased. Device drivers play a critical role in how the system performs and ensures that the device works in the manner intended.

By offering several examples on the development of character devices and how to use other kernel internals, such as interrupts, kernel timers, and wait queue, as well as how to manage a device tree, you will be able to add proper management for custom peripherals to your embedded system. You will begin by installing the Linux kernel and then configuring it. Once you have installed the system, you will learn to use the different kernel features and the character drivers. You will also cover interrupts in-depth and how you can manage them. Later, you will get into the kernel internals required for developing applications. Next, you will implement advanced character drivers and also become an expert in writing important Linux device drivers.

By the end of the book, you will be able to easily write a custom character driver and kernel code as per your requirements.

What you will learn
Become familiar with the latest kernel releases (4.19+/5.x) running on the ESPRESSObin devkit, an ARM 64-bit machine
Download, configure, modify, and build kernel sources
Add and remove a device driver or a module from the kernel
Master kernel programming
Understand how to implement character drivers to manage different kinds of computer peripherals
Become well versed with kernel helper functions and objects that can be used to build kernel applications
Acquire a knowledge of in-depth concepts to manage custom hardware with Linux from both the kernel and user space
Who this book is for

This book will help anyone who wants to develop their own Linux device drivers for embedded systems. Having basic hand-on with Linux operating system and embedded concepts is necessary.

Table of Contents
Installing the developing system
A Peek Inside the Kernel
Working with Char drivers
Using the Device Tree
Managing Interrupts and Concurrency
Miscellaneous Kernel Internals
Advanced Char Driver Operations
(Appendix A): Additional Information on Working with Char Drivers
(Appendix B): Additional Information on using the Device Tree
(Appendix C): Additional Information on managing Interrupts and Concurrency on
(Appendix D): Additional Information on miscellaneous Kernel Internals
(Appendix E): Additional Information on advanced Char Driver Operations","['Linux Applications', 'Device Drivers', 'Computer Software']",Linux Device Driver Development Cookbook: Develop custom drivers for your embedded Linux applications,https://www.amazon.com/dp/1838558802
"['Frank Vasquez', 'Chris Simmonds']",,13ab1d6ec4aa5e5c9193c9c73b4ad9ef30d0ef5d3ccbf9e47339c50f9b1ac62e,,,"May 14, 2021",amazon.com,"Harness the power of Linux to create versatile and robust embedded solutions

Key Features
Learn how to develop and configure robust embedded Linux devices
Explore the new features of Linux 5.4 and the Yocto Project 3.1 (Dunfell)
Discover different ways to debug and profile your code in both user space and the Linux kernel
Book Description

Embedded Linux runs many of the devices we use every day. From smart TVs and Wi-Fi routers to test equipment and industrial controllers, all of them have Linux at their heart. The Linux OS is one of the foundational technologies comprising the core of the Internet of Things (IoT).

This book starts by breaking down the fundamental elements that underpin all embedded Linux projects: the toolchain, the bootloader, the kernel, and the root filesystem. After that, you will learn how to create each of these elements from scratch and automate the process using Buildroot and the Yocto Project. As you progress, the book explains how to implement an effective storage strategy for flash memory chips and install updates to a device remotely once it's deployed. You'll also learn about the key aspects of writing code for embedded Linux, such as how to access hardware from apps, the implications of writing multi-threaded code, and techniques to manage memory in an efficient way. The final chapters demonstrate how to debug your code, whether it resides in apps or in the Linux kernel itself. You'll also cover the different tracers and profilers that are available for Linux so that you can quickly pinpoint any performance bottlenecks in your system.

By the end of this Linux book, you'll be able to create efficient and secure embedded devices using Linux.

What you will learn
Use Buildroot and the Yocto Project to create embedded Linux systems
Troubleshoot BitBake build failures and streamline your Yocto development workflow
Update IoT devices securely in the field using Mender or balena
Prototype peripheral additions by reading schematics, modifying device trees, soldering breakout boards, and probing pins with a logic analyzer
Interact with hardware without having to write kernel device drivers
Divide your system up into services supervised by BusyBox runit
Debug devices remotely using GDB and measure the performance of systems using tools such as perf, ftrace, eBPF, and Callgrind
Who this book is for

If you're a systems software engineer or system administrator who wants to learn Linux implementation on embedded devices, then this book is for you. Embedded systems engineers accustomed to programming for low-power microcontrollers can use this book to help make the leap to high-speed systems on chips that can run Linux. Anyone responsible for developing new hardware that needs to run Linux will also find this book useful. Basic working knowledge of the POSIX standard, C programming, and shell scripting is assumed.

Table of Contents
Starting Out
Learning about Toolchains
All about Bootloaders
Configuring and Building the Kernel
Building a Root Filesystem
Selecting a Build System
Developing with Yocto
Yocto Under the Hood
Creating a Storage Strategy
Updating Software in the Field
Interfacing with Device Drivers
Prototyping with Breakout Boards
Starting Up – The init Program
Starting with BusyBox runit
Managing Power
Packaging Python
Learning about Processes and Threads
Managing Memory
Debugging with GDB
Profiling and Tracing
Real-Time Programming","['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']","Mastering Embedded Linux Programming: Create fast and reliable embedded solutions with Linux 5.4 and the Yocto Project 3.1 (Dunfell), 3rd Edition",https://www.amazon.com/dp/1789530385
['Alex González'],,8f7e37d1679c65006beda6e0b4d3ee89bb8cc2cf281088c7d5e5e25f12524b12,,,"January 25, 2018",amazon.com,"Over 79 hands-on recipes for professional embedded Linux developers to optimize and boost their Yocto Project know-how

Key Features

Optimize your Yocto setup to speed up development and debug build issues
Use what is quickly becoming the standard embedded Linux product builder framework-the Yocto Project
Recipe-based implementation of best practices to optimize your Linux system

Book Description

The Yocto Project has become the de facto distribution build framework for reliable and robust embedded systems with a reduced time to market.

You'll get started by working on a build system where you set up Yocto, create a build directory, and learn how to debug it. Then, you'll explore everything about the BSP layer, from creating a custom layer to debugging device tree issues. In addition to this, you'll learn how to add a new software layer, packages, data, scripts, and configuration files to your system. You will then cover topics based on application development, such as using the Software Development Kit and how to use the Yocto project in various development environments. Toward the end, you will learn how to debug, trace, and profile a running system. This second edition has been updated to include new content based on the latest Yocto release.

What you will learn

Optimize your Yocto Project setup to speed up development and debug build issues
Use Docker containers to build Yocto Project-based systems
Take advantage of the user-friendly Toaster web interface to the Yocto Project build system
Build and debug the Linux kernel and its device trees
Customize your root filesystem with already-supported and new Yocto packages
Optimize your production systems by reducing the size of both the Linux kernel and root filesystems
Explore the mechanisms to increase the root filesystem security
Understand the open source licensing requirements and how to comply with them when cohabiting with proprietary programs
Create recipes, and build and run applications in C, C++, Python, Node.js, and Java","['Computer Hardware Embedded Systems', 'Computer Operating Systems', 'Linux Networking & System Administration']",Embedded Linux Development Using Yocto Project Cookbook: Practical recipes to help you leverage the power of Yocto to build exciting Linux-based systems,https://www.amazon.com/dp/1788399218
['Rudolf Streif'],,9537f3b628876b88d3ec238181563a84b214ec5dc3fd51850d3b7964a9a83844,,,"May 2, 2016",amazon.com,"Build Complete Embedded Linux Systems Quickly and Reliably

Developers are increasingly integrating Linux into their embedded systems: It supports virtually all hardware architectures and many peripherals, scales well, offers full source code, and requires no royalties. The Yocto Project makes it much easier to customize Linux for embedded systems. If you’re a developer with working knowledge of Linux, Embedded Linux Systems with the Yocto ProjectTM will help you make the most of it.

An indispensable companion to the official documentation, this guide starts by offering a solid grounding in the embedded Linux landscape and the challenges of creating custom distributions for embedded systems. You’ll master the Yocto Project’s toolbox hands-on, by working through the entire development lifecycle with a variety of real-life examples that you can incorporate into your own projects.

Author Rudolf Streif offers deep insight into Yocto Project’s build system and engine, and addresses advanced topics ranging from board support to compliance management.

You’ll learn how to

Overcome key challenges of creating custom embedded distributions
Jumpstart and iterate OS stack builds with the OpenEmbedded Build System
Master build workflow, architecture, and the BitBake Build Engine
Quickly troubleshoot build problems
Customize new distros with built-in blueprints or from scratch
Use BitBake recipes to create new software packages
Build kernels, set configurations, and apply patches
Support diverse CPU architectures and systems
Create Board Support Packages (BSP) for hardware-specific adaptations
Provide Application Development Toolkits (ADT) for round-trip development
Remotely run and debug applications on actual hardware targets
Ensure open-source license compliance
Scale team-based projects with Toaster, Build History, Source Mirrors, and Autobuilder","['Linux Programming', 'Computer Hardware Embedded Systems', 'Single Board Computers']",Embedded Linux Systems with the Yocto Project (Pearson Open Source Software Development Series),https://www.amazon.com/dp/0133443248
['Lloyd Brombach'],,0e3c57f88955175b699e8c7debad599d8bb887f73db8e025bcbac9c3bb48f198,,,"January 29, 2021",amazon.com,"Learn how to build and program real autonomous robots

Key Features
Simplified coverage on fundamentals of building a robot platform.
Learn to program Raspberry Pi for interacting with hardware.
Cutting-edge coverage on autonomous motion, mapping, and path planning algorithms for advanced robotics.

Description
Practical Robotics in C++ teaches the complete spectrum of Robotics, right from the setting up a computer for a robot controller to putting power to the wheel motors. The book brings you the workshop knowledge of the electronics, hardware, and software for building a mobile robot platform.

You will learn how to use sensors to detect obstacles, how to train your robot to build itself a map and plan an obstacle-avoiding path, and how to structure your code for modularity and interchangeability with other robot projects. Throughout the book, you can experience the demonstrations of complete coding of robotics with the use of simple and clear C++ programming.

In addition, you will explore how to leverage the Raspberry Pi GPIO hardware interface pins and existing libraries to make an incredibly capable machine on the most affordable computer platform ever.

What will you learn

Write code for the motor drive controller.
Build a Map from Lidar Data.
Write and implement your own autonomous path-planning algorithm.
Write code to send path waypoints to the motor drive controller autonomously.
Get to know more about robot mapping and navigation.

Who this book is for
This book is most suitable for C++ programmers who have keen interest in robotics and hardware programming. All you need is just a good understanding of C++ programming to get the most out of this book.

Table of Contents
1. Choose and Set Up a Robot Computer
2. GPIO Hardware Interface Pins Overview and Use
3. The Robot Platform
4. Types of Robot Motors and Motor Control
5. Communication with Sensors and other Devices
6. Additional Helpful Hardware
7. Adding the Computer to Control your Robot
8. Robot Control Strategy
9. Coordinating the Parts
10. Maps for Robot Navigation
11. Robot Tracking and Localization
12. Autonomous Motion
13. Autonomous Path Planning
14. Wheel Encoders for Odometry
15. Ultrasonic Range Detectors
16. IMUs: Accelerometers, Gyroscopes, and Magnetometers
17. GPS and External Beacon Systems
18. LIDAR Devices and Data
19. Real Vision with Cameras
20. Sensor Fusion
21. Building and Programming an Autonomous Robot

About the Author
Lloyd Brombach is a controls engineer, programmer, and long-time electronics and robotics enthusiast. He has competed at robotics events such as the NASA-funded 2007 Lunar Regolith Excavation Challenge and recently the 27th Intelligent Ground Vehicle Challenge. He is committed to making contributions to the robotics field that future roboticists and robot-owners will benefit from for years to come.

Facebook Profile: www.facebook.com/practicalrobotics
Youtube: www.youtube.com/practicalrobotics
LinkedIn Profile: https://www.linkedin.com/in/lbrombach","['Single Board Computers', 'C++ Programming Language', 'Computer Programming Languages']",Practical Robotics in C++: Build and Program Real Autonomous Robots Using Raspberry Pi (English Edition),https://www.amazon.com/dp/9389423465
['Daniele Lacamera'],,a2e4ec21b0940d25a431482486cbe77934072cc893e7d44c4001f1055754d9ca,,,"May 29, 2018",amazon.com,"Learn to design and develop safe and reliable embedded systems

Key Features

Identify and overcome challenges in embedded environments
Understand the steps required to increase the security of IoT solutions
Build safety-critical and memory-safe parallel and distributed embedded systems

Book Description

Embedded systems are self-contained devices with a dedicated purpose. We come across a variety of fields of applications for embedded systems in industries such as automotive, telecommunications, healthcare and consumer electronics, just to name a few.

Embedded Systems Architecture begins with a bird's eye view of embedded development and how it differs from the other systems that you may be familiar with. You will first be guided to set up an optimal development environment, then move on to software tools and methodologies to improve the work flow. You will explore the boot-up mechanisms and the memory management strategies typical of a real-time embedded system. Through the analysis of the programming interface of the reference microcontroller, you'll look at the implementation of the features and the device drivers. Next, you'll learn about the techniques used to reduce power consumption. Then you will be introduced to the technologies, protocols and security aspects related to integrating the system into IoT solutions.

By the end of the book, you will have explored various aspects of embedded architecture, including task synchronization in a multi-threading environment, and the safety models adopted by modern real-time operating systems.

What you will learn

Participate in the design and definition phase of an embedded product
Get to grips with writing code for ARM Cortex-M microcontrollers
Build an embedded development lab and optimize the workflow
Write memory-safe code
Understand the architecture behind the communication interfaces
Understand the design and development patterns for connected and distributed devices in the IoT
Master multitask parallel execution patterns and real-time operating systems","['Computer Hardware Embedded Systems', 'C Programming Language', 'Computer Programming Languages']","Embedded Systems Architecture: Explore architectural concepts, pragmatic design patterns, and best practices to produce robust systems",https://www.amazon.com/dp/1788832507
[],,46a23594d9eaee5c31be4459e967e44fa080c5edee6e304e0fe8763a02e752c2,,,,amazon.com,,[],Real-Time C++: Efficient Object-Oriented and Template Microcontroller Programming,https://www.amazon.com/dp/3662478099
['Lewis Van Winkle'],,d071cf84c59ce12ce21c81c1898a78970bf8a3d2da5d9f82a3baae88a318b1a7,,,"May 13, 2019",amazon.com,"A comprehensive guide to programming with network sockets, implementing Internet protocols, designing IoT devices, and much more with C

Key Features
Leverage your C or C++ programming skills to build powerful network applications
Get to grips with a variety of network protocols that allow you to load web pages, send emails, and do much more
Write portable network code for operating systems such as Windows, Linux, and macOS
Book Description

Network programming, a challenging topic in C, is made easy to understand with a careful exposition of socket programming APIs. This book gets you started with modern network programming in C and the right use of relevant operating system APIs.

This book covers core concepts, such as hostname resolution with DNS, that are crucial to the functioning of the modern web. You'll delve into the fundamental network protocols, TCP and UDP. Essential techniques for networking paradigms such as client-server and peer-to-peer models are explained with the help of practical examples. You'll also study HTTP and HTTPS (the protocols responsible for web pages) from both the client and server perspective. To keep up with current trends, you'll apply the concepts covered in this book to gain insights into web programming for IoT. You'll even get to grips with network monitoring and implementing security best practices.

By the end of this book, you'll have experience of working with client-server applications, and be able to implement new network programs in C.

The code in this book is compatible with the older C99 version as well as the latest C18 and C++17 standards. Special consideration is given to writing robust, reliable, and secure code that is portable across operating systems, including Winsock sockets for Windows and POSIX sockets for Linux and macOS.

What you will learn
Uncover cross-platform socket programming APIs
Implement techniques for supporting IPv4 and IPv6
Understand how TCP and UDP connections work over IP
Discover how hostname resolution and DNS work
Interface with web APIs using HTTP and HTTPS
Acquire hands-on experience with Simple Mail Transfer Protocol (SMTP)
Apply network programming to the Internet of Things (IoT)
Who this book is for

If you're a developer or a system administrator who wants to enter the world of network programming, this book is for you. Basic knowledge of C programming is assumed.

Table of Contents
Introducing Networks and Protocols
Getting to Grips with Socket APIs
An In-Depth Overview of TCP connections
Establishing UDP Connections
Hostname Resolution and DNS
Building a Simple Web Client
Building a Simple Web Server
Making Your Program Send Emails
Loading Secure Web Pages with HTTPS and OpenSSL
Implementing a Secure Web Server
Establishing SSH Connections
Network Monitoring and Security
Socket Programming Tips and Pitfalls
Web Programming for the Internet of Things
Answers to Questions
Setting Up Your C Compiler on Windows
Setting Up Your C Compiler on Linux
Setting Up Your C Compiler on macOS
Example Programs","['C Programming Language', 'Linux Networking & System Administration', 'Introductory & Beginning Programming']",Hands-On Network Programming with C: Learn socket programming in C and write secure and optimized network code,https://www.amazon.com/dp/1789349869
['Christian Benvenuti'],,07390cd39991cdc215bc6ecd9f8a252217f72d5c9928f568f2f8af06c9e2240e,,,"February 7, 2006",amazon.com,"If you've ever wondered how Linux carries out the complicated tasks assigned to it by the IP protocols -- or if you just want to learn about modern networking through real-life examples -- Understanding Linux Network Internals is for you.

Like the popular O'Reilly book, Understanding the Linux Kernel, this book clearly explains the underlying concepts and teaches you how to follow the actual C code that implements it. Although some background in the TCP/IP protocols is helpful, you can learn a great deal from this text about the protocols themselves and their uses. And if you already have a base knowledge of C, you can use the book's code walkthroughs to figure out exactly what this sophisticated part of the Linux kernel is doing.

Part of the difficulty in understanding networks -- and implementing them -- is that the tasks are broken up and performed at many different times by different pieces of code. One of the strengths of this book is to integrate the pieces and reveal the relationships between far-flung functions and data structures. Understanding Linux Network Internals is both a big-picture discussion and a no-nonsense guide to the details of Linux networking. Topics include:

Key problems with networking
Network interface card (NIC) device drivers
System initialization
Layer 2 (link-layer) tasks and implementation
Layer 3 (IPv4) tasks and implementation
Neighbor infrastructure and protocols (ARP)
Bridging
Routing
ICMP

Author Christian Benvenuti, an operating system designer specializing in networking, explains much more than how Linux code works. He shows the purposes of major networking features and the trade-offs involved in choosing one solution over another. A large number of flowcharts and other diagrams enhance the book's understandability.","['Software Design & Engineering', 'Linux Networking & System Administration', 'Software Development']",Understanding Linux Network Internals: Guided Tour to Networking on Linux,https://www.amazon.com/dp/0596002556
['David Wolff'],,18cb502bb333533b3b163458bdccee3dff676d4add2cb98f63d0842469392a5a,,,"September 28, 2018",amazon.com,"Over 70 recipes that cover advanced techniques for 3D programming such as lighting, shading, textures, particle systems, and image processing with OpenGL 4.6

Key Features
Explore techniques for implementing shadows using shadow maps and shadow volumes
Learn to use GLSL features such as compute, geometry, and tessellation shaders
Use GLSL to create a wide variety of modern, realistic visual effects
Book Description

OpenGL 4 Shading Language Cookbook, Third Edition provides easy-to-follow recipes that first walk you through the theory and background behind each technique, and then proceed to showcase and explain the GLSL and OpenGL code needed to implement them.

The book begins by familiarizing you with beginner-level topics such as compiling and linking shader programs, saving and loading shader binaries (including SPIR-V), and using an OpenGL function loader library. We then proceed to cover basic lighting and shading effects. After that, you'll learn to use textures, produce shadows, and use geometry and tessellation shaders. Topics such as particle systems, screen-space ambient occlusion, deferred rendering, depth-based tessellation, and physically based rendering will help you tackle advanced topics.

OpenGL 4 Shading Language Cookbook, Third Edition also covers advanced topics such as shadow techniques (including the two of the most common techniques: shadow maps and shadow volumes). You will learn how to use noise in shaders and how to use compute shaders.

The book provides examples of modern shading techniques that can be used as a starting point for programmers to expand upon to produce modern, interactive, 3D computer-graphics applications.

What you will learn
Compile, debug, and communicate with shader programs
Use compute shaders for physics, animation, and general computing
Learn about features such as shader storage buffer objects and image load/store
Utilize noise in shaders and learn how to use shaders in animations
Use textures for various effects including cube maps for reflection or refraction
Understand physically based reflection models and the SPIR-V Shader binary
Learn how to create shadows using shadow maps or shadow volumes
Create particle systems that simulate smoke, fire, and other effects
Who this book is for

If you are a graphics programmer looking to learn the GLSL shading language, this book is for you. A basic understanding of 3D graphics and programming experience with C++ are required.

Table of Contents
Getting Started with GLSL
Working with GLSL programs
The Basics of GLSL Shaders
Lighting and Shading
Using Textures
Image Processing and Screen Space Techniques
Using Geometry and Tessellation Shaders
Shadows
Using Noise in Shaders
Particle Systems and Animation
Using Compute Shaders","['OpenGL Software Programming', '3D Graphic Design', 'Game Programming']","OpenGL 4 Shading Language Cookbook: Build high-quality, real-time 3D graphics with OpenGL 4.6, GLSL 4.6 and C++17, 3rd Edition",https://www.amazon.com/dp/1789342252
"['V. Scott Gordon PhD', 'John L. Clevenger PhD']",,34caeecf70c5175c3e79b2644a01656f2715c12fd81d41c94b24acf7fb2051db,,,"February 23, 2024",amazon.com,"This updated edition includes step-by-step instruction on modern OpenGL 4.0+ GLSL shader programming with C++, along with the theoretical foundations of 3D computer graphics. Every shader stage is explored, from the basics of modeling, textures, lighting, shadows, etc., through advanced techniques such as tessellation, noise maps, water, and stereoscopy. This new edition includes expanded coverage of camera control, refraction, and a new chapter on ray tracing with bounding volume hierarchies for complex models. The companion files include all the source code, shaders, model files, skyboxes, etc., needed to run every example in the book.

FEATURES:

Covers modern OpenGL 4.0+ GLSL shader programming with C++, and instructions for both PC/Windows and Macintosh
Provides complete source code for each example, fully explained along with tips for performance optimization
Includes step-by-step instruction for using each GLSL programmable pipeline stage (vertex, tessellation, geometry, and fragment)
Designed in a 4-color, “teach-yourself” format with numerous examples that the reader can run just as presented
Explores practical examples for modeling, lighting, and shadows (including soft shadows), terrain, water, and 3D materials such as wood and marble
Expanded coverage of ray tracing, to include complex models and bounding volume hierarchies
Includes companion files with source code, shaders, OBJ models, textures, skydomes, normal maps, high resolution figures, and more","['OpenGL Software Programming', 'Rendering & Ray Tracing', 'Internet & Social Media']",Computer Graphics Programming in OpenGL With C++,https://www.amazon.com/dp/1501522590
['Joey de Vries'],,e675f06e1051fa8d709d56042f662872ebf68120a927a8f8d5f39ccc8a66f0e4,,,"June 17, 2020",amazon.com,"Graphics programmers are often coined the 'wizards' of the game industry. As every magician knows, terms like wizardry and magic are often somewhat exaggerated. Yet, there is a certain charm to graphics programming: the ability to conjure up complete living worlds at our fingertips.




Learn OpenGL will teach you the basics, the intermediate, and tons of advanced knowledge, using modern (core-profile) OpenGL. The aim of this book is to show you all there is to modern OpenGL in an easy-to-understand fashion, with clear examples and step-by-step instructions, while also providing a useful reference for later studies.




After years of continuous work and improvements on the accompanying website learnopengl.com, with the help of thousands of readers, its content has been professionally revised for this physical copy you now find in your hands.

Graphics programming isn't as hard as many people make it out to be... you just need to start.","['OpenGL Software Programming', 'Game Programming', 'Introductory & Beginning Programming']",Learn OpenGL: Learn modern OpenGL graphics programming in a step-by-step fashion.,https://www.amazon.com/dp/9090332561
['Justin Stenning'],,65f1b474d61e9e71d53b4663336375c9e93954adcf4644dc0c76bfd76d9e9e0a,,,"January 20, 2014",amazon.com,"50 practical recipes to guide you through the advanced rendering techniques in Direct3D to help bring your 3D graphics project to life
About This Book


Learn and implement the advanced rendering techniques in Direct3D 11.2 and bring your 3D graphics project to life


Study the source code and digital assets with a small rendering framework and explore the features of Direct3D 11.2


A practical, example-driven, technical cookbook with numerous illustrations and example images to help demonstrate the techniques described


Who This Book Is For

Direct3D Rendering Cookbook is for C# .NET developers who want to learn the advanced rendering techniques made possible with DirectX 11.2. It is expected that the reader has at least a cursory knowledge of graphics programming, and although some knowledge of Direct3D 10+ is helpful, it is not necessary. An understanding of vector and matrix algebra is required.

What You Will Learn


Set up a Direct3D application and perform real-time 3D rendering with C# and SharpDX


Learn techniques for debugging your Direct3D application


Render a 3D environment with lights, shapes, and materials


Explore character animation using bones and vertex skinning


Create additional surface detail using tessellation with displacement mapping and displacement decals


Implement image post-processing tasks within compute shaders


Use real-time deferred rendering techniques to implement improved shading for lighting and shadows


Learn to Program the graphics pipeline with shaders using HLSL implemented by Shader Model 5


In Detail

The latest 3D graphics cards bring us amazing visuals in the latest games, from Indie to AAA titles. This is made possible on Microsoft® platforms including PC, Xbox consoles, and mobile devices thanks to Direct3D– a component of the DirectX API dedicated to exposing 3D graphics hardware to programmers. Microsoft DirectX is the graphics technology powering all of today's hottest games. The latest version— DirectX 11—features tessellation for film-like geometric detail, compute shaders for custom graphics effects, and improved multithreading for better hardware utilization. With it comes a number of fundamental game changing improvements to the way in which we render 3D graphics.




Direct3D Rendering Cookbook provides detailed .NET examples covering a wide range of advanced 3D rendering techniques available in Direct3D 11.2. With this book, you will learn how to use the new Visual Studio 2012 graphics content pipeline, how to perform character animation, how to use advanced hardware tessellation techniques, how to implement displacement mapping, perform image post-processing, and how to use compute shaders for general-purpose computing on GPUs.




After covering a few introductory topics about Direct3D 11.2 and working with the API using C# and SharpDX, we quickly ramp up to the implementation of a range of advanced rendering techniques, building upon the projects we create and the skills we learn in each subsequent chapter. Topics covered include using the new Visual Studio 2012 graphics content pipeline and graphics debugger, texture sampling, normal mapping, lighting and materials, loading meshes, character animation (vertex skinning), hardware tessellation, displacement mapping, using compute shaders for post-process effects, deferred rendering, and finally bringing all of this to Windows Store Apps for PC and mobile. After completing the recipes within Direct3D Rendering Cookbook, you will have an in-depth understanding of a range of advanced Direct3D rendering topics.","['DirectX Software Programming', 'Rendering & Ray Tracing', 'C# Programming (Kindle Store)']",Direct3D Rendering Cookbook,https://www.amazon.com/dp/B00HYQFGYI
['Frank Luna'],,8038026b6c62cd69499b00253370e4a40d129529a9243c2c442fd1ffb306cb18,,,"March 24, 2016",amazon.com,"This updated bestseller provides an introduction to programming interactive computer graphics, with an emphasis on game development using DirectX 12. The book is divided into three main parts: basic mathematical tools, fundamental tasks in Direct3D, and techniques and special effects. It shows how to use new Direct12 features such as command lists, pipeline state objects, descriptor heaps and tables, and explicit resource management to reduce CPU overhead and increase scalability across multiple CPU cores. The book covers modern special effects and techniques such as hardware tessellation, writing compute shaders, ambient occlusion, reflections, normal and displacement mapping, shadow rendering, and character animation. Includes a companion DVD with code and figures.

eBook Customers: Companion files are available for downloading with order number/proof of purchase by writing to the publisher at info@merclearning.com.

FEATURES:

• Provides an introduction to programming interactive computer graphics, with an emphasis on game development using DirectX 12

• Uses new Direct3D 12 features to reduce CPU overhead and take advantage of multiple CPU cores

• Contains detailed explanations of popular real-time game effects

• Includes a DVD with source code and all the images (including 4-color) from the book

• Learn advance rendering techniques such as ambient occlusion, real-time reflections, normal and displacement mapping, shadow rendering, programming the geometry shader, and character animation

• Covers a mathematics review and 3D rendering fundamentals such as lighting, texturing, blending and stenciling

• Use the end-of-chapter exercises to test understanding and provide experience with DirectX 12","['DirectX Software Programming', 'Game Programming', 'Introductory & Beginning Programming']",Introduction to 3D Game Programming with DirectX 12,https://www.amazon.com/dp/1942270062
['Siddharth Shekar'],,b4a940496a44bc23bf2cb8ae4c5ed64232366ed16b591f410d08197b99cf45d3,,,"May 3, 2019",amazon.com,"Explore modern game programming and rendering techniques to build games using C++ programming language and its popular libraries

Key Features
Learn how you can build basic 2D and complex 3D games with C++
Understand shadows, texturing, lighting, and rendering in 3D game development using OpenGL
Uncover modern graphics programming techniques and GPU compute methods using the Vulkan API
Book Description

Although numerous languages are currently being used to develop games, C++ remains the standard for fabricating expert libraries and tool chains for game development. This book introduces you to the world of game development with C++.

C++ Game Development By Example starts by touching upon the basic concepts of math, programming, and computer graphics and creating a simple side-scrolling action 2D game. You'll build a solid foundation by studying basic game concepts such as creating game loops, rendering 2D game scenes using SFML, 2D sprite creation and animation, and collision detection. The book will help you advance to creating a 3D physics puzzle game using modern OpenGL and the Bullet physics engine. You'll understand the graphics pipeline, which entails creating 3D objects using vertex and index buffers and rendering them to the scene using vertex and fragment shaders. Finally, you'll create a basic project using the Vulkan library that'll help you get to grips with creating swap chains, image views, render passes, and frame buffers for building high-performance graphics in your games.

By the end of this book, you’ll be ready with 3 compelling projects created with SFML, the Vulkan API, and OpenGL, and you'll be able take your game and graphics programming skills to the next level.

What you will learn
Understand shaders and how to write a basic vertex and fragment shader
Build a Visual Studio project and add SFML to it
Discover how to create sprite animations and a game character class
Add sound effects and background music to your game
Grasp how to integrate Vulkan into Visual Studio
Create shaders and convert them to the SPIR-V binary format
Who this book is for

If you’re a developer keen to learn game development with C++ or get up to date with game development, this book is for you. Some knowledge of C++ programming is assumed.

Table of Contents
C++ Concepts
Mathematics and Graphics Concepts
Setting Up Your Game
Creating your game
Finalizing your Game
Getting started with OpenGL
Building on the game objects
Enhancing your game with Collision, loop, and Lighting
Getting started with Vulkan
Preparing the Clear Screen
Creating Object Resources
Drawing Vulkan Objects","['C++ Programming', 'Computer Games Programming', 'C++ Programming Language']","C++ Game Development By Example: Learn to build games and graphics with SFML, OpenGL, and Vulkan using C++ programming",https://www.amazon.com/dp/B07RG9H8CR
['Robert Nystrom'],,b0d328da1c491daf577664ab207da27a6def512497a473604dddb4399a16f10c,,,"November 2, 2014",amazon.com,"The biggest challenge facing many game programmers is completing their game. Most game projects fizzle out, overwhelmed by the complexity of their own code. Game Programming Patterns tackles that exact problem. Based on years of experience in shipped AAA titles, this book collects proven patterns to untangle and optimize your game, organized as independent recipes so you can pick just the patterns you need.

You will learn how to write a robust game loop, how to organize your entities using components, and take advantage of the CPUs cache to improve your performance. You'll dive deep into how scripting engines encode behavior, how quadtrees and other spatial partitions optimize your engine, and how other classic design patterns can be used in games.","['Game Programming', 'Software Development', 'Video & Computer Games']",Game Programming Patterns,https://www.amazon.com/dp/0990582906
['Gabor Szauer'],,bab879516dc75a72364576fc26a848fd3703c76d9be7434b6fd10b7cd76a6369,,,"June 12, 2020",amazon.com,"Learn animation programming from first principles and implement modern animation techniques that can be integrated into any game development workflow

Key Features
Build a functional and production-ready modern animation system with complete features using C++
Learn basic, advanced, and skinned animation programming with this step-by-step guide
Discover the math required to implement cutting edge animation techniques such as inverse kinematics and dual quaternions
Book Description

Animation is one of the most important parts of any game. Modern animation systems work directly with track-driven animation and provide support for advanced techniques such as inverse kinematics (IK), blend trees, and dual quaternion skinning.

This book will walk you through everything you need to get an optimized, production-ready animation system up and running, and contains all the code required to build the animation system. You'll start by learning the basic principles, and then delve into the core topics of animation programming by building a curve-based skinned animation system. You'll implement different skinning techniques and explore advanced animation topics such as IK, animation blending, dual quaternion skinning, and crowd rendering. The animation system you will build following this book can be easily integrated into your next game development project. The book is intended to be read from start to finish, although each chapter is self-contained and can be read independently as well.

By the end of this book, you'll have implemented a modern animation system and got to grips with optimization concepts and advanced animation techniques.

What you will learn
Get the hang of 3D vectors, matrices, and transforms, and their use in game development
Discover various techniques to smoothly blend animations
Get to grips with GLTF file format and its design decisions and data structures
Design an animation system by using animation tracks and implementing skinning
Optimize various aspects of animation systems such as skinned meshes, clip sampling, and pose palettes
Implement the IK technique for your game characters using CCD and FABRIK solvers
Understand dual quaternion skinning and how to render large instanced crowds
Who this book is for

This book is for professional, independent, and hobbyist developers interested in building a robust animation system from the ground up. Some knowledge of the C++ programming language will be helpful.

Table of Contents
Creating a Game Window
Implementing Vectors
Implementing Matrices
Implementing Quaternions
Implementing Transforms
Building an Abstract Renderer
Exploring the glTF File Format
Creating Curves, Frames, and Tracks
Implementing Animation Clips
Mesh Skinning
Optimizing the Animation Pipeline
Blending between Animations
Implementing Inverse Kinematics
Using Dual Quaternions for Skinning
Rendering Instanced Crowds","['C++ Programming Language', 'Game Programming', 'Introductory & Beginning Programming']",Hands-On C++ Game Animation Programming: Learn modern animation techniques from theory to implementation with C++ and OpenGL,https://www.amazon.com/dp/1800208081
['Sanjay Madhav'],,535e8d145421c9c7eb0f8c6a87dd8ff858eb18d36a8c8c0b298e244c7956a33e,,,"March 28, 2018",amazon.com,"Program 3D Games in C++: The #1 Language at Top Game Studios Worldwide

C++ remains the key language at many leading game development studios. Since it’s used throughout their enormous code bases, studios use it to maintain and improve their games, and look for it constantly when hiring new developers. Game Programming in C++ is a practical, hands-on approach to programming 3D video games in C++. Modeled on Sanjay Madhav’s game programming courses at USC, it’s fun, easy, practical, hands-on, and complete.

Step by step, you’ll learn to use C++ in all facets of real-world game programming, including 2D and 3D graphics, physics, AI, audio, user interfaces, and much more. You’ll hone real-world skills through practical exercises, and deepen your expertise through start-to-finish projects that grow in complexity as you build your skills. Throughout, Madhav pays special attention to demystifying the math that all professional game developers need to know.

Set up your C++ development tools quickly, and get started
Implement basic 2D graphics, game updates, vectors, and game physics
Build more intelligent games with widely used AI algorithms
Implement 3D graphics with OpenGL, shaders, matrices, and transformations
Integrate and mix audio, including 3D positional audio
Detect collisions of objects in a 3D environment
Efficiently respond to player input
Build user interfaces, including Head-Up Displays (HUDs)
Improve graphics quality with anisotropic filtering and deferred shading
Load and save levels and binary game data

Whether you’re a working developer or a student with prior knowledge of C++ and data structures, Game Programming in C++ will prepare you to solve real problems with C++ in roles throughout the game development lifecycle. You’ll master the language that top studios are hiring for―and that’s a proven route to success.","['C++ Programming Language', 'Game Programming', 'Software Development']",Game Programming in C++: Creating 3D Games (Game Design),https://www.amazon.com/dp/0134597206
['Rachel Cordone'],,dc7d9bc4da424b4a24378f2ff9035175e395ed1668fe48ba6b9586f502096e21,,,"May 31, 2019",amazon.com,"Learn how to use Unreal Engine 4 by building 3D and multiplayer games using Blueprints

Key Features
Learn the fundamentals of Unreal Engine such as project templates, Blueprints, and C++
Learn to design games; use UMG to create menus and HUDs, and replication to create multiplayer games
Build dynamic game elements using Animation Blueprints and Behavior Trees
Book Description

Unreal Engine is a popular game engine for developers to build high-end 2D and 3D games.

This book is a practical guide, starting off by quickly introducing you to the Unreal Engine 4 (UE4) ecosystem. You will learn how to create Blueprints and C++ code to define your game's functionality. You will be familiarized with the core systems of UE4 such as UMG, Animation Blueprints, and Behavior Trees. You will also learn how to use replication to create multiplayer games. By the end of this book, you will have a broad, solid knowledge base to expand upon on your journey with UE4.

What you will learn
Use project templates to give your game a head start
Create custom Blueprints and C++ classes and extend from Epic's base classes
Use UMG to create menus and HUDs for your game
Create more dynamic characters using Animation Blueprints
Learn how to create complex AI with Behavior Trees
Use replication to create multiplayer games
Optimize, test, and deploy a UE4 project
Who this book is for

Readers who already have some game development experience and Unity users who would like to try UE4 will all benefit from this book. Knowledge of basic Object-Oriented Programming topics such as variables, functions, and classes is assumed.

Table of Contents
Introduction to Unreal Engine 4
Programming Using Blueprints
Adding C++ to a Blueprint Project
Creating HUDs and Menus Using UMG
Animation Blueprints
AI with Behavior Tree and Blackboard
Multiplayer Games
Optimization, Testing, and Packaging","['Computer Algorithms', 'Computer Graphics', 'Design & Graphics Software Books']",Unreal Engine 4 Game Development Quick Start Guide: Programming professional 3D games with Unreal Engine 4,https://www.amazon.com/dp/1789950686
"['Kevin Mack', 'Robert Ruud']",,e95c6f75ec7341906cbe4c2a2c00637d41f775495bad91c901dd8afafcfa046d,,,"April 30, 2019",amazon.com,"Learn to design and build Virtual Reality experiences, applications, and games in Unreal Engine 4 through a series of practical, hands-on projects that teach you to create controllable avatars, user interfaces, and more.

Key Features
Learn about effective VR design and develop virtual reality games and applications for every VR platform
Build essential features for VR such as player locomotion and interaction, 3D user interfaces, and 360 media players
Learn about multiplayer networking and how to extend the engine using plugins and asset packs
Book Description

Unreal Engine 4 (UE4) is a powerful tool for developing VR games and applications. With its visual scripting language, Blueprint, and built-in support for all major VR headsets, it's a perfect tool for designers, artists, and engineers to realize their visions in VR.

This book will guide you step-by-step through a series of projects that teach essential concepts and techniques for VR development in UE4. You will begin by learning how to think about (and design for) VR and then proceed to set up a development environment. A series of practical projects follows, taking you through essential VR concepts. Through these exercises, you'll learn how to set up UE4 projects that run effectively in VR, how to build player locomotion schemes, and how to use hand controllers to interact with the world. You'll then move on to create user interfaces in 3D space, use the editor's VR mode to build environments directly in VR, and profile/optimize worlds you've built. Finally, you'll explore more advanced topics, such as displaying stereo media in VR, networking in Unreal, and using plugins to extend the engine.

Throughout, this book focuses on creating a deeper understanding of why the relevant tools and techniques work as they do, so you can use the techniques and concepts learned here as a springboard for further learning and exploration in VR.

What you will learn
Understand design principles and concepts for building VR applications
Set up your development environment with Unreal Blueprints and C++
Create a player character with several locomotion schemes
Evaluate and solve performance problems in VR to maintain high frame rates
Display mono and stereo videos in VR
Extend Unreal Engine's capabilities using various plugins
Who this book is for

This book is for anyone interested in learning to develop Virtual Reality games and applications using UE4. Developers new to UE4 will benefit from hands-on projects that guide readers through clearly-explained steps, while both new and experienced developers will learn crucial principles and techniques for VR development in UE4.

Table of Contents
Thinking in VR
Setting up your Development Environment
Hello World: Your First VR Project
Getting Around the Virtual World
Interacting with the Virtual World - Part I
Interacting with the Virtual World - Part II
Creating User Interfaces in VR
Building the World and Optimizing for VR
Displaying Media in VR
Creating a Multiplayer Experience in VR
Taking VR Further: Extending Unreal Engine
Where to Go from Here
A: Useful Mind Hacks
B: Research and Further Reading","['Computer Graphics', 'C++ Programming Language', 'Game Programming']",Unreal Engine 4 Virtual Reality Projects,https://www.amazon.com/dp/1789132878
['Stephen Seth Ulibarri'],,9f146e0f0bd7215f0d315b7c81938c82a09b586c035cb84893b835bdd87bbf22,,,"June 7, 2020",amazon.com,"Prepare for Unreal Engine 5! Learn the fundamentals of the C++ programming language as well as Unreal Engine’s code base for creating and packaging a complete hack and slash action game. Implement combat, AI and Behavior Trees, animation, gameplay mechanics, interfaces and delegates, collision and physics, ray casting, game saving, menu and HUD creation via UMG, and much more.","['C++ Programming Language', 'Game Programming', 'Computer Programming Languages']",Unreal Engine C++ the Ultimate Developer's Handbook: Learn C++ and Unreal Engine by Creating a Complete Action Game,https://www.amazon.com/dp/B089M2H7J1
['Zhenyu George Li'],,72bc8b976f11c2ca2218d93b463db4d05b95b585772e0ffa0c8d16e6fbf931bc,,,"August 30, 2023",amazon.com,"Expand your UE5 game development skills by leveraging C++ scripting and improve your game development abilities by building a game from scratch

Purchase of the print or Kindle book includes a free PDF eBook

Key Features

- Learn C++ programming as well as C++ scripting for Unreal Engine 5

- Practice the UE5 scripting APIs through a game project to improve your knowledge and skills

- Explore essential techniques and development cycles including design, implementation, optimization, and publishing

Book Description

Unreal Engine is one of the most popular and accessible game engines in the industry, creating multiple job opportunities. Owing to C++ scripting's high performance, advanced algorithms, and engineering maintenance, it has become the industry standard for developing commercial games. However, C++ scripting can be overwhelming for anyone without a programming background. Unreal Engine 5 Game Development with C++ Scripting will help you master C++ and get a head start on your game development journey.

You'll start by creating an Unreal Engine C++ project from the shooter template and then move on to building the C++ project and the C++ code inside the Visual Studio editor. You'll be introduced to the fundamental C++ syntax and essential object-oriented programming concepts. For a holistic understanding of game development, you'll also uncover various aspects of the game, including character creation, player input and character control, gameplay, collision detection, UI, networking, and packaging a completed multiplayer game.

By the end of this book, you'll be well-equipped to create professional, high-quality games using Unreal Engine 5 with C++, and will have built a solid foundation for more advanced C++ programming and game development technologies.

What you will learn

- Develop coding skills in Microsoft Visual Studio and the Unreal Engine editor

- Discover C++ programming for Unreal Engine C++ scripting

- Understand object-oriented programming concepts and C++-specific syntax

- Explore NPC controls, collisions, interactions, navigation, UI, and the multiplayer mechanism

- Use the predefined Unreal Engine classes and the programming mechanism

- Write code to solve practical problems and accomplish tasks

- Implement solutions and methods used in game development

Who this book is for

This book is for game designers, artists, software engineers, and students with some experience in using Unreal Engine and looking to explore the enigmatic C++ scripting. Basic experience with the UE editor is expected and blueprint scripting is a must. Familiarity with game concepts such as game level, lights, camera, actor/pawn/character, transformation, animation, and player control will be beneficial.

Table of Contents

- Creating Your First Unreal C++ Game

- Editing C++ Code in Visual Studio

- Learning C++ and Object-Oriented Programming

- Investigating the Shooter Game's Generated Project and C++ Code

- Learning How to Use UE Gameplay Framework Base Classes

- Creating Game Actors

- Controlling Characters

- Handling Collisions

- Improving C++ Code Quality

- Making Pangaea a Network Multiplayer Game

- Controlling the Game Flow

- Polishing and Packaging the Game","['Functional Software Programming', 'C++ Programming Language', 'Game Programming']","Unreal Engine 5 Game Development with C++ Scripting: Become a professional game developer and create fully functional, high-quality games",https://www.amazon.com/dp/1804613932
"['Stuart Butler', 'Tom Oliver']",,ab67008361c138ce20f93bc3ae3361ac8c0eec9c23b63c41b1cfee3a608535bc,,,"January 5, 2024",amazon.com,"Improve your game's code with design patterns to make it more readable, reusable, modular, and optimized, guided by an Unreal Authorized Instructor to enhance your overall use of C++ with Unreal Engine

Key Features
Explore programming patterns, structures, and principles and their applications in Unreal Engine 5 game development
Translate code from Blueprint to C++ to implement performant solutions in game development
Build a decoupled communications hierarchy and become a better game developer
Purchase of the print or Kindle book includes a free PDF eBook
Book Description

Design patterns serve as a toolkit of techniques and practices that enable you to write code that’s not only faster, but also more manageable. With this book, you’ll explore a range of design patterns and learn how to apply them to projects developed in Unreal Engine 5.

You’ll begin by delving into the foundational principles of coding and develop a solid understanding of the concepts, challenges, and benefits of using patterns in your code. As you progress, you’ll identify patterns that are woven into the core of Unreal Engine 5 such as Double Buffer, Flyweight, and Spatial Partitioning, followed by some of the existing tool sets that embody patterns in their design and usage including Component, Behavior Tree, and Update.

In the next section of the book, you’ll start developing a series of gameplay use cases in C++ to implement a variety of design patterns such as Interface and Event-based Observers to build a decoupled communications hierarchy. You’ll also work with Singleton, Command, and State, along with Behavioral Patterns, Template, Subclass Sandbox, and Type Object. The final section focuses on using design patterns for optimization, covering Dirty Flag, Data Locality, and Object Pooling.

By the end, you’ll be proficient in designing systems with the perfect C++/Blueprint blend for maintainable and scalable systems.

What you will learn
Grasp the essence of design patterns and their inherent utility
Understand the layers within UE 5 and how they work together
Identify the relationship between C++ code and Blueprint in Unreal Engine 5
Recognize the design patterns found within existing Unreal Engine 5 functions
Explore design patterns to understand their purpose and application within Unreal Engine 5
Creatively apply design patterns to existing code to overcome common challenges
Who this book is for

If you are a beginner or intermediate game developer working with Unreal Engine and looking to improve your C++ coding practices, this book is tailor-made to help you produce clean, reusable code through the application of design patterns.

While this book will cover introductory tasks to show the fundamentals of Unreal Engine 5, its primary purpose is not to teach Unreal Engine from scratch. Prior experience with Unreal Engine will be beneficial, but don’t fret if your knowledge isn’t in-depth; the book will introduce tools and features as needed.

Table of Contents
Understanding Unreal Engine 5 and its layers
“Hello Patterns”
UE5 patterns in action: Double Buffer, Flyweight and Spatial Partitioning
Premade Patterns in UE5: Component, Behaviour Tree and Update Method
Forgetting Tick
Clean communication: Interface and Event Observer patterns
A perfectly decoupled system
Building Design Patterns: Singleton, Command and State
Structuring Code with Behavioural Patterns: Template, Subclass Sandbox and Type Object
Optimisation Through Patterns","['C++ Programming Language', 'Game Programming', 'Computer Programming Languages']",Game Development Patterns with Unreal Engine 5: Build maintainable and scalable systems with C++ and Blueprint,https://www.amazon.com/dp/1803243252
['Daniel J. Duffy'],,952fc8d89878c035a3f1fa7e6cff522846e39c71f162813271eeaf099f1e1630,,,"September 5, 2018",amazon.com,"An integrated guide to C++ and computational finance

This complete guide to C++ and computational finance is a follow-up and major extension to Daniel J. Duffy's 2004 edition of Financial Instrument Pricing Using C++. Both C++ and computational finance have evolved and changed dramatically in the last ten years and this book documents these improvements. Duffy focuses on these developments and the advantages for the quant developer by:

Delving into a detailed account of the new C++11 standard and its applicability to computational finance.
Using de-facto standard libraries, such as Boost and Eigen to improve developer productivity.
Developing multiparadigm software using the object-oriented, generic, and functional programming styles.
Designing flexible numerical algorithms: modern numerical methods and multiparadigm design patterns.
Providing a detailed explanation of the Finite Difference Methods through six chapters, including new developments such as ADE, Method of Lines (MOL), and Uncertain Volatility Models.
Developing applications, from financial model to algorithmic design and code, through a coherent approach.
Generating interoperability with Excel add-ins, C#, and C++/CLI.
Using random number generation in C++11 and Monte Carlo simulation.

Duffy adopted a spiral model approach while writing each chapter of Financial Instrument Pricing Using C++ 2e: analyse a little, design a little, and code a little. Each cycle ends with a working prototype in C++ and shows how a given algorithm or numerical method works. Additionally, each chapter contains non-trivial exercises and projects that discuss improvements and extensions to the material.




This book is for designers and application developers in computational finance, and assumes the reader has some fundamental experience of C++ and derivatives pricing.




HOW TO RECEIVE THE SOURCE CODE




Once you have purchased a copy of the book please send an email to the author dduffyATdatasim.nl requesting your personal and non-transferable copy of the source code. Proof of purchase is needed. The subject of the mail should be “C++ Book Source Code Request”. You will receive a reply with a zip file attachment.","['C++ Programming', 'Financial Engineering (Kindle Store)', 'C++ Programming Language']",Financial Instrument Pricing Using C++ (Wiley Finance),https://www.amazon.com/dp/B07H51DPQP
['Erik Schlogl'],,e74763b132defbb18870fcff46200275b5a7462c2c41207dea7a5cc309696630,,,"November 19, 2013",amazon.com,"Quantitative Finance: An Object-Oriented Approach in C++ provides readers with a foundation in the key methods and models of quantitative finance. Keeping the material as self-contained as possible, the author introduces computational finance with a focus on practical implementation in C++.

Through an approach based on C++ classes and templates, the text highlights the basic principles common to various methods and models while the algorithmic implementation guides readers to a more thorough, hands-on understanding. By moving beyond a purely theoretical treatment to the actual implementation of the models using C++, readers greatly enhance their career opportunities in the field.

The book also helps readers implement models in a trading or research environment. It presents recipes and extensible code building blocks for some of the most widespread methods in risk management and option pricing.

Web ResourceThe author’s website provides fully functional C++ code, including additional C++ source files and examples. Although the code is used to illustrate concepts (not as a finished software product), it nevertheless compiles, runs, and deals with full, rather than toy, problems. The website also includes a suite of practical exercises for each chapter covering a range of difficulty levels and problem complexity.","['Business Pricing', 'Object-Oriented Design', 'Probability & Statistics']",Quantitative Finance (Chapman and Hall/CRC Financial Mathematics Series),https://www.amazon.com/dp/1584884797
['Robert Brooks'],,b56e8137ed7a1bbda0d0eda1a938a745078168b17c0532ffa725d4c47f664613,,,"January 11, 2013",amazon.com,"There are numerous good books related to quantitative finance. There are also numerous good books related to programming in C++. The goal here is to bridge the gap between quantitative finance and C++. In many ways C++ has gotten both easier and harder over the past several years. We focus only on the easier techniques in C++. We do not attempt to provide state-of-the-art C++ programming. Rather we provide elementary techniques that are easy for the non-computer programming professional to understand. Specifically, we seek to aid the professional quantitative finance person in their quest to express their innovative ideas using elementary C++. As a consequence, this work should provide an aid to the professional computer programmer in their quest to understand quantitative finance.","['Risk Management', 'Finance']",Building Financial Risk Management Applications with C++,https://www.amazon.com/dp/147835075X
['John Armstrong'],,afb90e96f089813615886c9136e0f9882f637186ed262507f6444e35a1412a60,,,"January 6, 2017",amazon.com,"If you know a little bit about financial mathematics but don’t yet know a lot about programming, then C++ for Financial Mathematics is for you.

C++ is an essential skill for many jobs in quantitative finance, but learning it can be a daunting prospect. This book gathers together everything you need to know to price derivatives in C++ without unnecessary complexities or technicalities. It leads the reader step-by-step from programming novice to writing a sophisticated and flexible financial mathematics library. At every step, each new idea is motivated and illustrated with concrete financial examples.

As employers understand, there is more to programming than knowing a computer language. As well as covering the core language features of C++, this book teaches the skills needed to write truly high quality software. These include topics such as unit tests, debugging, design patterns and data structures.

The book teaches everything you need to know to solve realistic financial problems in C++. It can be used for self-study or as a textbook for an advanced undergraduate or master’s level course.","['Probability & Statistics (Kindle Store)', 'Finance (Kindle Store)', 'Probability & Statistics']",C++ for Financial Mathematics (Chapman and Hall/CRC Financial Mathematics Series),https://www.amazon.com/dp/B01N4V75RJ
"['Paul Darbyshire', 'David Hampton']",,2ed7cb0a3533161d07c67c473252ebe0ef874d4a5ad86e2e4ad4e3f5914044ab,,,"October 26, 2016",amazon.com,"Use powerful C++ algorithms and Object Oriented Programming (OOP) to aid in hedge fund decision making

Low interest rates, overcrowded markets and greater regulatory oversight are just some of the many reasons it is close to impossible for hedge funds to draw competitive returns. The solution for many hedge fund managers, quantitative investment analysts and risk managers is to adopt new technologies, platforms and programming languages to better manage their risks and maximise the benefits of their return profiles.

Hedge Fund Modelling and Analysis is a full course in the latest analytic strategies for hedge fund investing, complete with a one-of-a-kind primer on both C++ and object oriented programming (OOP). Covering both basic and risk-adjusted performance measures, this practitioner's guide enables you to manage risk easily and make the most of key statistics with simple and advanced analysis techniques. This highly anticipated third book in the widely used Hedge Fund Modelling and Analysis series is the only guide available for applying the powerful C++ language to revolutionise hedge fund trading. Even if you've never worked with code before, the focused overview of C++ gives you everything you need to navigate the technical aspects of object oriented programming, which enables you to build sophisticated analysis programs from small units of reusable code. This book is your breakthrough introduction to winning with hedge funds in the new reality of trading.

Jumpstart your new approach to beating the markets with:

All the guidance and hands-on support you need to use quantitative strategies to optimise hedge fund decision-making.
Illustrative modelling exercises and worked-out problems demonstrating what to expect when assessing risk and return factors in the real world.
A companion website offering additional C++ programs, algorithms and data to download.

Make reading Hedge Fund Modelling and Analysis your new routine and gain all the insight and relevant information you need to beat the markets.",[],Hedge Fund Modelling and Analysis: An Object Oriented Approach Using C++ (The Wiley Finance Series),https://www.amazon.com/dp/B01M2A5XWX
"['David C. Black', 'Jack Donovan', 'Bill Bunton']",,0dfa78fa57fcd08bf0894fe6d24c803bc969eceb98c693ebc42baea5259e4682,,,"December 18, 2009",amazon.com,"SystemC provides a robust set of extensions to the C++ language that enables rapid development of complex models of hardware and software systems. The authors focus on practical use of the language for modeling real systems, showing:







A step-by-step build-up of syntax




Code examples for each concept




Updates to reflect the SystemC standard, IEEE 1666




Why features are as they are




Many resource references




How SystemC fits into an ESL methodology




This new edition of an industry best seller is updated to reflect the standardization of SystemC as IEEE 1666 and other improvements that reflect feedback from readers of the first edition. The wide ranging feedback also include suggestions from editors of the Japanese and Korean language translations, professors and students, and computer engineers from a broad industrial and geographical spectrum, all who have successfully used the first edition.




New chapters have been added on the SystemC Verification Library and the Transaction Level Modeling, and proposed changes to the current SystemC standard.




David Black and Jack Donovan, well known consultants in the EDA industry, have teamed with Bill Bunton and Anna Keist, experienced SystemC modeling engineers, to write the second edition of this highly popular classic. As a team the authors bring over 100 years of ASIC and system design experience together to make a very readable introduction to SystemC.","['Computer Systems Analysis & Design (Kindle Store)', 'Electricity Principles', 'CAD Graphic Design Guides']","SystemC: From the Ground Up, Second Edition",https://www.amazon.com/dp/B008BBVWPW
['Robert C. Seacord'],,27efdfd75b0ab617412a45a8149416475be393557b852265bd3da98a28710285,,,"August 4, 2020",amazon.com,"A detailed introduction to the C programming language for experienced programmers.

The world runs on code written in the C programming language, yet most schools begin the curriculum with Python or Java. Effective C bridges this gap and brings C into the modern era--covering the modern C17 Standard as well as potential C2x features. With the aid of this instant classic, you'll soon be writing professional, portable, and secure C programs to power robust systems and solve real-world problems.

Robert C. Seacord introduces C and the C Standard Library while addressing best practices, common errors, and open debates in the C community. Developed together with other C Standards committee experts, Effective C will teach you how to debug, test, and analyze C programs. You'll benefit from Seacord's concise explanations of C language constructs and behaviors, and from his 40 years of coding experience.

You'll learn:

How to identify and handle undefined behavior in a C program
The range and representations of integers and floating-point values
How dynamic memory allocation works and how to use nonstandard functions
How to use character encodings and types
How to perform I/O with terminals and filesystems using C Standard streams and POSIX file descriptors
How to understand the C compiler's translation phases and the role of the preprocessor
How to test, debug, and analyze C programs

Effective C will teach you how to write professional, secure, and portable C code that will stand the test of time and help strengthen the foundation of the computing world.","['C Programming Language', 'Software Testing', 'Introductory & Beginning Programming']",Effective C: An Introduction to Professional C Programming,https://www.amazon.com/dp/1718501048
['Jens Gustedt'],,8c9d38a124e7e168b32d49a19f3569fe41c4d5780ca3aeb485c0f3122d8f414b,,,"October 7, 2019",amazon.com,"Summary
Modern C focuses on the new and unique features of modern C programming. The book is based on the latest C standards and offers an up-to-date perspective on this tried-and-true language.

Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.

About the technology
C is extraordinarily modern for a 50-year-old programming language. Whether you’re writing embedded code, low-level system routines, or high-performance applications, C is up to the challenge. This unique book, based on the latest C standards, exposes a modern perspective of this tried-and-true language.

About the book
Modern C introduces you to modern day C programming, emphasizing the unique and new features of this powerful language. For new C coders, it starts with fundamentals like structure, grammar, compilation, and execution. From there, you’ll advance to control structures, data types, operators, and functions, as you gain a deeper understanding of what’s happening under the hood. In the final chapters, you’ll explore performance considerations, reentrancy, atomicity, threads, and type-generic programming. You’ll code as you go with concept-reinforcing exercises and skill-honing challenges along the way.

What's inside

Operators and functions
Pointers, threading, and atomicity
C’s memory model
Hands-on exercises

About the reader
For programmers comfortable writing simple programs in a language like Java, Python, Ruby, C#, C++, or C.

About the author
Jens Gustedt is a senior scientist at the French National Institute for Computer Science and Control (INRIA) and co-editor of the ISO C standard.","['Compiler Design', 'Software Programming Compilers', 'C Programming Language']",Modern C,https://www.amazon.com/dp/1617295817
['Kamran Amini'],,f6532599b47e5f9907cad8a55205398bdc8bbbf13dea2f7f692fe43acabcd309,,,"October 31, 2019",amazon.com,"Push the limits of what C - and you - can do, with this high-intensity guide to the most advanced capabilities of C

Key Features
Make the most of C's low-level control, flexibility, and high performance
A comprehensive guide to C's most powerful and challenging features
A thought-provoking guide packed with hands-on exercises and examples
Book Description

There's a lot more to C than knowing the language syntax. The industry looks for developers with a rigorous, scientific understanding of the principles and practices. Extreme C will teach you to use C's advanced low-level power to write effective, efficient systems. This intensive, practical guide will help you become an expert C programmer.

Building on your existing C knowledge, you will master preprocessor directives, macros, conditional compilation, pointers, and much more. You will gain new insight into algorithm design, functions, and structures. You will discover how C helps you squeeze maximum performance out of critical, resource-constrained applications.

C still plays a critical role in 21st-century programming, remaining the core language for precision engineering, aviations, space research, and more. This book shows how C works with Unix, how to implement OO principles in C, and fully covers multi-processing.

In Extreme C, Amini encourages you to think, question, apply, and experiment for yourself. The book is essential for anybody who wants to take their C to the next level.

What you will learn
Build advanced C knowledge on strong foundations, rooted in first principles
Understand memory structures and compilation pipeline and how they work, and how to make most out of them
Apply object-oriented design principles to your procedural C code
Write low-level code that's close to the hardware and squeezes maximum performance out of a computer system
Master concurrency, multithreading, multi-processing, and integration with other languages
Unit Testing and debugging, build systems, and inter-process communication for C programming
Who this book is for

Extreme C is for C programmers who want to dig deep into the language and its capabilities. It will help you make the most of the low-level control C gives you.

Table of Contents
Essential Features
From Source to Binary
Object Files
Process Memory Structure
Stack and Heap
OOP and Encapsulation
Composition and Aggregation
Inheritance and Polymorphism
Abstraction and OOP in C++
Unix: History and Architecture
System Calls and Kernels
The Most Recent C
Concurrency
Synchronization
Thread Execution
Thread Synchronization
Process Execution
Process Synchronization
Single-Host IPC and Sockets
Socket Programming
Integration with Other Languages
Unit Testing and Debugging
Build Systems","['C Programming Language', 'Computer Programming Languages', 'Microsoft Programming']","Extreme C: Taking you to the limit in Concurrency, OOP, and the most advanced capabilities of C",https://www.amazon.com/dp/1789343623
['K. N. King'],,4294d959d501d0c41fe37de55356d3738b2f2f01c27addb6c1446c5532d6ebbf,,,"April 19, 2008",amazon.com,"The first edition of C Programming: A Modern Approach was popular with students and faculty alike because of its clarity and comprehensiveness as well as its trademark Q&A sections.

Professor King's spiral approach made it accessible to a broad range of readers, from beginners to more advanced students. With adoptions at over 225 colleges, the first edition was one of the leading C textbooks of the last ten years. The second edition maintains all the book's popular features and brings it up to date with coverage of the C99 standard. The new edition also adds a significant number of exercises and longer programming projects, and includes extensive revisions and updates.","['C Programming Language', 'Computer Programming Languages', 'Computer Software']","C Programming: A Modern Approach, 2nd Edition",https://www.amazon.com/dp/0393979504
['Axel Schreiner'],,136c0101b3e63449c9639fc113b8f87560c004da593e9380cef9d90f883a2910,,,"October 1, 2011",amazon.com,A do-it-yourself guide to object-oriented programming using ANSI-C with detailed examples and a preprocessor (written in awk) to simplify coding.,[],Object-Oriented Programming With ANSI-C,https://www.amazon.com/dp/B00930I6TK
['Scott Meyers'],,8c5838b76ddfa3174caf93de13f21c89ce9d3f5d4a3bc82bd44d202298a233c1,,,"January 1, 1997",amazon.com,"This definitive guide to C++ has been updated to reflect the latest ANSI/ISO standard. With more than 50,000 copies sold, the first edition has helped thousands of developers improve their C++ programming skills. Continuing in this tradition, Meyers has reworked every item in the book and has liberally placed cross-references throughout the text.","['C Programming Language', 'Computer Software', 'Mathematics']",Effective C++: 50 Specific Ways to Improve Your Programs and Designs (Addison-Wesley Professional Computing Series),https://www.amazon.com/dp/0201924889
['Scott Meyers'],,7cffdfeda9a4b3a764856509e223bffcc32a449cf360db6cda406c69b6d98ad3,,,"January 1, 1996",amazon.com,"More than 150,000 copies in print!

Praise for Scott Meyers’ first book,
Effective C++
:

“I heartily recommend
Effective C++
to anyone who aspires to mastery of C++ at the intermediate level or above.”

– The C/C++ User’s Journal

From the author of the indispensable Effective C++, here are 35 new ways to improve your programs and designs. Drawing on years of experience, Meyers explains how to write software that is more effective: more efficient, more robust, more consistent, more portable, and more reusable. In short, how to write C++ software that’s just plain better.

More Effective C++ includes:

Proven methods for improving program efficiency, including incisive examinations of the time/space costs of C++ language features

Comprehensive descriptions of advanced techniques used by C++ experts, including placement new, virtual constructors, smart pointers, reference counting, proxy classes, and double-dispatching

Examples of the profound impact of exception handling on the structure and behavior of C++ classes and functions

Practical treatments of new language features, including bool, mutable, explicit, namespaces, member templates, the Standard Template Library, and more. If your compilers don’t yet support these features, Meyers shows you how to get the job done without them.

More Effective C++ is filled with pragmatic, down-to-earth advice you’ll use every day. Like Effective C++ before it, More Effective C++ is essential reading for anyone working with C++.","['C++ Programming Language', 'Computer Software', 'Mathematics']",More Effective C++: 35 New Ways to Improve Your Programs and Designs,https://www.amazon.com/dp/020163371X
['James O. Coplien'],,82c7d9ad40121cdb9aab71defa419dce934c974ab5000d4f9e1a4d888feca4be,,,"January 1, 1991",amazon.com,This book assumes a background in the syntax of C++. Coplien shows how to become an expert C++ programmer by learning the idioms of the language. His approach is organized around the abstractions that C++ supports. He shows how these abstractions can be combined to use the language effectively.,[],Advanced C++ Programming Styles and Idioms,https://www.amazon.com/dp/0201548550
['Bjarne Stroustrup'],,ff3b5bda2e97bb7c3f568bc0fe3a072cf116d6622f745bd6c738add76d1e0622,,,"March 29, 1994",amazon.com,"This book focuses on the principles, processes and decisions made during the development of the C++ programming language. As the inventor of the language, Stroustrup presents his insight into the decisions which resulted in the features of C++ - the praised, the controversial and even some of the rejected ones. By writing this book the author presents his object-oriented programming philosophy to the interested programming community. His vehicle is the C++ language but his focus is on real object-oriented programming language development for the working programmer rather than as a abstract approach to the OOP paradigm.","['C++ Programming Language', 'Computer Software', 'Mathematics']","Design and Evolution of C++, The",https://www.amazon.com/dp/0201543303
"['Erich Gamma', 'Richard Helm', 'Ralph Johnson']",,92f3ea769defc8cddfac67f46bcb0c202a426272657e2bd757cf21d77ea0795d,,,"October 31, 1994",amazon.com,"Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves.




The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently.




Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk.","['Object-Oriented Design', 'Computer Science', 'Computer Software']",Design Patterns: Elements of Reusable Object-Oriented Software,https://www.amazon.com/dp/0201633612
['John Lakos'],,b52194864812f0a60efffc724dde9a356a13284bb2b242ace1e73876ca92bc36,,,"July 10, 1996",amazon.com,"include a dimension with which even expert software developers may have little or no experience. This is the definitive book for all C++ software professionals involved in large development efforts such as databases, operating systems, compilers, and frameworks. It is the first C++ book that actually demonstrates how to design large systems, and one of the few books on object-oriented design specifically geared to practical aspects of the C++ programming language. In this book, Lakos explains the process of decomposing large systems into physical (not inheritance) hierarchies of smaller, more manageable components. Such systems with their acyclic physical dependencies are fundamentally easier and more economical to maintain, test, and reuse than tightly interdependent systems. In addition to explaining the motivation for following good physical as well as logical design practices, Lakos provides you with a catalog of specific techniques designed to eliminate cyclic, compile-time, and link-time (physical) dependencies. He then extends these concepts from large to very large systems. The book concludes with a comprehensive top-down approach to the logical design of individual components. Appendices include a valuable design pattern """"Protocol Hierarchy"""" designed to avoid fat interfaces while minimizing physical dependencies; the details of implementing an ANSI C compatible C++ procedural interface; and a complete specification for a suite of UNIX-like tools to extract and analyze physical dependencies. Practical design rules, guidelines, and principles are also collected in an appendix and indexed for quick reference.","['C++ Programming Language', 'Software Development', 'Computer Software']",Large-Scale C++ Software Design,https://www.amazon.com/dp/0201633620
['Jeff Alger'],,7331ea16c28258532d1b6bffda4a9655387ea85e2ce21a3283c3ba0c9d535d3c,,,"February 26, 1998",amazon.com,"Based on the successful first edition, Secrets of the C++ Masters (1995), this book provides a path to true C++ enlightenment. It has been carefully revised to thoroughly cover advanced programming techniques using C++. It includes valuable techniques organized into three categories: Smart Pointers, Class Hierarchies, and Memory Management, and includes applications-oriented coverage of numerous topics including template creation, exception handling, pointers, optimization, and types. The focus of the book is on ANSI C++, and it includes one 3.5"" disk for Windows that features all the source code for examples presented in the book.

* A revision of the highly acclaimed Secrets of the C++ Masters
* Bridges the gap between C++ as described in beginner and intermediate-level books and C++ as practiced by experts
* Valuable techniques are described and organized into three simple themes: indirection, class hierarchies, and memory management
* Provides in depth coverage of template creation, exception handling, pointers and optimization techniques
* Book focuses in ANSI C++ and so is compiler independent
* Includes a 3.5"" disk for Windows with source code of all examples in the book","['C Programming Language', 'Computer Programming Languages', 'Computer Software']","C++ for Real Programmers, Revised Edition",https://www.amazon.com/dp/0120499428
"['Bruce Eckel', 'Chuck Allison']",,4db33ebcb08ea58068543868d27db33b7d4b8ef52308286572a80a993bc19abb,,,"December 17, 2003",amazon.com,"For sophomore/junior level courses in Advanced C++ Programming offered in Computer Science departments.

This text fills the need for a practical C++ topics book beyond the introductory level. No other text covers the topics needed to prepare students for production C++ programming. It streamlines the process of learning the C++ language, presenting material a simple step at a time, which allows the reader to digest each concept before moving on, and provides them with a solid foundation in C++.",[],"Thinking in C++: Practical Programming, Volume 2",https://www.amazon.com/dp/0130353132
['Mukherjee'],"If you are a C++ programmer who has never used Boost libraries before, this book will get you up-to-speed with using them. Whether you are developing new C++ software or maintaining existing code written using Boost libraries, this hands-on introduction will help you decide on the right library and techniques to solve your practical programming problems.",e81c77b1696c401dcd7778383f6de01b18c9a9bba6cfb0205852519e68e8a351,,9781783551217,"Jul 31, 2015",packtpub.com,,Programming,"Learning Boost C++: Solve practical programming problems using powerful, portable, and expressive libraries from Boost",https://www.packtpub.com/product/learning-boost-c-libraries/9781783551217
"[""Arthur O'Dwyer""]","Modern C++ has come a long way since 2011. The latest update, C++17, has just been ratified and several implementations are on the way. This book is your guide to the C++ standard library, including the very latest C++17 features. The book starts by exploring the C++ Standard Template Library in depth. You will learn the key differences between classical polymorphism and generic programming, the foundation of the STL. You will also learn how to use the various algorithms and containers in the STL to suit your programming needs. The next module delves into the tools of modern C++. Here you will learn about algebraic types such as std::optional, vocabulary types such as std::function, smart pointers, and synchronization primitives such as std::atomic and std::mutex. In the final module, you will learn about C++'s support for regular expressions and file I/O. By the end of the book you will be proficient in using the C++17 standard library to implement real programs, and you'll have gained a solid understanding of the library's own internals.",31285064b6514c4f62bb5e717ffddd09a51dce4fe8c90f55a54d73161c8f0c54,,9781787126824,"Sep 28, 2017",packtpub.com,,Programming,Mastering the C++17 STL: Make full use of the standard library components in C++17,https://www.packtpub.com/product/mastering-the-c-17-stl/9781787126824
"['Piotr Gaczkowski', 'Adrian Ostrowski']","Software architecture refers to the high-level design of complex applications. It is evolving just like the languages we use, but there are architectural concepts and patterns that you can learn to write high-performance apps in a high-level language without sacrificing readability and maintainability. If you're working with modern C++, this practical guide will help you put your knowledge to work and design distributed, large-scale apps. You'll start by getting up to speed with architectural concepts, including established patterns and rising trends, then move on to understanding what software architecture actually is and start exploring its components. Next, you'll discover the design concepts involved in application architecture and the patterns in software development, before going on to learn how to build, package, integrate, and deploy your components. In the concluding chapters, you'll explore different architectural qualities, such as maintainability, reusability, testability, performance, scalability, and security. Finally, you will get an overview of distributed systems, such as service-oriented architecture, microservices, and cloud-native, and understand how to apply them in application development. By the end of this book, you'll be able to build distributed services using modern C++ and associated tools to deliver solutions as per your clients' requirements.",3668a15ca63814c20799ced5783307675985232198da8c0693c426952a7f4498,,9781838554590,"Apr 23, 2021",packtpub.com,,Programming,"Software Architecture with C++: Design modern systems using effective architecture concepts, design patterns, and techniques with C++20",https://www.packtpub.com/product/software-architecture-with-c/9781838554590
['Stefan Björnander'],"It is critical that modern developers have the right tools to build practical, user-friendly, and efficient applications in order to compete in today’s market. Through hands-on guidance, this book illustrates and demonstrates C++ best practices and the Small Windows object-oriented class library to ease your development of interactive Windows applications. Begin with a focus on high level application development using Small Windows. Learn how to build four real-world applications which focus on the general problems faced when developing graphical applications. Get essential troubleshooting guidance on drawing, spreadsheet, and word processing applications. Finally finish up with a deep dive into the workings of the Small Windows class library, which will give you all the insights you need to build your own object-oriented class library in C++.",c2e862652bc2c61765e904393081c8cf5adfda2eded79097221be0da4d1018bf,,9781786464224,"Sep 12, 2016",packtpub.com,,Programming,C++ Windows Programming: Develop real-world applications in Windows.,https://www.packtpub.com/product/c-windows-programming/9781786464224
['Maya Posch'],"C++ is a great choice for embedded development, most notably, because it does not add any bloat, extends maintainability, and offers many advantages over different programming languages. Hands-On Embedded Programming with C++17 will show you how C++ can be used to build robust and concurrent systems that leverage the available hardware resources. Starting with a primer on embedded programming and the latest features of C++17, the book takes you through various facets of good programming. You’ll learn how to use the concurrency, memory management, and functional programming features of C++ to build embedded systems. You will understand how to integrate your systems with external peripherals and efficient ways of working with drivers. This book will also guide you in testing and optimizing code for better performance and implementing useful design patterns. As an additional benefit, you will see how to work with Qt, the popular GUI library used for building embedded systems. By the end of the book, you will have gained the confidence to use C++ for embedded programming.",92fe205201fd16d98db81f948a5b1cbe7c9787c9172714d3198a84917d5d477f,,9781788629300,"Jan 31, 2019",packtpub.com,,IoT & Hardware,Hands-On Embedded Programming with C++17: Create versatile and robust embedded solutions for MCUs and RTOSes with modern C++,https://www.packtpub.com/product/hands-on-embedded-programming-with-c-17/9781788629300
['Radchuk'],"Starting with recipes demonstrating the execution of basic Boost.Asio operations, the book goes on to provide ready-to-use implementations of client and server applications from simple synchronous ones to powerful multithreaded scalable solutions. Finally, you are presented with advanced topics such as implementing a chat application, implementing an HTTP client, and adding SSL support. All the samples presented in the book are ready to be used in real projects just out of the box. As well as excellent practical examples, the book also includes extended supportive theoretical material on distributed application design and construction.",193a4478f52664371394bb4ff1737dcd1f6aac1005e3a17049832ae0a53d0c21,,9781783986545,"Jan 25, 2016",packtpub.com,,Cloud & Networking,Boost.Asio C++ Network Programming Cookbook: Over 25 hands-on recipes to create robust and highly-efficient cross-platform distributed applications with the Boost.Asio library,https://www.packtpub.com/product/boost-asio-c-network-programming-cookbook/9781783986545
['Wisnu Anggoro'],"This book is for C++ Network programmers with basic knowledge of network programming, but no knowledge of how to use Boost.Asio for network programming.",f1ddfa97e1a7ff5e699fffc3f0e00cfc7fb0a04a6dfb68225ddf10e4f44e9b6a,,9781785283079,"Sep 16, 2015",packtpub.com,,Programming,Boost.Asio C++ Network Programming: Learn effective C++ network programming with Boost.Asio and become a proficient C++ network programmer,https://www.packtpub.com/product/boost-asio-c-network-programming-second-edition/9781785283079
['David da L Gouveia'],"Audio plays a fundamental role in video games. From music to sound effects or dialogue, it helps to reinforce the experience, convey the mood, and give feedback to the player. Presently, many games have achieved commercial success by incorporating game sounds that have enhanced the user experience. You can achieve this in your games with the help of the FMOD library. This book provides you with a practical guide to implementing the FMOD toolkit in your games. Getting Started with C++ Audio Programming for Game Developers is a quick and practical introduction to the most important audio programming topics that any game developer is expected to know. Whether you need to play only a few audio files or you intend to design a complex audio simulation, this book will help you get started enhancing your game with audio programs. Getting Started with C++ Audio Programming for Game Developers covers a broad range of topics ‚Äì from loading and playing audio files to simulating sounds within a virtual environment and implementing interactive sounds that react to events in the game. The book starts off with an explanation of the fundamental audio concepts, after which it proceeds to explain how to use the FMOD Ex library, how to implement a 3D audio simulation, how to use the FMOD Designer toolkit, and how best to work with multi-layered sounds with complex behaviors attached to them. The final part of the book deals with working with audio at a much lower level by manipulating audio data directly. This book will provide you with a good foundation so that you can successfully implement audio into your games and begin pursuing other advanced topics in audio programming with confidence.",bb1ceeff2d22d2be571d605f88b4962b3e01541921af143eda6746cd61696421,,9781849699099,"Aug 26, 2013",packtpub.com,,Game Development,"Getting Started with C++ Audio Programming for Game Development: Written specifically to help C++ developers add audio to their games from scratch, this book gives a clear introduction to the concepts and practical application of audio programming using the FMOD library and toolkit.",https://www.packtpub.com/product/getting-started-with-c-audio-programming-for-game-development/9781849699099
"['Whittle', 'Sherif']","Unreal Engine 4 (UE4) is a complete suite of game development tools made by game developers, for game developers. With more than 100 practical recipes, this book is a guide showcasing techniques to use the power of C++ scripting while developing games with UE4. It will start with adding and editing C++ classes from within the Unreal Editor. It will delve into one of Unreal's primary strengths, the ability for designers to customize programmer-developed actors and components. It will help you understand the benefits of when and how to use C++ as the scripting tool. With a blend of task-oriented recipes, this book will provide actionable information about scripting games with UE4, and manipulating the game and the development environment using C++. Towards the end of the book, you will be empowered to become a top-notch developer with Unreal Engine 4 using C++ as the scripting language.",8767f269d1cfa30d246f50e05f13e11b00f6bd25d0433e7be2fffe9c63c8f269,,9781785885549,"Oct 24, 2016",packtpub.com,,Game Development,Unreal Engine 4 Scripting with C++ Cookbook: Get the best out of your games by scripting them using UE4,https://www.packtpub.com/product/unreal-engine-4-scripting-with-c-cookbook/9781785885549
['Jason Turner'],,cd45110fd352e788ffb9394d05ca7516b83968939610e67d3fc2c9222d93cff6,,,2022-07-12,leanpub.com,"Level up your C++, get the tools working for you, eliminate common problems, and move on to more exciting things!","['C and C++', 'Computers and Programming']",C++ Best Practices,https://leanpub.com/cppbestpractices
['Šimon Tóth'],,852b52f2f00c551d2bb264d816ab23cbf12c748d32c71d06dfed0d87b519a8ce,,,2023-02-02,leanpub.com,The standard algorithms offer a lot of functionality. Save yourself time and effort by having a good grasp on what functionality already exists in the standard library.,['C and C++'],A Complete Guide to Standard C++ Algorithms,https://leanpub.com/cpp-algorithms-guide
"['Jacek Galowicz', 'Bartłomiej Filipek']",,a19acf311fd5b639f976e28678bd3196e30c53cea3e9f2b14c6899e16b83b7dc,,,2019-09-12,leanpub.com,"C++17 was standardised in December 2017, giving us - developers - a wealth of new features to write better code.

This book describes all significant changes in the language and the Standard Library. Thanks to many practical examples you can quickly apply the knowledge.

The paperback version @Amazon!

And in the bundle with C++ Lambda Story.",['C and C++'],C++17 in Detail,https://leanpub.com/cpp17indetail
['Nicolai M. Josuttis'],,c442a7b1c902cf80c4c2df84680887d750d2f707dd91ed24f9dcfef0b8585dda,,,2022-06-26,leanpub.com,"All new language and library features of C++17 (for those who know previous versions).

Learn how C++17 impacts day-to-day C++ programming, how to benefit in practice, how to combine new features, and how to avoid all new traps.

Hardcover version (please, prefer a local bookstore)

Paperback version

Spanish version

C++23

C++20

Bundle with C++ Move Semantics",['C and C++'],C++17 - The Complete Guide,https://leanpub.com/cpp17
['Rainer Grimm'],,ff0d8d01223bd8f976547c9a1d3a56b3842da2311d36286bf2c6e29fb4ce8fcb,,,2023-09-13,leanpub.com,"C++20 is the next big C++ standard after C++11. As C++11 did it, C++20 changes the way we program modern C++. This change is, in particular, due to the big four of C++20: ranges, coroutines, concepts, and modules.",['C and C++'],C++20,https://leanpub.com/c20
['Rainer Grimm'],,1cafa09e60b5dcc7ac463ec9711bf59ce71be43c3da25eedb3f56887ca4638c2,,,2023-03-11,leanpub.com,"With the current C++23 standard, C++ has many libraries to offer. My book's key idea is to give you concise the necessary information for all C++ standard libraries.

The book is an improved version of my German book C++ Standardbibliothek published by O'Reilly.

Persian version","['C and C++', 'Computers and Programming']",The C++ Standard Library,https://leanpub.com/cpplibrary
['Andreas Fertig'],,2244acdafdb6f482a97cca0481bac15c38dac7bbfbd91594a34ec7c5f47e1987,,,2024-02-08,leanpub.com,Get up to speed with C++20 and its most impactful features.,['C and C++'],Programming with C++20,https://leanpub.com/programming-with-cpp20
['Nicolai M. Josuttis'],,49eff6fdc102bfd78ba57e570d48b20033ce884cbab927c515ff4e76e99327aa,,,2024-08-08,leanpub.com,"All new language and library features of C++20 (for those who know previous C++ versions).

The book presents all new language and library features of C++20. Learn how this impacts day-to-day programming, to benefit in practice, to combine new features, and to avoid all new traps.

Buy early, pay less, free updates.

Other books:

C++23

C++17

C++ Move Semantics",['C and C++'],C++20 - The Complete Guide,https://leanpub.com/cpp20
['Sandor Dargo'],,c1ad40831fa2efd3efc575c56d319798147e8e0819bb48017f0f8a958c967937,,,2022-07-16,leanpub.com,"You are going to discover why templates as-is are not enough and how concepts came to the rescue. You are going to learn about how to use them in four different ways with functions, how to use them with classes, what kind of concepts are already delivered with the standard library and how to write new ones from scratch.",['C and C++'],C++ Concepts,https://leanpub.com/cppconcepts
['Pavel Yosifovich'],,9b04540a952c259dfc91270851b4ed4c8b0c1d03676e3a530e6e7b07c888ecbd,,,2024-06-22,leanpub.com,,[],"Windows 10 System Programming, Part 2",https://leanpub.com/windows10systemprogrammingpart2
"['Joel Falcou', 'Edouard Alligand']",,8c6f50dea2702f516ac4ead0aedcd43afaafd456571c687cc25d042a7e579157,,,September 2016,oreilly.com,"To say that C++ programmers embrace metaprogramming is a real stretch. Outright rejection is probably more accurate. And yet, C++ template metaprogramming is ideal for performing automatic compile-time optimization. With this example-driven ebook, you’ll learn how improved metaprogramming techniques in C++11 and C++14 can help you avoid a lot of mistakes and tedious work by making the compiler work for you. Authors Edouard Alligand and Joel Falcou show you how the process works and what it takes to build and apply a basic metaprogramming toolbox. Then comes the real payoff: you’ll learn about a set of existing metaprogramming techniques you can use to perform fast and precise metaprogramming tasks without error—including the Boost.MPL, Boost.Hana, and Brigand libraries. ",,Practical C++ Metaprogramming,https://www.oreilly.com/library/view/practical-c-metaprogramming/9781492042778/
