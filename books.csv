authors,description,hash,isbn10,isbn13,publication_date,site,tags,title,url,year
"['Stanley Lippman', 'Josée Lajoie', 'Barbara Moo']","Bestselling Programming Tutorial and Reference Completely Rewritten for the New C++11 Standard

Fully updated and recast for the newly released C++11 standard, this authoritative and comprehensive introduction to C++ will help you to learn the language fast, and to use it in modern, highly effective ways. Highlighting today’s best practices, the authors show how to use both the core language and its standard library to write efficient, readable, and powerful code.

C++ Primer, Fifth Edition, introduces the C++ standard library from the outset, drawing on its common functions and facilities to help you write useful programs without first having to master every language detail. The book’s many examples have been revised to use the new language features and demonstrate how to make the best use of them. This book is a proven tutorial for those new to C++, an authoritative discussion of core C++ concepts and techniques, and a valuable resource for experienced programmers, especially those eager to see C++11 enhancements illuminated.

Start Fast and Achieve More

Learn how to use the new C++11 language features and the standard library to build robust programs quickly, and get comfortable with high-level programming
Learn through examples that illuminate today’s best coding styles and program design techniques
Understand the “rationale behind the rules”: why C++11 works as it does
Use the extensive cross-references to help you connect related concepts and insights
Benefit from up-to-date learning aids and exercises that emphasize key points, help you to avoid pitfalls, promote good practices, and reinforce what you’ve learned

Access the source code for the extended examples from informit.com/title/0321714113

C++ Primer, Fifth Edition, features an enhanced, layflat binding, which allows the book to stay open more easily when placed on a flat surface. This special binding method—notable by a small space inside the spine—also increases durability.

Read more",a5ea2186c28e856f24804da1529d045e239b4a247abcb9d61c58a8562542256b,9780321714114,978-0321714114,"August 6, 2012",amazon,"['C++ Programming Language', 'Object-Oriented Design', 'Software Development']",C++ Primer (5th Edition),https://www.amazon.com/dp/0321714113,2012
['Bjarne Stroustrup'],"An Introduction to Programming by the Inventor of C++

Programming: Principles and Practice Using C++, Third Edition, will help anyone who is willing to work hard learn the fundamental principles of programming and develop the practical skills needed for programming in the real world. Previous editions have been used successfully by many thousands of students. This revised and updated edition

Assumes that your aim is to eventually write programs that are good enough for others to use and maintain
Focuses on fundamental concepts and techniques, rather than on obscure language-technical details
Is an introduction to programming in general, including procedural, object-oriented, and generic programming, rather than just an introduction to a programming language
Covers both contemporary high-level techniques and the lower-level techniques needed for efficient use of hardware
Will give you a solid foundation for writing useful, correct, type-safe, maintainable, and efficient code
Is primarily designed for people who have never programmed before, but even seasoned programmers have found previous editions useful as an introduction to more effective concepts and techniques
Covers a wide range of essential concepts, design and programming techniques, language features, and libraries
Uses contemporary C++ (C++20 and C++23)
Covers the design and use of both built-in types and user-defi ned types, complete with input, output, computation, and simple graphics/GUI
Offers an introduction to the C++ standard library containers and algorithms

Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.

Read more",2ca8736ac5f21065a6b33784d65ddab42329ff5ab14f43300a120e38aeccddc4,0138308683,978-0138308681,"April 22, 2024",amazon,"['Object-Oriented Software Design', 'C++ Programming Language', 'Object-Oriented Design']",Programming: Principles and Practice Using C++ (C++ In-depth),https://www.amazon.com/dp/0138308683,2024
['John Horton'],,9fabb9f104e4754bd1a248480ec3611623d950d0121bcdb0d966d09324365a6a,1838648577,978-1838648572,"October 31, 2019",amazon,"['C++ Programming Language', 'Game Programming', 'Introductory & Beginning Programming']","Beginning C++ Game Programming: Learn to program with C++ by building fun games, 2nd Edition",https://www.amazon.com/dp/1838648577,2019
['Tony Gaddis'],"For two-semester courses in the C++ programming sequence, or an accelerated one-semester course.

A clear and student-friendly way to teach the fundamentals of C++

Starting Out with C++: From Control Structures through Objectscovers control structures, functions, arrays,

and pointers before objects and classes in Tony Gaddis’s hallmark accessible, step-by-step presentation. His books help beginning students understand the important details necessary to become skilled programmers at an introductory level. Gaddis motivates the study of both programming skills and the C++ programming language by presenting all the details needed to understand the “how” and the “why”–but never losing sight of the fact that most beginners struggle with this material. His approach is gradual and highly accessible, ensuring that students understand the logic behind developing high-quality programs. As with all Gaddis texts, clear and easy-to-read code listings, concise and practical real-world examples, and an abundance of exercises appear in every chapter. Updates to the 9th Edition include revised, improved problems throughout and a new chapter featuring completely rewritten and expanded material on the Standard Template Library (STL).

Also Available with MyLab Programming.

MyLabTM Programming is an online learning system designed to engage students and improve results. MyLab Programming consists of programming exercises correlated to the concepts and objectives in this book. Through practice exercises and immediate, personalized feedback, MyLab Programming improves the programming competence of beginning students who often struggle with the basic concepts of programming languages.

Note: You are purchasing a standalone product; MyLabTM & MasteringTM does not come packaged with this content. Students, if interested in purchasing this title with MyLab & Mastering, ask your instructor for the correct package ISBN and Course ID. Instructors, contact your Pearson representative for more information.

If you would like to purchase both the physical text and MyLab & Mastering, search for:

0134544846 / 9780134544847 Starting Out with C++ from Control Structures to Objects Plus MyProgrammingLab with Pearson eText -- Access Card Package, 9/e

Package consists of:

0134484193 / 9780134484198 MyProgrammingLab with Pearson eText -- Access Card -- for Starting Out with C++ from Control Structures to Objects, 9/e
0134498372 / 9780134498379 Starting Out with C++ from Control Structures to Objects

Students can use the URL and phone number below to help answer their questions:

https://support.pearson.com/getsupport/s/

800-677-6337

Read more",80d2fef73b06301ee9c2e51ecd7c2daf4840afa370ece50b7de3d8da906d6139,9780134498379,978-0134498379,"February 13, 2017",amazon,"['C++ Programming Language', 'Computer Programming Languages']",Starting Out with C++ from Control Structures to Objects,https://www.amazon.com/dp/0134498372,2017
"['Paul Deitel', 'Harvey Deitel']","C++ How to Program presents leading-edge computing technologies in a friendly manner appropriate for introductory college course sequences, based on the curriculum recommendations of two key professional organizations–the ACM and the IEEE.

The best-selling C++ How to Program is accessible to readers with little or no programming experience, yet comprehensive enough for the professional programmer. The Deitels’ signature live-code approach presents the concepts in the context of full working programs followed by sample executions. The early objects approach gets readers thinking about objects immediately–allowing them to more thoroughly master the concepts. Emphasis is placed on achieving program clarity and building well-engineered software. Interesting, entertaining, and challenging exercises encourage students to make a difference and use computers and the Internet to work on problems. To keep readers up-to-date with leading-edge computing technologies, the Tenth Edition conforms to the C++11 standard and the new C++14 standard.


Read more",bf9cc4c9624e70aeb902c60b4098f5f17ed368f64dae87e29d05f49029350a83,9780134448237,978-0134448237,"February 29, 2016",amazon,"['C++ Programming Language', 'Computer Programming Languages']",C++ How to Program,https://www.amazon.com/dp/0134448235,2016
['Bjarne Stroustrup'],"In A Tour of C++, Third Edition, Bjarne Stroustrup provides an overview of ISO C++, C++20, that aims to give experienced programmers a clear understanding of what constitutes modern C++. Featuring carefully crafted examples and practical help in getting started, this revised and updated edition concisely covers most major language features and the major standard-library components needed for effective use.

Stroustrup presents C++ features in the context of the programming styles they support, such as object-oriented and generic programming. His tour is remarkably comprehensive. Coverage begins with the basics, then ranges widely through more advanced topics, emphasizing newer language features. This edition covers many features that are new in C++20 as implemented by major C++ suppliers, including modules, concepts, coroutines, and ranges. It even introduces some library components in current use that are not scheduled for inclusion in the standard until C++23.

This authoritative guide does not aim to teach you how to program (for that, see Stroustrup's Programming: Principles and Practice Using C++, Second Edition), nor will it be the only resource you'll need for C++ mastery (for that, see Stroustrup's The C++ Programming Language, Fourth Edition, and recommended online sources). If, however, you are a C or C++ programmer wanting greater familiarity with the current C++ language, or a programmer versed in another language wishing to gain an accurate picture of the nature and benefits of modern C++, you won't find a shorter or simpler introduction.
Read more",1b93bf19f83335db49b6af3fc2700565f80d42e1dabb44834b2c55a9ff4ad648,0136816487,978-0136816485,"September 24, 2022",amazon,"['C++ Programming Language', 'Object-Oriented Design', 'Computer & Technology Certification Guides']","Tour of C++, A (C++ In-Depth Series)",https://www.amazon.com/dp/0136816487,2022
"['Ivor Horton', 'Peter Van Weert']","Begin your programming journey with C++ , starting with the basics and progressing through step-by-step examples that will help you become a proficient C++ programmer. This book includes new features from the C++23 standard. All you need are Beginning C++23 and any recent C++ compiler and you'll soon be writing real C++ programs.
There is no assumption of prior programming knowledge. All language concepts that are explained in the book are illustrated with working program examples, and all chapters include exercises for you to test and practice your knowledge. Free source code downloads are provided for all examples from the text and solutions to the exercises.
This latest edition has been fully updated to the latest version of the language, C++23, and to all conventions and best practices of modern C++. This bookalso introduces elements of the C++ Standard Library that provide essential support for C++23. After completing this book, you will have the knowledge and skills needed to build your first C++ applications.
What You Will Learn
Begin programming with the C++23 standard
Carry out modular programming in C++
Work with arrays and loops, pointers and references, strings, and more
Write your own functions, types, and operators
Discover the essentials of object-oriented programming
Use overloading, inheritance, virtual functions, and polymorphism
Write generic function and class templates, and make them safer using concepts
Learn the ins and outs of containers, algorithms, and ranges
Use auto type declarations, exceptions, move semantics, lambda expressions, and much more
Who This Book Is For
Programmers new to C++ and those who may be looking for a refresh primer on C++ in general.
Read more",0e0feb4fcdab712ef8a2ea48b04d536c6f400c3eaea78ac994cdd7a79c085cae,1484293428,978-1484293423,"October 8, 2023",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Software Development']",Beginning C++23: From Beginner to Pro,https://www.amazon.com/dp/1484293428,2023
['Anthony J. Dos Reis'],"THERE IS AN UPDATED AND IMPROVED VERSION (THE SECOND EDITION) OF THIS BOOK.

This book provides the reader with an invaluable insight to C and C++ in particular and programming languages in general. Although the title suggests that the book has a narrow scope, in fact, just the opposite is the case: The book is an introduction to programming language design, object-oriented programming, assemblers, compilers, interpreters, linkers, computer architecture, and system programming--everything you need to know to be a master of C and C++. Included in the book are several well-defined system programming projects that support the material covered, including a machine interpreter implementation, an assembler implementation, and a linker implementation. The software package for the book supports Windows, OS X, Linux, and Raspbian.
Read more",07b17ffc1dcb1e74282749bac9a202ff6f157cf1a519e7246b27fe9cfbb4db68,1793302898,978-1793302892,"February 9, 2019",amazon,"['C Programming Language', 'C++ Programming Language', 'Computer Programming Languages']",C and C++ Under the Hood,https://www.amazon.com/dp/1793302898/,2019
['Peter Gottschling'],"Write Powerful, Modern C++ Code for Scientific, Engineering, and Embedded Applications

Discovering Modern C++, Second Edition, will help you master valuable skills for programming with C++ at nearly every level, from ""close to the hardware"" to high-level abstractions.

Updated for C++17 and C++ 20, this intensive introduction teaches C++ using realistic examples from diverse technical problem domains. Drawing on extensive experience teaching C++ to physicists, mathematicians, engineers, and students, Peter Gottschling guides you smoothly to sophisticated approaches based on advanced features.

Whatever your programming experience, you'll rapidly master increasingly powerful features, from lambdas to expression and variadic templates. Gottschling also shows you how to apply C++'s libraries: both the Standard Template Library (STL) and scientific libraries for arithmetic, linear algebra, differential equations, and graphs. Step by step, you'll learn to write clear and expressive code using object orientation, generics, metaprogramming, and procedural techniques, and master all the abstractions you need to write high-quality, well-performing software.

Quickly master core features: variables, operators, expressions, statements, functions, error handling, I/O, arrays, pointers, references, and more
Make the most of classes and object-oriented programming, from constructors/destructors to operator overloading and multiple inheritance
Apply advanced generic programming and template-based techniques
Use C++'s libraries to write more robust and powerful code more quickly
Explore metaprogramming in depth, and master cutting-edge optimization techniques
Walk through representative scientific projects, and create your own
Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.

Read more",6a89aa86805b08702de5479ce74a21f40eb2cfd518ff6d3413b573a61a0a5766,0136677649,978-0136677642,"December 17, 2021",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Microsoft Programming']",Discovering Modern C++ (C++ In-Depth Series),https://www.amazon.com/Discovering-Modern-Depth-Peter-Gottschling/dp/0136677649/,2021
"['Paul Deitel', 'Harvey Deitel']","C++ How to Program: An Objects-Natural Approach is a code-intensive, modular introduction to C++ programming. The Deitel live-code approach presents concepts using full working programs rather than code snippets so that you can immediately start to run programs as you read. Interesting, entertaining and challenging examples, exercises and projects help you see how what you're learning applies to real-world scenarios.

The 11th Edition presents new features of C++ 20 and even more hands-on application opportunities. Hundreds of new self-checks let you test your code and understanding of key concepts. New case studies and exercises focus on security, data science, ethics and more.

Read more",f301e829a17432e75e65b009dc14fb168e4276bbd4e6cd2a7d2336d9a24d60e1,,,"July 27, 2023",amazon,['Kindle eBooks'],C++ How to Program: An Objects-Natural Approach,https://www.amazon.com/dp/B0CF4TX8XG,2023
['Marc Gregoire'],"Expand your C++ knowledge quickly and efficiently with this advanced resource

In the newly revised sixth edition of Professional C++, veteran software engineer and developer Marc Gregoire delivers yet another volume that raises the bar for advanced programming manuals. Covering almost all features of the new C++ standard codenamed C++23, the book offers case studies with working code that’s been tested on Windows and Linux.

As the leading resource for dedicated and knowledgeable professionals seeking to advance their C++ skills, this book provides resources that help readers:

Master new features of the latest standard, C++23
Maximize C++ capabilities with effective design solutions
Discover little-known elements and learn about pitfalls and what practices to avoid
Grasp testing and debugging best practices
Learn about tips and tricks for efficiency and performance

C++ is a complex language. Professional C++, 6th Edition, allows dedicated practitioners to remain current and abreast of the latest developments and advances.

Read more",77c72a78c286da455ed39a6e7ac6e9099e28d4b17e133d6e78176e01ce062700,1394193173,978-1394193172,"February 13, 2024",amazon,"['C Programming Language', 'Object-Oriented Design', 'Software Development']",Professional C++ (Tech Today),https://www.amazon.com/dp/1394193173,2024
['Stephen C. Dewhurst'],"C++ Common Knowledge covers essential but commonly misunderstood topics in C++ programming and design while filtering out needless complexity in the discussion of each topic. What remains is a clear distillation of the essentials required for production C++ programming, presented in the author's trademark incisive, engaging style.
Read more",fcdfb0fe59e75d1a6dbe2790c72418d8a4872a02e71836475b4a97652e05898a,0321321928,978-0321321923,"February 28, 2005",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']",C++ Common Knowledge: Essential Intermediate Programming: Essential Intermediate Programming,https://www.amazon.com/dp/0321321928,2005
"['D. Ryan Stephens', 'Christopher Diggins', 'Jonathan Turkanis']","Despite its highly adaptable and flexible nature, C++ is also one of the more complex programming languages to learn. Once mastered, however, it can help you organize and process information with amazing efficiency and quickness.

The C++ Cookbook will make your path to mastery much shorter. This practical, problem-solving guide is ideal if you're an engineer, programmer, or researcher writing an application for one of the legions of platforms on which C++ runs. The algorithms provided in C++ Cookbook will jump-start your development by giving you some basic building blocks that you don't have to develop on your own.

Less a tutorial than a problem-solver, the book addresses many of the most common problems you're likely encounter--whether you've been programming in C++ for years or you're relatively new to the language. Here are just some of the time-consuming tasks this book contains practical solutions for:

Reading the contents of a directory
Creating a singleton class
Date and time parsing/arithmetic
String and text manipulation
Working with files
Parsing XML
Using the standard containers

Typical of O'Reilly's ""Cookbook"" series, C++ Cookbook is written in a straightforward format, featuring recipes that contain problem statements and code solutions, and apply not to hypothetical situations, but those that you're likely to encounter. A detailed explanation then follows each recipe in order to show you how and why the solution works. This question-solution-discussion format is a proven teaching method, as any fan of the ""Cookbook"" series can attest to. This book will move quickly to the top of your list of essential C++ references.

Read more",305525d0d27e362a8e16230090b121dc8ece5a817404405c2a162d47d8981839,0596007612,978-0596007614,"December 13, 2005",amazon,"['C++ Programming Language', 'Software Development', 'Computer Software']",C++ Cookbook: Solutions and Examples for C++ Programmers,https://www.amazon.com/dp/0596007612,2005
['Scott Meyers'],"“Every C++ professional needs a copy of Effective C++. It is an absolute must-read for anyone thinking of doing serious C++ development. If you’ve never read Effective C++ and you think you know everything about C++, think again.”
― Steve Schirripa, Software Engineer, Google “C++ and the C++ community have grown up in the last fifteen years, and the third edition of Effective C++ reflects this. The clear and precise style of the book is evidence of Scott’s deep insight and distinctive ability to impart knowledge.”
― Gerhard Kreuzer, Research and Development Engineer, Siemens AG

The first two editions of Effective C++ were embraced by hundreds of thousands of programmers worldwide. The reason is clear: Scott Meyers’ practical approach to C++ describes the rules of thumb used by the experts ― the things they almost always do or almost always avoid doing ― to produce clear, correct, efficient code.

The book is organized around 55 specific guidelines, each of which describes a way to write better C++. Each is backed by concrete examples. For this third edition, more than half the content is new, including added chapters on managing resources and using templates. Topics from the second edition have been extensively revised to reflect modern design considerations, including exceptions, design patterns, and multithreading.

Important features of Effective C++ include:

Expert guidance on the design of effective classes, functions, templates, and inheritance hierarchies.
Applications of new “TR1” standard library functionality, along with comparisons to existing standard library components.
Insights into differences between C++ and other languages (e.g., Java, C#, C) that help developers from those languages assimilate “the C++ way” of doing things.
Read more",70c68492b6a2b2679f758a8ad30c0f0aca69eb553fc25733a3629dfe17a82b9e,0321334876,978-0321334879,"May 12, 2005",amazon,"['C++ Programming Language', 'Software Development', 'Computer Software']",Effective C++: 55 Specific Ways to Improve Your Programs and Designs,https://www.amazon.com/dp/0321334876,2005
['Scott Meyers'],"“This is Effective C++ volume three – it’s really that good.”
– Herb Sutter, independent consultant and secretary of the ISO/ANSI C++ standards committee “There are very few books which all C++ programmers must have. Add Effective STL to that list.”
– Thomas Becker, Senior Software Engineer, Zephyr Associates, Inc., and columnist, C/C++ Users Journal

C++’s Standard Template Library is revolutionary, but learning to use it well has always been a challenge. Until now. In this book, best-selling author Scott Meyers (Effective C++, and More Effective C++) reveals the critical rules of thumb employed by the experts – the things they almost always do or almost always avoid doing – to get the most out of the library.

Other books describe what’s in the STL. Effective STL shows you how to use it. Each of the book’s 50 guidelines is backed by Meyers’ legendary analysis and incisive examples, so you’ll learn not only what to do, but also when to do it – and why.

Highlights of Effective STL include:

Advice on choosing among standard STL containers (like vector and list), nonstandard STL containers (like hash_set and hash_map), and non-STL containers (like bitset).
Techniques to maximize the efficiency of the STL and the programs that use it.
Insights into the behavior of iterators, function objects, and allocators, including things you should not do.
Guidance for the proper use of algorithms and member functions whose names are the same (e.g., find), but whose actions differ in subtle (but important) ways.
Discussions of potential portability problems, including straightforward ways to avoid them.

Like Meyers’ previous books, Effective STL is filled with proven wisdom that comes only from experience. Its clear, concise, penetrating style makes it an essential resource for every STL programmer.

Read more",dce5c8595ba7e93624171dd403bdc902163ba553d7c310576bbef64e9df8d8f9,0201749629,978-0201749625,"June 6, 2001",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']",Effective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library,https://www.amazon.com/dp/0201749629,2001
['Herb Sutter'],"The puzzles and problems in Exceptional C++ not only entertain, they will help you hone your skills to become the sharpest C++ programmer you can be. Many of these problems are culled from the famous Guru of the Week feature of the Internet newsgroup comp.lang.c++, moderated, expanded and updated to conform to the official ISO/ANSI C++ Standard.
Try your skills against the C++ masters and come away with the insight and experience to create more efficient, effective, robust, and portable C++ code.
Read more",f7bad34d18525baa92bd67a47d5736988afdddde5486c7036f13f3153185e96a,0201615622,978-0201615623,"November 18, 1999",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']","Exceptional C++: 47 Engineering Puzzles, Programming Problems, and Solutions",https://www.amazon.com/dp/0201615622,1999
['Herb Sutter'],"Picks up where the widely acclaimed Exceptional C++ leaves off, providing successful strategies for solving real-world problems in C++. Promotes the practical and pragmatic understanding of the language while showing you how to write exceptional code in C++. Softcover.
Read more",2114b675c45e67680f95c20f2d980c89f03ab94906f28b44745cdff4820a5364,020170434X,978-0201704341,"December 17, 2001",amazon,"['C++ Programming Language', 'Computer Software', 'Marketing']","More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions",https://www.amazon.com/dp/020170434X,2001
"['Herb Sutter', 'John Fuller']","Software ""style"" is about finding the perfect balance between overhead and functionality... elegance and maintainability... flexibility and excess. In Exceptional C++ Style, legendary C++ guru Herb Sutter presents 40 new programming scenarios designed to analyze not only the what but the why and help you find just the right balance in your software.

Organized around practical problems and solutions, this book offers new insight into crucial C++ details and interrelationships, and new strategies for today's key C++ programming techniques--including generic programming, STL, exception safety, and more. You'll find answers to questions like:

What can you learn about library design from the STL itself?
How do you avoid making templated code needlessly non-generic?
Why shouldn't you specialize function templates? What should you do instead?
How does exception safety go beyond try and catch statements?
Should you use exception specifications, or not?
When and how should you ""leak"" the private parts of a class?
How do you make classes safer for versioning?
What's the real memory cost of using standard containers?
How can using const really optimize your code?
How does writing inline affect performance?
When does code that looks wrong actually compile and run perfectly, and why should you care?
What's wrong with the design of std::string?

Exceptional C++ Style will help you design, architect, and code with style--and achieve greater robustness and performance in all your C++ software.





Read more",d283abeeb34e26348a3109c0dc904e0471f4f6ed6a7b3cd951d5a39eec6db261,0201760428,978-0201760422,"August 2, 2004",amazon,"['C++ Programming Language', 'Microsoft Programming', 'Computer Software']","Exceptional C++ Style: 40 New Engineering Puzzles, Programming Problems, and Solutions",https://www.amazon.com/dp/0201760428,2004
"['Herb Sutter', 'Andrei Alexandrescu', 'John Fuller']","Consistent, high-quality coding standards improve software quality, reduce time-to-market, promote teamwork, eliminate time wasted on inconsequential matters, and simplify maintenance. Now, two of the world's most respected C++ experts distill the rich collective experience of the global C++ community into a set of coding standards that every developer and development team can understand and use as a basis for their own coding standards.

The authors cover virtually every facet of C++ programming: design and coding style, functions, operators, class design, inheritance, construction/destruction, copying, assignment, namespaces, modules, templates, genericity, exceptions, STL containers and algorithms, and more. Each standard is described concisely, with practical examples. From type definition to error handling, this book presents C++ best practices, including some that have only recently been identified and standardized-techniques you may not know even if you've used C++ for years. Along the way, you'll find answers to questions like

What's worth standardizing--and what isn't?
What are the best ways to code for scalability?
What are the elements of a rational error handling policy?
How (and why) do you avoid unnecessary initialization, cyclic, and definitional dependencies?
When (and how) should you use static and dynamic polymorphism together?
How do you practice ""safe"" overriding?
When should you provide a no-fail swap?
Why and how should you prevent exceptions from propagating across module boundaries?
Why shouldn't you write namespace declarations or directives in a header file?
Why should you use STL vector and string instead of arrays?
How do you choose the right STL search or sort algorithm?
What rules should you follow to ensure type-safe code?

Whether you're working alone or with others, C++ Coding Standards will help you write cleaner code--and write it faster, with fewer hassles and less frustration.




Read more",aae3cc60f81ecfa9f217dabad8b968ce37404ec7d3a1d838a5d49c971d120ab1,9780321113580,978-0321113580,"October 25, 2004",amazon,"['C++ Programming Language', 'Software Development', 'Computer Software']","C++ Coding Standards: 101 Rules, Guidelines, and Best Practices",https://www.amazon.com/dp/0321113586,2004
['Bjarne Stroustrup'],"The new C++11 standard allows programmers to express ideas more clearly, simply, and directly, and to write faster, more efficient code. Bjarne Stroustrup, the designer and original implementer of C++, has reorganized, extended, and completely rewritten his definitive reference and tutorial for programmers who want to use C++ most effectively.

The C++ Programming Language, Fourth Edition, delivers meticulous, richly explained, and integrated coverage of the entire language―its facilities, abstraction mechanisms, standard libraries, and key design techniques. Throughout, Stroustrup presents concise, “pure C++11” examples, which have been carefully crafted to clarify both usage and program design. To promote deeper understanding, the author provides extensive cross-references, both within the book and to the ISO standard.

New C++11 coverage includes

Support for concurrency
Regular expressions, resource management pointers, random numbers, and improved containers
General and uniform initialization, simplified for-statements, move semantics, and Unicode support
Lambdas, general constant expressions, control over class defaults, variadic templates, template aliases, and user-defined literals
Compatibility issues

Topics addressed in this comprehensive book include

Basic facilities: type, object, scope, storage, computation fundamentals, and more
Modularity, as supported by namespaces, source files, and exception handling
C++ abstraction, including classes, class hierarchies, and templates in support of a synthesis of traditional programming, object-oriented programming, and generic programming
Standard Library: containers, algorithms, iterators, utilities, strings, stream I/O, locales, numerics, and more
The C++ basic memory model, in depth

This fourth edition makes C++11 thoroughly accessible to programmers moving from C++98 or other languages, while introducing insights and techniques that even cutting-edge C++11 programmers will find indispensable.

This is a hardcover version of the Fourth Edition. Content in this hardcover and the paperback version is identical.

This book features an enhanced, layflat binding, which allows the book to stay open more easily when placed on a flat surface. This special binding method―noticeable by a small space inside the spine―also increases durability.

Read more",3f2ecfa33c7e61a9a79719394e3726e4988aa29a760d2b771ab7aab6d6ec21ad,027596776X,978-0321958327,"July 24, 2013",amazon,"['C++ Programming Language', 'Computer Programming Languages']","C++ Programming Language, The",https://www.amazon.com/dp/0321958322,2013
['Nicolai Josuttis'],,094f51bba087502ef9584a84b115fe33df6fe2986c6ad04b8b85083d3278ae6d,0321623215,978-0321623218,"March 30, 2012",amazon,"['C++ Programming Language', 'Computer Programming Languages']","C++ Standard Library, The: A Tutorial and Reference",https://www.amazon.com/dp/0321623215,2012
"['Angelika Langer', 'Klaus Kreft']","Provides a comprehensive description of, and reference to, the iostreams and locales classes, showing how to put them ot use and offering advanced information on customizing and extending their basic operation. DLC: C++ (Computer program language)
Read more",b03e9fec7d64bdfa4b011da3ec792afda7c7f2fe3ae87b0ac121c2724bc6fb1d,0201183951,978-0201183955,"January 1, 2000",amazon,"['C++ Programming Language', 'Computer Software', 'Mathematics']",Standard C++ Iostreams and Locales: Advanced Programmer's Guide and Reference,https://www.amazon.com/dp/0201183951,2000
['Nicolai M. Josuttis'],"All aspects of C++ Move Semantics.

Move semantics, introduced with C++11, has become a hallmark of modern C++ programming. However, it also complicates the language in many ways. Even after several years of support of move semantics experienced programmers struggle with all the details of move semantics. And style guides still don't recommend the right consequences for programming even of trivial classes. Time to explain all aspects of C++ move semantics in detail.

This book teaches C++ move semantics. Starting from the basic principles it motivates and explains all the corner cases of move semantics so that you as a programmer can use move semantics right. The book is valuable for those that are beginning to learn about move semantics and is essential for those that are using it already.

You will learn:

Motivation and terminology of move semantics
How and why you implicitly benefit from move semantics
How to explicitly benefit from move semantics
All traps and how to deal with them
All consequences for your programming style

The focus lies on the application of the described features in practice. Compelling examples and useful background information help to understand and improve code from trivial classes up to generic foundation libraries and frameworks.

""I thought I understood move semantics but I didn't really! I learned a lot in your book.""
(Jonathan Boccara)

""This is the book I’ve needed for a long time.""
(Rob Bernstein)

""Sometimes I think I have a better grasp on entanglement & quantum teleportation than I do in some weird C++ move semantics. To paraphrase Feynman: If you think you understand C++ move semantics, you don't understand C++ move semantics. Read this book.""
(Victor Ciura)

Read more",f13e92422a9be5cf224d7236c069700921c23af5b3b78477b3cc4964307dc057,3967309002,978-3967309003,"August 30, 2020",amazon,"['C++ Programming Language', 'Schools & Teaching']",C++ Move Semantics - The Complete Guide: First Edition,https://www.amazon.com/dp/3967309002,2020
['Ivan Cukic'],,56b9b87c4e67c56cb11aeae535d665a2337dc9c86e7e3f96c2c5e35bfaca8ee8,1617293814,978-1617293818,"November 19, 2018",amazon,"['C Programming Language', 'C++ Programming Language', 'Computer Programming Languages']",Functional Programming in C++: How to improve your C++ programs using functional techniques,https://www.amazon.com/dp/1617293814,2018
"['Björn Andrist', 'Viktor Sehr']",,2f61ddf3ce322925d50ef55de84b2bce50fe0e57b5c2d3754aa9ae4b6ea3937f,1839216549,978-1839216541,"December 21, 2020",amazon,"['Parallel Computer Programming', 'Memory Management Algorithms', 'C++ Programming Language']","C++ High Performance, Second Edition: Master the art of optimizing the functioning of your C++ code",https://www.amazon.com/dp/1839216549,2020
['Bill Blunden'],"Memory Management: Algorithms and Implementation in C/C++ presents several concrete implementations of garbage collection and explicit memory management algorithms. Every implementation is complemented by an in-depth presentation of theory, followed by benchmark tests, a complete listing of C/C++ source code, and a discussion of each implementation’s trade-offs.Find out how memory is managed at the hardware level by the processor. Discover the ways in which different operating systems take advantage of processor facilities to provide memory services via the system call interface. Understand how development libraries and run-time systems build upon the operating system services to manage memory on behalf of user applications. Learn about five complete memory management subsystems that utilize both explicit and automatic collection algorithms.
Read more",81c4c4fde5862b1e16a24f10e0ac595dac6efc61ba21b1ad3b098e4e6aa20fe0,1556223471,978-1556223471,"October 18, 2002",amazon,"['Memory Management Algorithms', 'C Programming Language', 'C++ Programming Language']",Memory Management Algorithms and Implementation in C/C++ (Windows Programming/Development),https://www.amazon.com/dp/1556223471,2002
['Antony Polukhin'],,184ddefbe27faaf5d551b02b97e13f6e17ebb16108c2cd5d828e140e43a01ff7,,,"August 30, 2017",amazon,"['Parallel Computer Programming', 'C++ Programming', 'C++ Programming Language']",Boost C++ Application Development Cookbook - Second Edition: Recipes to simplify your application development,https://www.amazon.com/dp/B06Y2WTZPR,2017
['Fedor G. Pikus'],,320ac7c1997cf0cdd377886983133d81a06a4d66ec99f789a5553ee196c21c7b,1800208111,978-1800208117,"October 22, 2021",amazon,"['C++ Programming Language', 'Computer Systems Analysis & Design', 'Software Development']",The Art of Writing Efficient Programs: An advanced programmer's guide to efficient hardware utilization and compiler optimizations using C++ examples,https://www.amazon.com/dp/1800208111,2021
"['J. Davidson', 'Kate Gregory']","Discover the Beauty of Modern C++

"" Beautiful C++ presents the C++ Core Guidelines from a developer's point of view with an emphasis on what benefits can be obtained from following the rules and what nightmares can result from ignoring them. For true geeks, it is an easy and entertaining read. For most software developers, it offers something new and useful.""
--Bjarne Stroustrup, inventor of C++ and co-editor of the C++ Core Guidelines

Writing great C++ code needn't be difficult. The C++ Core Guidelines can help every C++ developer design and write C++ programs that are exceptionally reliable, efficient, and well-performing. But the Guidelines are so jam-packed with excellent advice that it's hard to know where to start. Start here, with Beautiful C++.

Expert C++ programmers Guy Davidson and Kate Gregory identify 30 Core Guidelines you'll find especially valuable and offer detailed practical knowledge for improving your C++ style. For easy reference, this book is structured to align closely with the official C++ Core Guidelines website.

Throughout, Davidson and Gregory offer useful conceptual insights and expert sample code, illuminate proven ways to use both new and longstanding language features more successfully, and show how to write programs that are more robust and performant by default.

Avoid ""bikeshedding"": stop wasting valuable time on trivia
Don't hurt yourself by writing code that will cause problems later
Know which legacy features to avoid and the modern features to use instead
Use newer features properly, to get their benefits without creating new problems
Default to higher-quality code that's statically type-safe, leak resistant, and easier to evolve
Use the Core Guidelines with any modern C++ version: C++20, C++17, C++14, or C++11

There's something here to improve virtually every program you write, design, or maintain.

For ease of experimentation, all sample code is available on Compiler Explorer at https://godbolt.org/z/cg30-ch0.0.

Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.

Read more",1d97064100c861f8c495b83a57ddd1b23027893b9ac06651d13cc20d0904f1c3,0231193742,978-0231193740,"December 16, 2021",amazon,"['C++ Programming Language', 'Computer Programming Languages']","Beautiful C++: 30 Core Guidelines for Writing Clean, Safe, and Fast Code",https://www.amazon.com/dp/0137647840,2021
"['David Vandevoorde', 'Nicolai Josuttis', 'Douglas Gregor']","Templates are among the most powerful features of C++, but they remain misunderstood and underutilized, even as the C++ language and development community have advanced. In C++ Templates, Second Edition, three pioneering C++ experts show why, when, and how to use modern templates to build software that’s cleaner, faster, more efficient, and easier to maintain.

Now extensively updated for the C++11, C++14, and C++17 standards, this new edition presents state-of-the-art techniques for a wider spectrum of applications. The authors provide authoritative explanations of all new language features that either improve templates or interact with them, including variadic templates, generic lambdas, class template argument deduction, compile-time if, forwarding references, and user-defined literals. They also deeply delve into fundamental language concepts (like value categories) and fully cover all standard type traits.

The book starts with an insightful tutorial on basic concepts and relevant language features. The remainder of the book serves as a comprehensive reference, focusing first on language details and then on coding techniques, advanced applications, and sophisticated idioms. Throughout, examples clearly illustrate abstract concepts and demonstrate best practices for exploiting all that C++ templates can do.


Understand exactly how templates behave, and avoid common pitfalls
Use templates to write more efficient, flexible, and maintainable software
Master today’s most effective idioms and techniques
Reuse source code without compromising performance or safety
Benefit from utilities for generic programming in the C++ Standard Library
Preview the upcoming concepts feature

The companion website, tmplbook.com, contains sample code and additional updates.

Read more",46656ad4928158283def7eb6a22c65f17b8c92853eb40f182ba2601fb4c0c1d2,0321714121,978-0321714121,"September 8, 2017",amazon,"['C++ Programming Language', 'Computer Programming Languages']",C++ Templates: The Complete Guide,https://www.amazon.com/dp/0321714121,2017
['Davide Di Gennaro'],"Advanced Metaprogramming in Classic C++ aims to be both an introduction and a reference to C++ template metaprogramming (TMP); TMP is presented in the book as a set of techniques that will bring a new style in C++ and make code exceptionally clear and efficient. The book deals with language aspects, design patterns, examples and applications (seen as case studies). Special emphasis is put on small reusable techniques that will improve the quality of daily work.

What makes the book exceptional is the level of understanding of the concepts involved imparted by the author. This is not just a rote overview of metaprogramming. You will truly understand difficult topics like static assertions, how to write metafunctions, overload resolution, lambda expressions, and many others. More than that, you will work through them with practical examples guided by the author's frank explanations. This book requires you to think and to learn and to understand the language so that youcan program at a higher level.

Read more",d6c75355759850670d59e8dca75f7aa543f7760ffd5dfbff0c53fcfa623c6565,,,"May 8, 2015",amazon,"['Compiler Design', 'Software Programming Compilers', 'C++ Programming']",Advanced Metaprogramming in Classic C++,https://www.amazon.com/dp/B01JCOFWD4,2015
['Marius Bancila'],"Understand how to use modern C++ templates for writing maintainable, robust, and fast software

Key Features
Grasp the fundamentals of and learn to write effective C++ templates
Get up to speed with the latest C++20 template features such as constraints and concepts
Explore different patterns and idioms to integrate templates in your program design
Book Description

Learn how the metaprogramming technique enables you to create data structures and functions that allow computation to happen at compile time. With this book, you'll realize how templates help you avoid writing duplicate code and are key to creating generic libraries, such as the standard library or Boost, that can be used in a multitude of programs.

The introductory chapters of this book will give you insights into the fundamentals of templates and metaprogramming. You'll then move on to practice writing complex templates and exploring advanced concepts such as template recursion, template argument deduction, forwarding references, type traits, and conditional compilation. Along the way, you'll learn how to write variadic templates and how to provide requirements to the template arguments with C++20 constraints and concepts. Finally, you'll apply your knowledge of C++ metaprogramming templates to implement various metaprogramming patterns and techniques.

By the end of this book, you'll have learned how to write effective templates and implement metaprogramming in your everyday programming journey.

What you will learn
Understand the syntax for all types of templates
Discover how specialization and instantiation works
Get to grips with template argument deduction and forwarding references
Write variadic templates with ease
Become familiar with type traits and conditional compilation
Restrict template arguments in C++20 with constraints and concepts
Implement patterns such as CRTP, mixins, and tag dispatching
Who this book is for

This book is for beginner-to-intermediate C++ developers who want to learn about template metaprogramming as well as advanced C++ developers looking to get up to speed with the new C++20 features related to templates and the the various idioms and patterns. Basic C++ coding experience is necessary to get started with this book.

Table of Contents
Introduction to Templates
Template Fundamentals
Variadic Templates
Advanced Template Concepts
Type Traits and Conditional Compilation
Concepts and Constraints
Patterns and Idioms
Ranges and Algorithms
The Ranges Library
Appendix
Read more",01ff4dfc760eab4950ee07dfe6c2b2c9cc3646999318d6b59d5fe237d06501fc,,,"August 19, 2022",amazon,"['C++ Programming', 'C++ Programming Language', 'Object-Oriented Design']",Template Metaprogramming with C++: Learn everything about C++ templates and unlock the power of template metaprogramming,https://www.amazon.com/dp/B09ZHZFTKV,2022
['Anthony Williams'],,da1134f9ff8235e8dfca4b34b30a1aee39b87e39acaf158cf9022d725f530e52,1617294691,978-1617294693,"February 10, 2019",amazon,"['Parallel Computer Programming', 'C Programming Language', 'C++ Programming Language']",C++ Concurrency in Action,https://www.amazon.com/dp/1617294691,2019
"['Praseed Pai', 'Peter Abraham']",,84741cb1961dc4700e6e7449a0c7e0313d13243537a5e3f4cc102c4436f43a93,1788629779,978-1788629775,"June 29, 2018",amazon,['Microsoft Programming'],C++ Reactive Programming,https://www.amazon.com/dp/1788629779,2018
"['Maurice Herlihy', 'Nir Shavit', 'Victor Luchangco']","The Art of Multiprocessor Programming, Second Edition, provides users with an authoritative guide to multicore programming. This updated edition introduces higher level software development skills relative to those needed for efficient single-core programming, and includes comprehensive coverage of the new principles, algorithms, and tools necessary for effective multiprocessor programming. The book is an ideal resource for students and professionals alike who will benefit from its thorough coverage of key multiprocessor programming issues.
Features new exercises developed for instructors using the text, with more algorithms, new examples, and other updates throughout the book
Presents the fundamentals of programming multiple threads for accessing shared memory
Explores mainstream concurrent data structures and the key elements of their design, as well as synchronization techniques, from simple locks to transactional memory systems
Read more",c86d847230dee982130b66bc6f56a8b4f97ef02b22ddd5cfc04d4b93289c7f50,9780124159501,978-0124159501,"October 27, 2020",amazon,"['Software Design & Engineering', 'Software Development', 'Microsoft Programming']",The Art of Multiprocessor Programming,https://www.amazon.com/dp/0124159508,2020
"['Rainer Grimm', 'Beatrix Jaud-Grimm']","C++11 is the first C++ standard that deals with concurrency. The story goes on with C++17, C++20, and will continue with C++23. I'll give you a detailed insight into the current and the upcoming concurrency in C++. This insight includes the theory and a lot of practice.

C++11 and C++14 have the basic building blocks for creating concurrent or parallel programs.
With C++17, we got the parallel algorithms of the Standard Template Library (STL). That means most of the algorithms of the STL can be executed sequentially, in parallel, or vectorized.
The concurrency story in C++ goes on. With C++20, we got coroutines, atomic smart pointers, semaphores, latches, and barriers.
C++23 supports the first concrete coroutine: std::generator.
With future C++ standards, we can hope for executors, extended futures, transactional memory, and more.
Read more",0377ca3e099c32e4cad7cca4ea71e8fca472f2a1ae0ce8962561caa5f9848fc0,,979-8873420933,"January 20, 2024",amazon,['C++ Programming Language'],Concurrency with Modern C++: What every professional C++ programmer should know about concurrency.,https://www.amazon.com/dp/B0CT41Q1FF,2024
"['Randal Bryant', ""David O'Hallaron""]",,d538b29d8b4a5f48f2bca696ab0d86aeb590aa3a0eea3742b2414250966fabc2,013409266X,978-0134092669,"March 2, 2015",amazon,['Computer Science'],Computer Systems: A Programmer's Perspective,https://www.amazon.com/dp/013409266X,2015
"['Bertil Schmidt Ph.D.', 'Jorge Álvaro Gonzalez-Martinez MD PhD', 'Christian Hundt']","Parallel Programming: Concepts and Practice provides an upper level introduction to parallel programming. In addition to covering general parallelism concepts, this text teaches practical programming skills for both shared memory and distributed memory architectures. The authors’ open-source system for automated code evaluation provides easy access to parallel computing resources, making the book particularly suitable for classroom settings.

Covers parallel programming approaches for single computer nodes and HPC clusters: OpenMP, multithreading, SIMD vectorization, MPI, UPC++
Contains numerous practical parallel programming exercises
Includes access to an automated code evaluation tool that enables students the opportunity to program in a web browser and receive immediate feedback on the result validity of their program
Features an example-based teaching of concept to enhance learning outcomes
Read more",13605062a95d0e9146b0df7e327960742f59d3173c144afc8284c56be9864a8e,9780128498903,978-0128498903,"November 27, 2017",amazon,"['Parallel Computer Programming', 'Information Theory', 'Computer Algorithms']",Parallel Programming: Concepts and Practice,https://www.amazon.com/dp/0128498900,2017
['Dmytro Kedyk'],"Programmers use algorithms and data structures all the time, usually through numerous available APIs. Ideally an algorithm is correct, easy to understand, applicable to many problems, efficient, and free of intellectual property claims. This book covers algorithms and data structures learned in an algorithms class and many that aren't, including statistical algorithms, external memory algorithms, numerical methods, optimization, string algorithms, and data compression.

About a fourth of the book is devoted to machine learning. There is much more theory than in the rest of the book because in machine learning relevant theory is more practical than algorithms. New learning algorithms are proposed often, and it's easy to get lost without understanding how learning actually works. In particular, getting comfortable with the concept of estimation error substantially improves the ability to reason about statistical algorithms.

Another fourth is about numerical algorithms. Separate chapters cover matrix algorithms (such as eigenvalue calculation for spectral clustering), working with functions (integration, root finding, etc.), and optimization (both continuous and convex).

Expect to learn something new in every chapter. Many topics appear only in specialized books and papers, including collections of random number generators and hash functions for various use cases, priority queues that allow random access for applications like Djikstra's shortest path algorithm, the simplex method for linear programming, efficient dictionaries for variable-length keys, Monte Carlo and bootstrap methods for statistical computing, top-performing learning algorithms such as random forest, etc. One of the goals of the book is answering all questions you might have had since taking an algorithms class.

Algorithm descriptions have tested C++ code, illustrations, performance analysis, and suggestions for optimizations and extensions. Still, the book is advanced, requiring some algorithmic maturity. After working through it, you will know more about algorithms and machine learning than before, even if you are already an expert. This is the book the author wishes he had when he started studying algorithms.

Read more",b7765ed058b78d391d2b8e34809eaa14902284aef2658eab826053314a795f2c,,979-8605325307,"December 8, 2020",amazon,"['Programming Algorithms', 'Mathematical Analysis', 'Mathematics']",Implementing Useful Algorithms in C++,https://www.amazon.com/dp/B08PXHJCXY,2020
"['Robert Sedgewick', 'Peter Gordon']","Software developers and computer scientists have eagerly awaited this comprehensive revision of Robert Sedgewick's landmark texts on algorithms for C++. Sedgewick has completely revamped all five sections, illuminating today's best algorithms for an exceptionally wide range of tasks. This shrink-wrapped package brings together Algorithms in C++, Third Edition, Parts 1-4 and his new Algorithms in C++, Third Edition, Part 5. Together, these books are the most definitive, up-to-date, and practical algorithms resource available. The first book introduces fundamental concepts associated with algorithms; then covers data structures, sorting, and searching. The second book focuses entirely on graphing algorithms, which are critical for a wide range of applications, including network connectivity, circuit design, scheduling, transaction processing, and resource allocation. Sedgewick focuses on practical applications, giving readers all the information, diagrams, and real (not pseudo-) code they need to confidently implement, debug, and use the algorithms he presents. Together, these books present nearly 2,000 new exercises, hundreds of new figures, and dozens of new programs.

Read more",4872bb2793b7771185ad6bcd13392c46793a2a163f5d8a6881fcd27869f59eec,020172684X,978-0201726848,"December 28, 2001",amazon,[],"Bundle of Algorithms in C++, Parts 1-5: Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms",https://www.amazon.com/dp/020172684X,2001
"['Michael T. Goodrich', 'Roberto Tamassia', 'David M. Mount']","This second edition of Data Structures and Algorithms in C++ is designed to provide an introduction to data structures and algorithms, including their design, analysis, and implementation. The authors offer an introduction to object-oriented design with C++ and design patterns, including the use of class inheritance and generic programming through class and function templates, and retain a consistent object-oriented viewpoint throughout the book.

This is a “sister” book to Goodrich & Tamassia’s Data Structures and Algorithms in Java, but uses C++ as the basis language instead of Java. This C++ version retains the same pedagogical approach and general structure as the Java version so schools that teach data structures in both C++ and Java can share the same core syllabus.

In terms of curricula based on the IEEE/ACM 2001 Computing Curriculum, this book is appropriate for use in the courses CS102 (I/O/B versions), CS103 (I/O/B versions), CS111 (A version), and CS112 (A/I/O/F/H versions).

Read more",df3d24a407d9fdb35e0851c497d7fddc3eee9b64647a279b0547715ab5fe9a4e,0470383275,978-0470383278,"February 22, 2011",amazon,"['Data Structure and Algorithms', 'C++ Programming Language', 'Computer Programming Languages']",Data Structures and Algorithms in C++,https://www.amazon.com/dp/0470383275,2011
['Mark Weiss'],"Data Structures and Algorithm Analysis in C++ is an advanced algorithms book that bridges the gap between traditional CS2 and Algorithms Analysis courses.


As the speed and power of computers increases, so does the need for effective programming and algorithm analysis. By approaching these skills in tandem, Mark Allen Weiss teaches readers to develop well-constructed, maximally efficient programs using the C++ programming language.

This book explains topics from binary heaps to sorting to NP-completeness, and dedicates a full chapter to amortized analysis and advanced data structures and their implementation. Figures and examples illustrating successive stages of algorithms contribute to Weiss’ careful, rigorous and in-depth analysis of each type of algorithm.

Read more",c6d25cdbedb799b78280d9fcbd56b635ba0a96ec39f287ef8c16158b18bf5b4c,013284737X,978-0132847377,"June 13, 2013",amazon,"['Computer Programming Structured Design', 'C++ Programming Language', 'Computer Systems Analysis & Design']",Data Structures & Algorithm Analysis in C++,https://www.amazon.com/dp/013284737X,2013
['Henry Warren'],"In Hacker’s Delight, Second Edition, Hank Warren once again compiles an irresistible collection of programming hacks: timesaving techniques, algorithms, and tricks that help programmers build more elegant and efficient software, while also gaining deeper insights into their craft. Warren’s hacks are eminently practical, but they’re also intrinsically interesting, and sometimes unexpected, much like the solution to a great puzzle. They are, in a word, a delight to any programmer who is excited by the opportunity to improve.





Extensive additions in this edition include

A new chapter on cyclic redundancy checking (CRC), including routines for the commonly used CRC-32 code
A new chapter on error correcting codes (ECC), including routines for the Hamming code
More coverage of integer division by constants, including methods using only shifts and adds
Computing remainders without computing a quotient
More coverage of population count and counting leading zeros
Array population count
New algorithms for compress and expand
An LRU algorithm
Floating-point to/from integer conversions
Approximate floating-point reciprocal square root routine
A gallery of graphs of discrete functions
Now with exercises and answers .

Read more",1a083c4123b262f58427c7eb5fc4196ad413274353c66c707112fb84510edadc,0321842685,978-0321842688,"September 25, 2012",amazon,"['Computer Algorithms', 'Programming Algorithms', 'Computer Hacking']",Hacker's Delight,https://www.amazon.com/dp/0321842685,2012
"['Adnan Aziz', 'Tsung-Hsien Lee', 'Amit Prakash']","This is the C++ version of our book. See the website for links to the Java version, as well as to a version that uses larger fonts. Have you ever...

Wanted to work at an exciting futuristic company?
Struggled with an interview problem that could have been solved in 15 minutes?
Wished you could study real-world computing problems?

If so, you need to read Elements of Programming Interviews (EPI).

EPI is your comprehensive guide to interviewing for software development roles.

The core of EPI is a collection of over 250 problems with detailed solutions. The problems are representative of interview questions asked at leading software companies. The problems are illustrated with 200 figures, 300 tested programs, and 150 additional variants.

The book begins with a summary of the nontechnical aspects of interviewing, such as strategies for a great interview, common mistakes, perspectives from the other side of the table, tips on negotiating the best offer, and a guide to the best ways to use EPI. We also provide a summary of data structures, algorithms, and problem solving patterns.

Coding problems are presented through a series of chapters on basic and advanced data structures, searching, sorting, algorithm design principles, and concurrency. Each chapter stars with a brief introduction, a case study, top tips, and a review of the most important library methods. This is followed by a broad and thought-provoking set of problems.

A practical, fun approach to computer science fundamentals, as seen through the lens of common programming interview questions.
Jeff Atwood/Co-founder, Stack Overflow and Discourse

Read more",c986176888dc575e9d7b429e79166987d3be696b2a3161d5db0ce60034dc39bf,1479274836,978-1479274833,"October 11, 2012",amazon,"['Discrete Mathematics', 'C++ Programming Language', 'Computer Software']",Elements of Programming Interviews: The Insiders' Guide,https://www.amazon.com/dp/1479274836,2012
"['Paul Deitel', 'Harvey Deitel']","In C++11 for Programmers, the Deitels bring their proven Live Code approach to teaching today’s powerful new version of the C++ language. Like all Deitel Developer titles, they teach the best way possible: via hundreds of complete example C++ programs, with thousands of lines of downloadable C++ source code.

Unlike other C++11 books, this guide teaches robust, best-practice coding practices that fully support the CERT® Coordination Center’s authoritative secure coding standards. To help you write programs that are even more secure, the Deitels also introduce C++11’s new non-deterministic random-number generation capabilities. Using all these techniques, you can write industrial-strength C+11 code that stands up to attacks from viruses, worms, and other forms of malware.

Ideal for anyone who’s worked with at least one programming language before, C++11 for Programmers utilizes a proven “early objects” approach, emphasizing program clarity, software reuse, and component-oriented software construction. In addition to the core language, it will help you take advantage of the newest standard libraries and the newest language extensions. Coverage includes many new C++11 features, including smart pointers, regular expressions, shared_ptr and weak_ptr, and more.

This book contains 240 complete C++11 programs (more than 15,000 lines of downloadable code). All code has been thoroughly tested on three popular industrial-strength C++11 compilers: GNU C++ 4.7, Microsoft® Visual C++® 2012, and Apple® LLVM in Xcode® 4.5.

Read more",b06b893e0a67ccc77bff48ac5dab7304a8335030c5372bad1f600f5f13297dc4,0133439852,978-0133439854,"January 1, 2014",amazon,"['C# Programming', 'C++ Programming Language', 'Computer Programming Languages']",C++11 for Programmers (Deitel Developer),https://www.amazon.com/dp/0133439852,2014
['Scott Meyers'],"Coming to grips with C++11 and C++14 is more than a matter of familiarizing yourself with the features they introduce (e.g., auto type declarations, move semantics, lambda expressions, and concurrency support). The challenge is learning to use those features effectively―so that your software is correct, efficient, maintainable, and portable. That’s where this practical book comes in. It describes how to write truly great software using C++11 and C++14―i.e. using modern C++.

Topics include:

The pros and cons of braced initialization, noexcept specifications, perfect forwarding, and smart pointer make functions
The relationships among std::move, std::forward, rvalue references, and universal references
Techniques for writing clear, correct, effective lambda expressions
How std::atomic differs from volatile, how each should be used, and how they relate to C++'s concurrency API
How best practices in ""old"" C++ programming (i.e., C++98) require revision for software development in modern C++

Effective Modern C++ follows the proven guideline-based, example-driven format of Scott Meyers' earlier books, but covers entirely new material.

""After I learned the C++ basics, I then learned how to use C++ in production code from Meyer's series of Effective C++ books. Effective Modern C++ is the most important how-to book for advice on key guidelines, styles, and idioms to use modern C++ effectively and well. Don't own it yet? Buy this one. Now"".

-- Herb Sutter, Chair of ISO C++ Standards Committee and C++ Software Architect at Microsoft

Read more",c81e618e5c650fdf7593c4412ab1f55777fadd1df5cfea0c4bfe23ef91de99fa,9781491903995,978-1491903995,"December 30, 2014",amazon,"['C Programming Language', 'C++ Programming Language', 'Software Development']",Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14,https://www.amazon.com/dp/1491903996,2014
['Jacek Galowicz'],,cac668808dd432c8b0b14ea6ce9411330850856bea57f49c931ae3cd12d2b9d0,,,"June 28, 2017",amazon,"['Functional Software Programming', 'C++ Programming', 'C++ Programming Language']",C++17 STL Cookbook: Discover the latest enhancements to functional programming and lambda expressions,https://www.amazon.com/dp/B01MTSADN8,2017
['Marius Bancila'],,d89c8a2b10f5847b17d3c7d2ad3260eb9f297c2caa0e5e016f42648d2d44bc5a,1788993861,978-1788993869,"May 24, 2018",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Microsoft Programming']",The Modern C++ Challenge: Become an expert programmer by solving real-world problems,https://www.amazon.com/dp/1788993861,2018
['Bartlomiej Filipek'],"This book shows the story of lambda expressions in C++. You’ll learn how to use this powerful feature in a step-by-step manner, slowly digesting the new capabilities and enhancements that come with each revision of the C++ Standard.

This is a Black and White version. The full-colour print is also available - look for ""C++ Lambda Story (Full Color)"".

We’ll start with C++98/03, and then we’ll move on to the latest C++ Standards.

C++98/03 - how to code without lambda support. What was the motivation for the new modern C++ feature?
C++11 - early days. You’ll learn about all the elements of a lambda expression and even some tricks. This is the longest chapter as we need to cover a lot.
C++14 - updates. Once lambdas were adopted, we saw some options to improve them.
C++17 - more improvements, especially by handling this pointer and allowing constexpr.
C++20 - in this section we’ll have a look at the latest and very fresh C++20 Standard.
Additionally, throughout the chapters, you’ll learn about the following techniques:
Immediately Invoked Functional Expressions (IIFE)
How to instrument a default functor to gather extra information
Replacing std::bind1st, std::bind2nd and removed functional stuff
The Overloaded Pattern and how to inherit from a lambda
Passing C++ captureless lambda as a function pointer to C API
LIFTING with lambdas
Storing lambdas in a container
Variadic templates and arguments packs
Lambdas and asynchronous execution
and many more

All equipped with more than 85 runnable code samples!

Read more",cf7627da3561dd393b1af1f747be5057a9c9a545fd6b88a1f5bf31872ac1c76a,,979-8590126835,"February 1, 2021",amazon,"['C++ Programming Language', 'Microsoft Programming']",C++ Lambda Story: Everything you need to know about Lambda Expressions in Modern C++! (C++ Stories),https://www.amazon.com/dp/B08VLM1R76,2021
['Marius Bancila'],,e218f6ae9854b1580b2e0efa0c8e64fadabf56c3c95f8993c0c5f216adc99e74,1800208987,978-1800208988,"September 11, 2020",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Software Development']","Modern C++ Programming Cookbook: Master C++ core language and standard library features, with over 100 recipes, updated to C++20, 2nd Edition",https://www.amazon.com/dp/1800208987,2020
['Ray Lischner'],"Discover everything you need to know about C++ in a logical progression of small lessons that you can work through as quickly or as slowly as you need. This book divides C++ up into bite-sized chunks that will help you learn the language one step at a time. Fully updated to include C++20, it assumes no familiarity with C++ or any other C-based language.

Exploring C++20acknowledges that C++ can be a complicated language, so rather than baffle you with complex chapters explaining functions, classes, and statements in isolation you’ll focus on how to achieve results. By learning a little bit of this and a little of that you’ll soon have amassed enough knowledge to be writing non-trivial programs and will have built a solid foundation of experience that puts those previously baffling concepts into context.

In this fully-revised third edition of Exploring C++, you’ll learn how to use the standard library early in the book. Next, you’ll work with operators, objects, and data-sources in increasingly realistic situations. Finally, you’ll start putting the pieces together to create sophisticated programs of your own design confident that you’ve built a firm base of experience from which to grow.

What You Will Learn

Grasp the basics, including compound statements, modules, and more
Work with custom types and see how to use them
Write useful algorithms, functions, and more
Discover the latest C++ 20 features, including concepts, modules, and ranges

Apply your skills to projects that include a fixed-point numbers and body-mass index applications
Carry out generic programming and apply it in a practical project
Exploit multiple inheritance, traits/policies, overloaded functions, and metaprogramming

Who This Book Is For

Experienced programmers who may have little or no experience with C++ who want an accelerated learning guide to C++20 so they can hit the ground running.

Read more",c059fa68351037391cdc83f09c7e39b865056a7f9e2f54d5a5d74b1e8c1c7feb,1484259602,978-1484259603,"August 28, 2020",amazon,"['Compiler Design', 'Software Programming Compilers', 'Object-Oriented Design']",Exploring C++20: The Programmer's Introduction to C++,https://www.amazon.com/dp/1484259602,2020
['Anais Sutherland'],"""C++ Programming Cookbook"" stands out as a clear, concise, and powerful technical resource for programmers who want to master C++'s intricacies. C++ programmers face a wide variety of problems, and this carefully written book is a treasure trove of solutions and methods to those software development challenges.

Each chapter is organized to help you get a good grasp of the language and everything it can do, from the basics of C++20 to more complex topics like sophisticated type manipulation and performance optimization. Through a series of carefully curated recipes, readers are invited on a journey of learning and competency. Starting with the fundamentals of creating a development environment and comprehending C++ syntax, the book progresses to cover more advanced subjects like concurrency, memory management, file I/O operations, object-oriented design concepts, functional programming, and more. This book focuses on the latest C++ features and aims to get programmers to use idiomatic C++ patterns and modern best practices.

""C++ Programming Cookbook"" goes beyond being a mere collection of recipes; it serves as a manifesto for progressive software development practices and problem-solving. Readers are empowered to adapt and apply their learnings to new, unexplored situations because each recipe not only solves specific problems but also exposes fundamental ideas and methodologies. Writing code that is clean, efficient, and easy to maintain is a priority throughout the book, which aims to help readers develop a skill set that is applicable to more general programming problems.

Key Learnings
Make use of C++20 features to write more expressive, efficient, and modern C++ code effortlessly.
Utilize template metaprogramming for compile-time calculations, enhancing code performance.
Implement smart pointers for robust memory management without the usual complexity.
Put object-oriented programming principles into use to design scalable and maintainable C++ applications.
Explore advanced type manipulation techniques, ensuring type-safe and flexible code across applications.
Harness concurrency and multithreading to build high-performance, responsive C++ software solutions.
Optimize file I/O operations for seamless data handling in text and binary formats.
Implement custom stream buffers for tailored data processing, boosting I/O efficiency.
Navigate stream locales and facets for internationalizing your applications, reaching a global audience.
Uncover efficient error and exception handling strategies to build reliable and error-free C++ program.
Table of Content
Getting Started with C++20
Deep Dive into Functions
Object-Oriented Programming In Action
Effective use of STL
Exploring Advanced C++ Functionalities
Effective Error Handling and Debugging
Concurrency and Multithreading
Performance and Memory Management
Advanced Type Manipulation
File I/O and Streams Operations
Read more",9337a2f13f89516f7d9a57315782d892b559a426d3c605ecd9c6a3bbf4401a3e,,,"March 17, 2024",amazon,"['Memory Management Algorithms', 'Computer Programming Debugging', 'Object Oriented Design']","C++ Programming Cookbook: Proven solutions using C++ 20 across functions, file I/O, streams, memory management, STL, concurrency, type manipulation and error debugging",https://www.amazon.com/dp/B0CYCV5748,2024
['Marius Bancila'],,78574c6c270feefd106f50f3f9ae4452884b90f1a34c4c7370bdc49b3c8d1806,1835080545,978-1835080542,"February 29, 2024",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Software Development']",Modern C++ Programming Cookbook: Master Modern C++ with comprehensive solutions for C++23 and all previous standards,https://www.amazon.com/dp/1835080545,2024
['Fedor G. Pikus'],,2c7283ac734a33c4ff054b1f3201551a700ad4b536994b7cc32e7188db649a98,1804611557,978-1804611555,"July 21, 2023",amazon,"['Computer Operating Systems', 'Operating Systems', 'Computer Hardware & DIY']","Hands-On Design Patterns with C++: Solve common C++ problems with modern design patterns and build robust applications, 2nd Edition",https://www.amazon.com/dp/1804611557,2023
['Dmitri Nesteruk'],"Apply modern C++17 to the implementations of classic design patterns. As well as covering traditional design patterns, this book fleshes out new patterns and approaches that will be useful to C++ developers. The author presents concepts as a fun investigation of how problems can be solved in different ways, along the way using varying degrees of technical sophistication and explaining different sorts of trade-offs.Design Patterns in Modern C++ also provides a technology demo for modern C++, showcasing how some of its latest features (e.g., coroutines) make difficult problems a lot easier to solve. The examples in this book are all suitable for putting into production, with only a few simplifications made in order to aid readability.What You Will LearnApply design patterns to modern C++ programmingUse creational patterns of builder, factories, prototype and singletonImplement structural patterns such as adapter, bridge, decorator, facade and moreWork with the behavioral patterns such as chain of responsibility, command, iterator, mediator and moreApply functional design patterns such as Monad and moreWho This Book Is ForThose with at least some prior programming experience, especially in C++.
Read more",97a43e9ed55b515d3402156044e129bf01ca3cc9aec9b8f1a5928f97a51ed03e,9781484236024,978-1484236024,"January 1, 2018",amazon,[],Design Patterns in Modern C++: Reusable Approaches for Object-Oriented Software Design,https://www.amazon.com/dp/1484236025,2018
"['John Debbie Lafferty', 'John Lakos', 'John Fuller']","Writing reliable and maintainable C++ software is hard. Designing such software at scale adds a new set of challenges. Creating large-scale systems requires a practical understanding of logical design ― beyond the theoretical concepts addressed in most popular texts. To be successful on an enterprise scale, developers must also address physical design, a dimension of software engineering that may be unfamiliar even to expert developers. Drawing on over 30 years of hands-on experience building massive, mission-critical enterprise systems, John Lakos shows how to create and grow Software Capital. This groundbreaking volume lays the foundation for projects of all sizes and demonstrates the processes, methods, techniques, and tools needed for successful real-world, large-scale development.
Up to date and with a solid engineering focus, Large-Scale C++, Volume I: Process and Architecture, demonstrates fundamental design concepts with concrete examples. Professional developers of all experience levels will gain insights that transform their approach to design and development by understanding how to


Raise productivity by leveraging differences between infrastructure and application development
Achieve exponential productivity gains through feedback and hierarchical reuse
Embrace the component’s role as the fundamental unit of both logical and physical design
Analyze how fundamental properties of compiling and linking affect component design
Discover effective partitioning of logical content in appropriately sized physical aggregates
Internalize the important differences among sufficient, complete, minimal, and primitive software
Deliver solutions that simultaneously optimize encapsulation, stability, and performance
Exploit the nine established levelization techniques to avoid cyclic physical dependencies
Use lateral designs judiciously to avoid the “heaviness” of conventional layered architectures
Employ appropriate architectural insulation techniques for eliminating compile-time coupling
Master the multidimensional process of designing large systems using component-based methods

This is the first of John Lakos’s three authoritative volumes on developing large-scale systems using C++. This book, written for fellow software practitioners, uses familiar C++ constructs to solve real-world problems while identifying (and motivating) modern C++ alternatives. Together with the forthcoming Volume II: Design and Implementation and Volume III: Verification and Testing, Large-Scale C++ offers comprehensive guidance for all aspects of large-scale C++ software development. If you are an architect or project leader, this book will empower you to solve critically important problems right now ― and serve as your go-to reference for years to come.


Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.


Read more",136b67a9dee6bc42410d98b4770705e41f4e24cca2622c2cd0ca042960a4bf92,0201717069,978-0201717068,"December 17, 2019",amazon,"['C++ Programming Language', 'Software Development', 'Computer Software']","Large-Scale C++: Process and Architecture, Volume 1 (Addison-Wesley Professional Computing Series)",https://www.amazon.com/dp/0201717069,2019
['John Lakos'],"Designing scalable software in C++ requires more than just a sound understanding of logical design. Senior developers, architects, and project leaders need a grasp of high-level physical design concepts that even many software experts have never explored. In Large-Scale C++ Volume Process and Architecture, John Lakos takes a practitioner's view of modern large-scale software development, helping experienced professionals apply architectural-level physical design concepts in their everyday work. Lakos teaches critical concepts clearly and concisely, with new high-value examples. Up to date and modular, Large-Scale C++ Volume I is designed to help you solve problems right now, and serve as an appealing reference for years to come.
Read more",e8d0c37c7922032a59ee0c08ee00cc39a3a5189f523a6b9a390fd25bfb5d6d6c,0134694694,978-0134694696,"March 14, 2021",amazon,[],Large-Scale C++ Volume II: Design and Implementation (Addison-Wesley Professional Computing Series),https://www.amazon.com/dp/0134694694,2021
['Martin Reddy'],"API Design for C++ provides a comprehensive discussion of Application Programming Interface (API) development, from initial design through implementation, testing, documentation, release, versioning, maintenance, and deprecation. It is the only book that teaches the strategies of C++ API development, including interface design, versioning, scripting, and plug-in extensibility. Drawing from the author's experience on large scale, collaborative software projects, the text offers practical techniques of API design that produce robust code for the long term. It presents patterns and practices that provide real value to individual developers as well as organizations. API Design for C++ explores often overlooked issues, both technical and non-technical, contributing to successful design decisions that product high quality, robust, and long-lived APIs. It focuses on various API styles and patterns that will allow you to produce elegant and durable libraries. A discussion on testing strategies concentrates on automated API testing techniques rather than attempting to include end-user application testing techniques such as GUI testing, system testing, or manual testing. Each concept is illustrated with extensive C++ code examples, and fully functional examples and working source code for experimentation are available online. This book will be helpful to new programmers who understand the fundamentals of C++ and who want to advance their design skills, as well as to senior engineers and software architects seeking to gain new expertise to complement their existing talents. Three specific groups of readers are targeted: practicing software engineers and architects, technical managers, and students and educators.
- The only book that teaches the strategies of C++ API development, including design, versioning, documentation, testing, scripting, and extensibility
- Extensive code examples illustrate each concept, with fully functional examples and working source code for experimentation available online
- Covers various API styles and patterns with a focus on practical and efficient designs for large-scale long-term projects
Read more",65f56fb4e62472be6c4c65784c26b358c71ed1592995828873bb046d1810b118,,,"March 14, 2011",amazon,"['Computer Engineering', 'Object-Oriented Design', 'Software Development']",API Design for C++,https://www.amazon.com/dp/B004NNUZ6O/,2011
['Ronald Mak'],,d002b11ac80b53e21b5bea0108348fa0055ff3d0409adac2d3cc04d654dd4a41,163343950X,978-1633439504,"June 18, 2024",amazon,"['C++ Programming Language', 'Object-Oriented Design', 'Software Development']",Object-Oriented Software Design in C++,https://www.amazon.com/dp/163343950X/,2024
['Klaus Iglberger'],"Good software design is essential for the success of your project, but designing software is hard to do. You need to have a deep understanding of the consequences of design decisions and a good overview of available design alternatives. With this book, experienced C++ developers will get a thorough, practical, and unparalleled overview of software design with this modern language.

C++ trainer and consultant Klaus Iglberger explains how you can manage dependencies and abstractions, improve changeability and extensibility of software entities, and apply and implement modern design patterns to help you take advantage of today's possibilities. Software design is the most essential aspect of a software project because it impacts the software's most important properties: maintainability, changeability, and extensibility.

Learn how to evaluate your code with respect to software design
Understand what software design is, including design goals such as changeability and extensibility
Explore the advantages and disadvantages of each design approach
Learn how design patterns help solve problems and express intent
Choose the right form of a design pattern to get the most out of its advantages

Read more",ba1f2f0218e4d225c39e687621ad1c9b1728cd6e23c0ea555d08303711ffacae,1098113160,978-1098113162,"October 25, 2022",amazon,"['C++ Programming Language', 'Object-Oriented Design', 'Software Development']",C++ Software Design: Design Principles and Patterns for High-Quality Software,https://www.amazon.com/dp/1098113160,2022
['Lee Zhi Eng'],,67ef432ce0271b64fc50300c9f6bdb78388212a41b370208ce8487ece8be9730,1805122630,978-1805122630,"April 12, 2024",amazon,"['Cross-platform Software Development', 'C++ Programming Language', 'Mobile App Development & Programming']","Qt 6 C++ GUI Programming Cookbook: Practical recipes for building cross-platform GUI applications, widgets, and animations with Qt 6",https://www.amazon.com/dp/1805122630,2024
['Mark Summerfield'],"This book is aimed at existing C++/Qt programmers and presents ideas and techniques that are too advanced or specialized (although not necessarily difficult), for a first book on Qt.

Qt has now grown to over 700 classes and well over a million words of documentation, far too much to cover in a single volume. So instead of covering everything very thinly, the book focuses on key areas of Qt technology and tries to provide more comprehensive coverage than is available elsewhere.

The book is completely practical in emphasis, with every technique illustrated by working code. The examples show Qt best practices, and have been tested on Linux, Mac OS X, and Windows, using Qt 4.6 and where possible (e.g., using #if QT_VERSION), Qt 4.5. (The examples and a sample chapter can be downloaded from the book's web page. Amazon don't allow URLs so google for ""qtrac"" to find it.)

The book's main themes are hybrid desktop/Internet applications, threading, rich text handling, Qt's graphics/view architecture, and Qt's model/view architecture (to which four chapters are devoted), although many other topics are covered. Besides each chapter's main subject, lots of other classes, methods, and techniques are used wherever they make sense, to show as many Qt features as possible. So even the most experienced Qt programmer should discover aspects of Qt they weren't aware of, discover new techniques, and be inspired with new ideas.
Read more",b44d8a876f20ce74f0e5aef89bc02986fd7f174ef3f7bb80c46d365e89b84a35,0321635906,978-0321635907,"January 1, 2010",amazon,"['C++ Programming Language', 'Software Design & Engineering', 'Software Development']",Advanced Qt Programming: Creating Great Software with C++ and Qt 4 (Prentice Hall Open Source Software Development Series),https://www.amazon.com/dp/0321635906,2010
['Roger Deutsch'],"Part 1: The first book in the Program Win10 Series contains Chapters 1 - 8.All source code is available from GitHub at https://github.com/raddevus/Win10UWPI have written this book to lead readers into the story of creating apps for the Windows 10 Desktop.This book contains a complete flow so that you can pick it up, read through it and see all the screenshots that you will experience when you begin developing your own Windows 10 app. This book brings the reader into the story of developing Win10 apps and allows the reader to peek inside the head of a developer as he creates complete Win10 apps.How will this book work?Programming Windows 10 For Beginners (and Advanced devs)There are two ways you can learn to program computers: Read a long book that tells you all about the history of programming and lists all the things you can do.Start building projects. Begin at the beginning and go on from there. Programming Windows 10 (PW10) will use the second method to teach. This method makes learning faster and here's why. Read Entire Fish Encyclopedia The first method is similar to reading the entire Fish Encyclopedia so you can know how to catch a fish. Sure, there's a lot of information in the encyclopedia that may be helpful, but perhaps you first want to decide if you even like fishing. Start Fishing The second method gets you fishing so you can feel what it's like to collect bait, put the bait on a hook, cast your line, wait, not catch a fish, and finally (hopefully) catch a fish. There Are Things You Won't Know Using the second method, there are a lot of things that you won't know as you fish. But, those things only matter if you decide to continue fishing. So, as long as you feel comfortable not knowing some things at first, you will like the way this book teaches Windows programming. Try It, Learn It In this book we try it and then we learn it. We build it first and see it work and then we figure out how it works and why it behaves the way it does. Which Is More Memorable? The try it learn it method is more fun and ends up being more memorable too. Which do you think you would remember more? Reading the Encyclopedia of Fish Going on a fishing trip. Right. Going on the fishing trip is a whole lot more fun, a better way to learn and more memorable.What Is the Focus of Programming Windows 10?My focus here is on creating UWAs (Universal Windows Apps) with a focus on creating apps for the Windows 10 desktop. Yes, the dream is to develop an app and deploy it to any type of device (PC, laptop, pad (Surface), phone or whatever). However, the focus here in this book is creating desktop apps that will keep those other platforms in mind but not focus directly on them.
Read more",2e01726a50a6d80e8c9f8d97f218893526fdcd07a5bd92e5711aa026ef58dba1,1973438771,978-1973438779,"December 1, 2017",amazon,"['Microsoft C & C++ Windows Programming', 'Mobile App Development & Programming']",Programming Windows 10 Via UWP: Learn To Program Universal Windows Apps For the Desktop (Program Win10),https://www.amazon.com/dp/1973438771,2017
"['David LeBlanc', 'Michael Howard']","Keep black-hat hackers at bay with the tips and techniques in this entertaining, eye-opening book! Developers will learn how to padlock their applications throughout the entire development process—from designing secure applications to writing robust code that can withstand repeated attacks to testing applications for security flaws. Easily digested chapters reveal proven principles, strategies, and coding techniques. The authors—two battle-scarred veterans who have solved some of the industry’s toughest security problems—provide sample code in several languages. This edition includes updated information about threat modeling, designing a security process, international issues, file-system issues, adding privacy to applications, and performing security code reviews. It also includes enhanced coverage of buffer overruns, Microsoft .NET security, and Microsoft ActiveX development, plus practical checklists for developers, testers, and program managers.

Read more",056d6e35d57ba173479d721b2666c802196d4238efba2ac68fac23cf342cc972,,,"December 4, 2002",amazon,"['Software Development (Kindle Store)', 'Security & Encryption', 'Microsoft Programming']",Writing Secure Code (Developer Best Practices),https://www.amazon.com/dp/B00JDMP718,2002
"['John Lakos', 'Vittorio Romeo', 'Rostislav Khlebnikov']","Maximize Reward and Minimize Risk with Modern C++

Embracing Modern C++ Safely shows you how to make effective use of the new and enhanced language features of modern C++ without falling victim to their potential pitfalls.

Based on their years of experience with large, mission-critical projects, four leading C++ authorities divide C++11/14 language features into three categories: Safe, Conditionally Safe, and Unsafe. Safe features offer compelling value, are easy to use productively, and are relatively difficult to misuse. Conditionally safe features offer significant value but come with risks that require significant expertise and familiarity before use. Unsafe features have an especially poor risk/reward ratio, are easy to misuse, and are beneficial in only the most specialized circumstances.

This book distills the C++ community's years of experience applying C++11 and C++14 features and will help you make effective and safe design decisions that reflect real-world, economic engineering tradeoffs in large-scale, diverse software development environments. The authors use examples derived from real code bases to illustrate every finding objectively and to illuminate key issues. Each feature identifies the sound use cases, hidden pitfalls, and shortcomings of that language feature. After reading this book, you will

Understand what each C++11/14 feature does and where it works best
Recognize how to work around show-stopping pitfalls and annoying corner cases
Know which features demand additional training, experience, and peer review
Gain insights for preparing coding standards and style guides that suit your organization's needs
Be equipped to introduce modern C++ incrementally and judiciously into established code bases

Seasoned C++ developers, team leads, and technical managers who want to improve productivity, code quality, and maintainability will find the insights in this modular, meticulously organized reference indispensable.

Register your book for convenient access to downloads, updates, and/or corrections as they become available. See inside book for details.

Read more",cb6d7d71bc507a962e353cc82dccdaeb4d16075ce7da31cbb7dc325a82bca5a6,0137380356,978-0137380350,"December 23, 2021",amazon,"['C++ Programming Language', 'Computer Programming Languages']",Embracing Modern C++ Safely,https://www.amazon.com/dp/0137380356,2021
['Robert Seacord'],"Learn the Root Causes of Software Vulnerabilities and How to Avoid Them





Commonly exploited software vulnerabilities are usually caused by avoidable software defects. Having analyzed tens of thousands of vulnerability reports since 1988, CERT has determined that a relatively small number of root causes account for most of the vulnerabilities.







Secure Coding in C and C++, Second Edition, identifies and explains these root causes and shows the steps that can be taken to prevent exploitation. Moreover, this book encourages programmers to adopt security best practices and to develop a security mindset that can help protect software from tomorrow’s attacks, not just today’s. Drawing on the CERT’s reports and conclusions, Robert C. Seacord systematically identifies the program errors most likely to lead to security breaches, shows how they can be exploited, reviews the potential consequences, and presents secure alternatives.







Coverage includes technical detail on how to





Improve the overall security of any C or C++ application


Thwart buffer overflows, stack-smashing, and return-oriented programming attacks that exploit insecure string manipulation logic


Avoid vulnerabilities and security flaws resulting from the incorrect use of dynamic memory management functions


Eliminate integer-related problems resulting from signed integer overflows, unsigned integer wrapping, and truncation errors


Perform secure I/O, avoiding file system vulnerabilities


Correctly use formatted output functions without introducing format-string vulnerabilities


Avoid race conditions and other exploitable vulnerabilities while developing concurrent code







The second edition features





Updates for C11 and C++11


Significant revisions to chapters on strings, dynamic memory management, and integer security


A new chapter on concurrency


Access to the online secure coding course offered through Carnegie Mellon’s Open Learning Initiative (OLI)







Secure Coding in C and C++, Second Edition, presents hundreds of examples of secure code, insecure code, and exploits, implemented for Windows and Linux. If you’re responsible for creating secure C or C++ software–or for keeping it safe–no other book offers you this much detailed, expert assistance.




Read more",33ed81922f8e4c0c96b71a7f366c3ed410237118b004553b76a479aefa9d9e9d,,,"March 23, 2013",amazon,"['C Programming', 'C Programming Language', 'C++ Programming Language']",Secure Coding in C and C++ (SEI Series in Software Engineering),https://www.amazon.com/dp/B00C0OBZI0,2013
"['Jeffrey M. Richter', 'Christophe Nasarre', 'Mark Russinovich']","Master the intricacies of application development with unmanaged C++ code - with advice straight from the experts. Jeffrey Richter's book is now fully revised for Windows XP, Windows Vista, and Windows Server 2008. You get in-depth, comprehensive guidance, advanced techniques, and extensive code samples to help you program Windows-based applications.
You'll discover how to: architect and implement your applications for both 32-bit and 64-bit Windows; create and manipulate processes and jobs; schedule, manage, synchronize, and destroy threads; perform asynchronous and synchronous device I/O operations with the I/O completion port; allocate memory using various techniques including virtual memory, memory-mapped files, and heaps; manipulate the default committed physical storage of thread stacks; build DLLs for delay-loading, API hooking, and process injection; and use structured exception handling, Windows Error Recovery, and Application Restart.
Read more",c0e87b0ac4aa55093de87406bbcecb7e33bc485152095bb4b618210a929241a9,0735624240,978-0735624245,"November 28, 2007",amazon,"['C Programming Language', 'C++ Programming Language', 'Object-Oriented Design']",Windows via C/C++,https://www.amazon.com/dp/0735624240,2007
"['Pavel Yosifovich', 'Jeffrey Richter']","This is an advanced guide to modern Windows system programming with C and C++ for experienced developers. Thoroughly updated for Windows 10, 8.x, and 7, it offers expert guidance for leveraging Windows foundations to build robust, highly-secure programs. Leading Windows developers Pavel Yosifovich (co-author, Windows Internals, 7th Edition) and Microsoft Partner Architect Jeffrey Richter (author, Windows Runtime via C#) drill down to offer in-depth tutorials and explanations of how Windows works and how to make the most of its capabilities using the Windows APIs. Packed with modern code examples, it covers Windows system architecture, compilation, error handling, processes, advanced threads and synchronization, jobs, sophisticated memory management techniques, device I/O, security, Windows programming patterns, services, the Registry, security, and much more.
Read more",e71f314b1d0234765bf3d789f3906d88ed6954e58b4c278e4475037f80983a67,0135953391,978-0135953396,"December 9, 2019",amazon,[],Windows Via C/C++,https://www.amazon.com/dp/0135953391,2019
['Pavel Yosifovich'],"Delve into programming the Windows operating system through the Windows API in with C++. Use the power of the Windows API to working with processes, threads, jobs, memory, I/O and more. The book covers current Windows 10 versions, allowing you to get the most of what Windows has to offer to developers in terms of productivity, performance and scalability.
Read more",40eae8aafef47e0ae1f98b8dfd73ee6a217bed86ea4992775268d70760a018c1,,979-8634170381,"April 11, 2020",amazon,"['Windows 10 Guides', 'Microsoft C & C++ Windows Programming', 'Schools & Teaching']","Windows 10 System Programming, Part 1",https://www.amazon.com/dp/B086Y6M7LH,2020
['Charles Petzold'],"Reimagined for full-screen and touch-optimized apps, Windows 8 provides a platform for reaching new users in new ways. In response, programming legend Charles Petzold is rewriting his classic Programming Windows—one of the most popular programming books of all time—to show developers how to use existing skills and tools to build Windows 8 apps.




Programming Windows, Sixth Edition focuses on creating Windows 8 apps accessing the Windows Runtime with XAML and C#. The book also provides C++ code samples. The Sixth Edition is organized in two parts:







Part I, “Elementals,” begins with the interrelationship between code and XAML, basic event handling, dynamic layout, controls, templates, asynchronous processing, the application bar, control customization, and collections. You should emerge from Part I ready to create sophisticated page-oriented collection-based user interfaces using the powerful ListView and GridView controls.





Part II, “Specialties,” explores topics you might not need for every program but are essential to a well-rounded education in Windows 8. These include multitouch, bitmap graphics, interfacing with share and search facilities, printing, working with the sensors (GPS and orientation), text, obtaining input from the stylus (including handwriting recognition), accessing web services, calling Win32 and DirectX functions, and bringing your application to the Windows 8 app store.


Read more",a2131969573cea529acbcf70b7766f627fe567f058a9a9668f5f826b6f7d1821,,,"January 15, 2013",amazon,"['C# Programming (Kindle Store)', 'Microsoft Programming (Kindle Store)', 'C# Programming']",Programming Windows (Developer Reference),https://www.amazon.com/dp/B00JDMPJ8E,2013
['Johnson M. Hart'],"“If you’re writing a native Win32 program or just want to know what the OS is really doing underneath, you need John’s book. He covers the stuff that real systems programmers absolutely must know. Recommended.”

–Chris Sells, Microsoft Corporation

“This fourth edition does a great job of incorporating new features in the Vista, Windows 2008, and Windows 7 API, but also stays true to teaching the foundational elements of building applications that target the Windows OS.”

–Jason Beres, Product Management, Infragistics

The Definitive Guide to Windows API Programming, Fully Updated for Windows 7, Windows Server 2008, and Windows Vista

Windows System Programming, Fourth Edition, now contains extensive new coverage of 64-bit programming, parallelism, multicore systems, and many other crucial topics. Johnson Hart’s robust code examples have been updated and streamlined throughout. They have been debugged and tested in both 32-bit and 64-bit versions, on single and multiprocessor systems, and under Windows 7, Vista, Server 2008, and Windows XP. To clarify program operation, sample programs are now illustrated with dozens of screenshots.

Hart systematically covers Windows externals at the API level, presenting practical coverage of all the services Windows programmers need, and emphasizing how Windows functions actually behave and interact in real-world applications. Hart begins with features used in single-process applications and gradually progresses to more sophisticated functions and multithreaded environments. Topics covered include file systems, memory management, exceptions, processes, threads, synchronization, interprocess communication, Windows services, and security.

New coverage in this edition includes

Leveraging parallelism and maximizing performance in multicore systems
Promoting source code portability and application interoperability across Windows, Linux, and UNIX
Using 64-bit address spaces and ensuring 64-bit/32-bit portability
Improving performance and scalability using threads, thread pools, and completion ports
Techniques to improve program reliability and performance in all systems
Windows performance-enhancing API features available starting with Windows Vista, such as slim reader/writer locks and condition variables

A companion Web site, jmhartsoftware.com, contains all sample code, Visual Studio projects, additional examples, errata, reader comments, and Windows commentary and discussion.

Read more",5f81fc087519ce5566e689c0fd2e92f802da2212dc4f38d35c3908d86277c093,0321657748,978-0321657749,"January 1, 2010",amazon,"['Microsoft C & C++ Windows Programming', 'Microsoft OS Guides', 'Computer Operating Systems']",Windows System Programming (Addison-Wesley Microsoft Technology Series),https://www.amazon.com/dp/0321657748,2010
['Keith Brown'],"A guide to computer security for software developers demonstrates techniques for writing secure applications, covering cryptography, authentication, access control, and credentials.
Read more",c664beb17555a6c051ff638f4805e193d6ab01f3a78b9c9bdf1c325af0af8cf6,0201604426,978-0201604429,"July 5, 2000",amazon,"['Windows Server Guides', 'CompTIA Certification Guides', 'Microsoft OS Guides']",Programming Windows Security: The Developers Guide (DevelopMentor),https://www.amazon.com/dp/0201604426,2000
['Robert Dunne'],"Windows® 64-bit Assembly Language Programming Quick Start is a complete tutorial using the free Community Edition of Microsoft® Visual Studio 17 to introduce the novice to the Intel® X86-64 architecture and the Windows X64 Calling Convention.






With Microsoft® Visual Studio 17, assembly language programs can be built using either its Integrated Development Environment (IDE) or using its ML64 assembler directly in a traditional command line approach. Both techniques are presented in this book, and each has its own merits for gaining a deeper understanding of computer software and hardware. The assistance provided by Visual Studio’s interactive debugger is immense not only for developing real programs but also learning how the CPU instructions work.


Programmers learn by example and develop their skills by examining and modifying working programs. Every sample program is complete, but leaves room for enhancements and experimentation encouraged by the questions at the end of each chapter. All are available for download through GitHub.


The sample programs, ranging from five to over one hundred lines of code, are extensively documented in both flowcharts and comments. Over seventy illustrations are included to explain programming techniques as well as X86, SSE, and AVX instructions. CPU instructions are introduced as needed to achieve programming goals as the projects in each chapter progress to the next.



This is not a book that has been modified or migrates from a 32-bit or 16-bit perspective, but starts right in with 64-bit programming and only refers to past approaches when necessary to explain seemingly unnatural conventions and names.


Topics like binary and hexadecimal are introduced through programming examples as well as appearing in appendices.


The examples in this book have been “classroom tested” with students having very little, if any, previous programming experience. The information is complete, allowing it to be used as an independent study.




Learning computer hardware and software architectures through hands-on assembly language programming experience helps develop well-rounded programmers and computer engineers.



Read more",e9d37fbd9c300d631d7ea45155d0f1c6732da002dfb67359f08aff7c3a252229,,,"July 31, 2018",amazon,"['Assembly Language Programming', 'PC Hardware', 'Computer Hardware']","Windows 64-bit Assembly Language Programming Quick Start: Intel X86-64, SSE, AVX",https://www.amazon.com/dp/B07G2WJFZK,2018
['Tarik Soulami'],"Use Windows debuggers throughout the development cycle―and build better software

Rethink your use of Windows debugging and tracing tools―and learn how to make them a key part of test-driven software development. Led by a member of the Windows Fundamentals Team at Microsoft, you’ll apply expert debugging and tracing techniques―and sharpen your C++ and C# code analysis skills―through practical examples and common scenarios. Learn why experienced developers use debuggers in every step of the development process, and not just when bugs appear.

Discover how to:

Go behind the scenes to examine how powerful Windows debuggers work
Catch bugs early in the development cycle with static and runtime analysis tools
Gain practical strategies to tackle the most common code defects
Apply expert tricks to handle user-mode and kernel-mode debugging tasks
Implement postmortem techniques such as JIT and dump debugging
Debug the concurrency and security aspects of your software
Use debuggers to analyze interactions between your code and the operating system
Analyze software behavior with Xperf and the Event Tracing for Windows (ETW) framework

Read more",4516c1b00c5dee3dd9d5409a180bf4ee608b6fa10086b26b20fe186d83c47cac,0735662789,978-0735662780,"May 15, 2012",amazon,"['Computer Programming Debugging', 'Microsoft C & C++ Windows Programming', 'Software Development']",Inside Windows Debugging (Developer Reference),https://www.amazon.com/dp/0735662789,2012
"['Jeffrey Richter', 'Jason Clark']","Enterprise developers take an in-depth tour of Windows 2000 services -- the powerful features and subsystems designed specifically to handle mission-critical data processing needs -- and get expert guidance for building applications that exploit their capabilities. Covering the Service Control Manager, Registry, performance monitoring, event logging, security, asynchronous I/O, and other key topics -- and featuring a CD-ROM packed with next-generation 64-bit code examples -- this book provides timely and substantive instruction for creating a powerful new class of enterprise solutions.
Read more",af8e67b779b44ca44ca484fbfac4ed449cbbd5aec522f010a3705674f73063a8,0735607532,978-0735607538,"April 22, 2000",amazon,"['Computer Operating Systems', 'Microsoft OS Guides', 'Software Design & Engineering']",Programming Server-Side Applications for Microsoft Windows 2000 (Dv-Mps Programming),https://www.amazon.com/dp/0735607532,2000
"['Pavel Yosifovich', 'Mark E. Russinovich', 'David A. Solomon']","Delve inside Windows architecture and internals - and see how core components work behind the scenes. This classic guide has been fully updated for Windows 10 and Windows Server 2016, and now presents its coverage in two parts.
Read more",2c6d6acd7e8b731664f1b3d3bee20047ba90a230b4dc5a99b19b080eb59c6290,0738758841,978-0735684188,"May 5, 2017",amazon,"['Windows Administration', 'Windows Server Guides', 'Microsoft C & C++ Windows Programming']","Windows Internals: System architecture, processes, threads, memory management, and more, Part 1 (Developer Reference)",https://www.amazon.com/dp/0735684189,2017
"['Mark Russinovich', 'Andrea Allievi', 'Alex Ionescu']","The definitive guide to modern Windows internals: new coverage of virtualization, file systems, boot, security, and more.

For advanced computing professionals, this is the definitive up-to-date guide to how Windows core components behave “under the hood.” Using it, experienced developers can build more powerful and scalable software, administrators can debug complex system and performance problems, and security researchers can harden their systems. This Seventh Edition is fully updated through the May 2021 (21H1/2104) updates to Windows 10 and Windows Server (2022, 2019, and 2016). It adds extensive content on Hyper-V, plus fully rewritten chapters on the boot process, new storage technologies, and Windows system and management mechanisms. As always, it delivers unparalleled insight based on insider access to Microsoft source code, with hands-on experiments using the latest debugging tools to show you Windows’ internal behaviors firsthand. With Windows 11 introducing new user interface design elements that build upon the same core technologies as Windows 10, readers will be well-prepared for this new chapter of computing.

Leading Windows insiders help you:

• Discover system mechanisms for serving device drivers and applications, including ALPC, Object Manager, synchronization, WNF, WoW64, and the processor execution model

• Explore underlying hardware architecture, including trap processing, segmentation, and side channel vulnerabilities

• Understand Windows virtualization, and how virtualization-based security (VBS) protects against OS vulnerabilities

• Delve into key management and configuration mechanisms, including the Registry, Windows services, WMI, and Task Scheduling

• Explore diagnostic services such as Event Tracing for Windows (ETW) and DTrace

• Learn how the cache manager and file system drivers interact to provide reliable support for files, directories, and disks, including on Persistent Memory (NVDIMM) DAX devices.

• Understand NTFS, ReFS, and other Windows file systems

• Review Windows startup/shutdown operations, and OS components involved in boot flow

• Analyze UEFI-based Secure Boot, Measured Boot, and Secure Launch

About This Book

• For experienced programmers, architects, software quality and performance specialists, administrators, security practitioners, and support professionals

• Assumes you are a Windows power user

Read more",80122ac43579c2188078709e31f4dbad4658a2953499a1a5c860b39b322e444a,0135462401,978-0738772714,"October 1, 2021",amazon,"['Windows 10 Guides', 'Software Design & Engineering', 'Software Development']","Windows Internals, Part 2 (Developer Reference)",https://www.amazon.com/dp/0135462401,2021
['Pavel Yosifovich'],"There is nothing like the power of the kernel in Windows - but how do you write kernel drivers to take advantage of that power? This book will show you how.The book describes software kernel drivers programming for Windows. These drivers don't deal with hardware, but rather with the system itself: processes, threads, modules, registry and more. Kernel code can be used for monitoring important events, preventing some from occurring if needed. Various filters can be written that can intercept calls that a driver may be interested in.
Read more",405c7ef70ed3c132f06dca51db03771fe339424b589a98f5ccd71d18981ce196,,979-8711428220,"February 21, 2021",amazon,"['Microsoft C & C++ Windows Programming', 'Computer Hardware Design & Architecture']",Windows Kernel Programming,https://www.amazon.com/dp/B08WZHBQYC,2021
['Jack-Benny Persson'],,f99231e29492493f1321c5efc9847c329bb3ec715b4c75d645de32ce15a51558,1789951283,978-1789951288,"May 7, 2021",amazon,"['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']",Linux System Programming Techniques: Become a proficient Linux system programmer using expert recipes and techniques,https://www.amazon.com/dp/1789951283,2021
['Michael Kerrisk'],"The Linux Programming Interface (TLPI) is the definitive guide to the Linux and UNIX programming interface—the interface employed by nearly every application that runs on a Linux or UNIX system.

In this authoritative work, Linux programming expert Michael Kerrisk provides detailed descriptions of the system calls and library functions that you need in order to master the craft of system programming, and accompanies his explanations with clear, complete example programs.

You'll find descriptions of over 500 system calls and library functions, and more than 200 example programs, 88 tables, and 115 diagrams. You'll learn how to:
–Read and write files efficiently
–Use signals, clocks, and timers
–Create processes and execute programs
–Write secure programs
–Write multithreaded programs using POSIX threads
–Build and use shared libraries
–Perform interprocess communication using pipes, message queues, shared memory, and semaphores
–Write network applications with the sockets API

While The Linux Programming Interface covers a wealth of Linux-specific features, including epoll, inotify, and the /proc file system, its emphasis on UNIX standards (POSIX.1-2001/SUSv3 and POSIX.1-2008/SUSv4) makes it equally valuable to programmers working on other UNIX platforms.

The Linux Programming Interface is the most comprehensive single-volume work on the Linux and UNIX programming interface, and a book that's destined to become a new classic.
Read more",8655fe8c1f999907bf00bf0c2137cffa57fbb4459fa30e3f644959f9910c8768,1593272200,978-1593272203,"October 28, 2010",amazon,"['Unix Programming', 'Linux Programming', 'Linux Networking & System Administration']",The Linux Programming Interface: A Linux and UNIX System Programming Handbook,https://www.amazon.com/dp/1593272200,2010
"['W. Stevens', 'Stephen Rago']","Practical, in-depth knowledge of the system programming interfaces that drive the UNIX and Linux kernels

Building on W. Rich Stevens’ pioneering work, this third edition of the classic was updated by Steve Rago, a colleague of Stevens, to reflect technical advances and best practices aligning with Version 4 of the Single UNIX Specification.

This edition covers more than seventy interfaces including:

POSIX asynchronous I/O
Spin locks
Barriers
POSIX semaphores

Steve carefully retains the spirit and approach that have made this book so valuable, starting with files, directories, and processes, carefully laying the groundwork for more advanced techniques, such as signal handling and terminal I/O. And he thoroughly covers threads and multithreaded programming, and socket-based IPC.

Filled with examples, case-studies, and access to thousands of lines of downloadable code, Advanced Programming in the UNIX® Environment has helped generations of programmers write code with exceptional power, performance, and reliability.

Read more",3a381746b21f0ddc59c018d115551bc22dbc623a8431375eb643e5d8751e63ac,0321637739,978-0321637734,"May 14, 2013",amazon,"['Unix Programming', 'Unix Operating System', 'Computer Operating Systems']","Advanced Programming in the UNIX Environment, 3rd Edition",https://www.amazon.com/dp/0321637739,2013
"['Neil Matthew', 'Richard Stones']","Beginning Linux Programming, Fourth Edition continues its unique approach to teaching UNIX programming in a simple and structured way on the Linux platform. Through the use of detailed and realistic examples, students learn by doing, and are able to move from being a Linux beginner to creating custom applications in Linux. The book introduces fundamental concepts beginning with the basics of writing Unix programs in C, and including material on basic system calls, file I/O, interprocess communication (for getting programs to work together), and shell programming. Parallel to this, the book introduces the toolkits and libraries for working with user interfaces, from simpler terminal mode applications to X and GTK+ for graphical user interfaces. Advanced topics are covered in detail such as processes, pipes, semaphores, socket programming, using MySQL, writing applications for the GNOME or the KDE desktop, writing device drivers, POSIX Threads, and kernel programming for the latest Linux Kernel.
Read more",15e1741a9a0ad67bafd13015924e1e3c288d4cf4277325061533ba06aec8ad5f,0470147628,978-0470147627,"November 5, 2007",amazon,"['Linux Programming', 'Computer Operating Systems', 'Introductory & Beginning Programming']",Beginning Linux Programming,https://www.amazon.com/dp/0470147628,2007
['Robert Love'],"Write software that draws directly on services offered by the Linux kernel and core system libraries. With this comprehensive book, Linux kernel contributor Robert Love provides you with a tutorial on Linux system programming, a reference manual on Linux system calls, and an insider’s guide to writing smarter, faster code.

Love clearly distinguishes between POSIX standard functions and special services offered only by Linux. With a new chapter on multithreading, this updated and expanded edition provides an in-depth look at Linux from both a theoretical and applied perspective over a wide range of programming topics, including:

A Linux kernel, C library, and C compiler overview
Basic I/O operations, such as reading from and writing to files
Advanced I/O interfaces, memory mappings, and optimization techniques
The family of system calls for basic process management
Advanced process management, including real-time processes
Thread concepts, multithreaded programming, and Pthreads
File and directory management
Interfaces for allocating memory and optimizing memory access
Basic and advanced signal interfaces, and their role on the system
Clock management, including POSIX clocks and high-resolution timers

Read more",a7596a370a0c952580f281cfb5c81aaf3af56ed5d0f57bee5640fbd927da0033,9781449339531,978-1449339531,"July 2, 2013",amazon,"['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']",Linux System Programming: Talking Directly to the Kernel and C Library,https://www.amazon.com/dp/1449339530,2013
['Eric Raymond'],"The Art of UNIX Programming poses the belief that understanding the unwritten UNIX engineering tradition and mastering its design patterns will help programmers of all stripes to become better programmers. This book attempts to capture the engineering wisdom and design philosophy of the UNIX, Linux, and Open Source software development community as it has evolved over the past three decades, and as it is applied today by the most experienced programmers. Eric Raymond offers the next generation of ""hackers"" the unique opportunity to learn the connection between UNIX philosophy and practice through careful case studies of the very best UNIX/Linux programs.

Read more",99d99bd072e7f0b455ccd859d9467143d16c82622a359f1b0d3d0c8cd95218fd,0131429019,978-0131429017,"September 23, 2003",amazon,"['Unix Programming', 'Computer Systems Analysis & Design', 'Computer Software']",The Art of UNIX Programming (The Addison-Wesley Professional Computng Series),https://www.amazon.com/dp/0131429019,2003
['Dr. Rian Quinn'],"A hands-on guide to making system programming with C++ easy

Key Features
Write system-level code leveraging C++17
Learn the internals of the Linux Application Binary Interface (ABI) and apply it to system programming
Explore C++ concurrency to take advantage of server-level constructs
Book Description

C++ is a general-purpose programming language with a bias toward system programming as it provides ready access to hardware-level resources, efficient compilation, and a versatile approach to higher-level abstractions.

This book will help you understand the benefits of system programming with C++17. You will gain a firm understanding of various C, C++, and POSIX standards, as well as their respective system types for both C++ and POSIX. After a brief refresher on C++, Resource Acquisition Is Initialization (RAII), and the new C++ Guideline Support Library (GSL), you will learn to program Linux and Unix systems along with process management. As you progress through the chapters, you will become acquainted with C++'s support for IO. You will then study various memory management methods, including a chapter on allocators and how they benefit system programming. You will also explore how to program file input and output and learn about POSIX sockets. This book will help you get to grips with safely setting up a UDP and TCP server/client.

Finally, you will be guided through Unix time interfaces, multithreading, and error handling with C++ exceptions. By the end of this book, you will be comfortable with using C++ to program high-quality systems.

What you will learn
Understand the benefits of using C++ for system programming
Program Linux/Unix systems using C++
Discover the advantages of Resource Acquisition Is Initialization (RAII)
Program both console and file input and output
Uncover the POSIX socket APIs and understand how to program them
Explore advanced system programming topics, such as C++ allocators
Use POSIX and C++ threads to program concurrent systems
Grasp how C++ can be used to create performant system applications
Who this book is for

If you are a fresh developer with intermediate knowledge of C++ but little or no knowledge of Unix and Linux system programming, this book will help you learn system programming with C++ in a practical way.

Table of Contents
Getting Started with System Programming
Learning the C, C++17 and POSIX Standards
System Types for C++ and POSIX
C++, RAII and the GSL Refresher
Programming Linux / Unix System
Learning to Program Console Input / Output
A Comprehensive Look at Memory Management
Learning to Program File Input / Output
A Hands-On Approach to Allocators
Programming POSIX Sockets using C++
Time Interfaces in Unix
Learn to Program POSIX and C++ Threads
Error Handling with Exceptions
Read more",77b2b5c861c12288e8d451b393478f5f40f13bbd553808453b8782d66b55a012,,,"December 26, 2018",amazon,"['C++ Programming', 'Linux', 'Computer Systems Analysis & Design (Kindle Store)']",Hands-On System Programming with C++: Build performant and concurrent Unix and Linux systems with C++17,https://www.amazon.com/dp/B07GVNFTWD,2018
['Kaiwan N Billimoria'],"Get up and running with system programming concepts in Linux

Key Features
Acquire insight on Linux system architecture and its programming interfaces
Get to grips with core concepts such as process management, signalling and pthreads
Packed with industry best practices and dozens of code examples
Book Description

The Linux OS and its embedded and server applications are critical components of today's software infrastructure in a decentralized, networked universe. The industry's demand for proficient Linux developers is only rising with time. Hands-On System Programming with Linux gives you a solid theoretical base and practical industry-relevant descriptions, and covers the Linux system programming domain. It delves into the art and science of Linux application programming- system architecture, process memory and management, signaling, timers, pthreads, and file IO.

This book goes beyond the use API X to do Y approach; it explains the concepts and theories required to understand programming interfaces and design decisions, the tradeoffs made by experienced developers when using them, and the rationale behind them. Troubleshooting tips and techniques are included in the concluding chapter.

By the end of this book, you will have gained essential conceptual design knowledge and hands-on experience working with Linux system programming interfaces.

What you will learn
Explore the theoretical underpinnings of Linux system architecture
Understand why modern OSes use virtual memory and dynamic memory APIs
Get to grips with dynamic memory issues and effectively debug them
Learn key concepts and powerful system APIs related to process management
Effectively perform file IO and use signaling and timers
Deeply understand multithreading concepts, pthreads APIs, synchronization and scheduling
Who this book is for

Hands-On System Programming with Linux is for Linux system engineers, programmers, or anyone who wants to go beyond using an API set to understanding the theoretical underpinnings and concepts behind powerful Linux system programming APIs. To get the most out of this book, you should be familiar with Linux at the user-level logging in, using shell via the command line interface, the ability to use tools such as find, grep, and sort. Working knowledge of the C programming language is required. No prior experience with Linux systems programming is assumed.

Table of Contents
Linux System Architecture
Virtual Memory
Resource Limits
Dynamic Memory Allocation
Linux Memory Issues
Debugging Tools for Common Memory Issues
Process Credentials
Process Execution
Process Capabilities
Process Creation
Signalling - Part 1
Signalling - Part 2
Timers
Multithreading with Pthreads Part 1-Essentials
Multithreading with Pthreads Part II - Synchronization
Multithreading with Pthreads Part III
CPU Scheduling on Linux
Advanced File I/O
Troubleshooting and Best Practices
File IO Essentials
Daemon Processes
Read more",453b518d6b400c273cd15f841a716ab3016f067019f592c5cb397bac17d63f26,1788998472,978-1788998475,"October 31, 2018",amazon,"['Linux Programming', 'C Programming Language', 'Computer Programming Languages']","Hands-On System Programming with Linux: Explore Linux system programming interfaces, theory, and practice",https://www.amazon.com/dp/1788998472,2018
['Robert Love'],"Linux Kernel Development details the design and implementation of the Linux kernel, presenting the content in a manner that is beneficial to those writing and developing kernel code, as well as to programmers seeking to better understand the operating system and become more efficient and productive in their coding.

The book details the major subsystems and features of the Linux kernel, including its design, implementation, and interfaces. It covers the Linux kernel with both a practical and theoretical eye, which should appeal to readers with a variety of interests and needs.

The author, a core kernel developer, shares valuable knowledge and experience on the 2.6 Linux kernel. Specific topics covered include process management, scheduling, time management and timers, the system call interface, memory addressing, memory management, the page cache, the VFS, kernel synchronization, portability concerns, and debugging techniques. This book covers the most interesting features of the Linux 2.6 kernel, including the CFS scheduler, preemptive kernel, block I/O layer, and I/O schedulers.

The third edition of Linux Kernel Development includes new and updated material throughout the book:

An all-new chapter on kernel data structures
Details on interrupt handlers and bottom halves
Extended coverage of virtual memory and memory allocation
Tips on debugging the Linux kernel
In-depth coverage of kernel synchronization and locking
Useful insight into submitting kernel patches and working with the Linux kernel community
Read more",cf40d6fcdeef0589561e16da23830161907d1eb871ede324485a0b5c83c664bf,0672329468,978-0672329463,"June 22, 2010",amazon,"['Linux Kernel & Peripherals', 'Linux Programming', 'Software Development']",Linux Kernel Development,https://www.amazon.com/dp/0672329468,2010
['Rami Rosen'],"Linux Kernel Networking takes you on a guided in-depth tour of the current Linux networking implementation and the theory behind it. Linux kernel networking is a complex topic, so the book won't burden you with topics not directly related to networking. This book will also not overload you with cumbersome line-by-line code walkthroughs not directly related to what you're searching for; you'll find just what you need, with in-depth explanations in each chapter and a quick reference at the end of each chapter.

Linux Kernel Networking is the only up-to-date reference guide to understanding how networking is implemented, and it will be indispensable in years to come since so many devices now use Linux or operating systems based on Linux, like Android, and since Linux is so prevalent in the data center arena, including Linux-based virtualization technologies like Xen and KVM.

Read more",ba3d1b446877a48bd2b12b656270f3fc0ce2ddfd53d5eaa88b9ed06b89cae973,143026196X,978-1430261964,"December 24, 2013",amazon,"['Linux Programming', 'Linux Networking & System Administration', 'Software Development']",Linux Kernel Networking: Implementation and Theory (Expert's Voice in Open Source),https://www.amazon.com/dp/143026196X,2013
['Kaiwan N. Billimoria'],,5db707eae90d925931a57eb50326eb4f2badfc28939e9d3543168784b2b59ab0,1803232226,978-1803232225,"February 29, 2024",amazon,"['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']","Linux Kernel Programming: A comprehensive and practical guide to kernel internals, writing modules, and kernel synchronization",https://www.amazon.com/dp/1803232226,2024
['Kaiwan N Billimoria'],,4766e19f3358d7cab01c228cab39cdc996149dc7d81975e77583cc49dda513c8,180107951X,978-1801079518,"March 19, 2021",amazon,"['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']","Linux Kernel Programming Part 2 - Char Device Drivers and Kernel Synchronization: Create user-kernel interfaces, work with peripheral I/O, and handle hardware interrupts",https://www.amazon.com/dp/180107951X,2021
['Kaiwan N Billimoria'],,a990c5067397cb9fc0878d2ed0ca883451ae1cb730789ed74e3defe7e22f0aab,1801075034,978-1801075039,"August 5, 2022",amazon,"['Linux Programming', 'Linux Networking & System Administration', 'Software Development']",Linux Kernel Debugging: Leverage proven tools and advanced techniques to effectively debug Linux kernels and kernel modules,https://www.amazon.com/dp/1801075034,2022
['John Madieu'],,9cd5d40607d215685710847e8564d463fac787795ced0555e6e47f5c7a7fbc00,178934204X,978-1789342048,"January 8, 2021",amazon,"['Device Drivers', 'Linux Programming', 'Linux Networking & System Administration']",Mastering Linux Device Driver Development: Write custom device drivers to support computer peripherals in Linux operating systems,https://www.amazon.com/dp/178934204X,2021
['John Madieu'],,4f029d928583b18dc44ab68cb793f02fadbdc807cf214a9d70ee4a1d372b20d1,1803240067,978-1803240060,"April 21, 2022",amazon,"['Linux Programming', 'Linux & UNIX Administration', 'Linux Networking & System Administration']","Linux Device Driver Development: Everything you need to start with device driver development for Linux kernel and embedded Linux, 2nd Edition",https://www.amazon.com/dp/1803240067,2022
['Rodolfo Giometti'],,dfb84c0929013fd675ff0c45d5bdc375ac4d74569cd781150d2d4a280bed3f84,1838558802,978-1838558802,"May 31, 2019",amazon,"['Device Drivers', 'Linux Applications', 'Computer Software']",Linux Device Driver Development Cookbook: Develop custom drivers for your embedded Linux applications,https://www.amazon.com/dp/1838558802,2019
"['Frank Vasquez', 'Chris Simmonds']",,67f2c8581ce0d489a455c24a6680e5ecc6ad2593934d4863c7c2eef19de65cf8,1789530385,978-1789530384,"May 14, 2021",amazon,"['Linux & UNIX Administration', 'Linux Programming', 'Linux Networking & System Administration']","Mastering Embedded Linux Programming: Create fast and reliable embedded solutions with Linux 5.4 and the Yocto Project 3.1 (Dunfell), 3rd Edition",https://www.amazon.com/dp/1789530385,2021
['Alex González'],"Over 79 hands-on recipes for professional embedded Linux developers to optimize and boost their Yocto Project know-how

Key Features
Optimize your Yocto setup to speed up development and debug build issues
Use what is quickly becoming the standard embedded Linux product builder framework—the Yocto Project
Recipe-based implementation of best practices to optimize your Linux system
Book Description

The Yocto Project has become the de facto distribution build framework for reliable and robust embedded systems with a reduced time to market.You'll get started by working on a build system where you set up Yocto, create a build directory, and learn how to debug it. Then, you'll explore everything about the BSP layer, from creating a custom layer to debugging device tree issues. In addition to this, you’ll learn how to add a new software layer, packages, data, scripts, and configuration files to your system. You will then cover topics based on application development, such as using the Software Development Kit and how to use the Yocto project in various development environments. Toward the end, you will learn how to debug, trace, and profile a running system. This second edition has been updated to include new content based on the latest Yocto release.

What you will learn
Optimize your Yocto Project setup to speed up development and debug build issues
Use Docker containers to build Yocto Project-based systems
Take advantage of the user-friendly Toaster web interface to the Yocto Project build system
Build and debug the Linux kernel and its device trees
Customize your root filesystem with already-supported and new Yocto packages
Optimize your production systems by reducing the size of both the Linux kernel and root filesystems
Explore the mechanisms to increase the root filesystem security
Understand the open source licensing requirements and how to comply with them when cohabiting with proprietary programs
Create recipes, and build and run applications in C, C++, Python, Node.js, and Java
Who this book is for

If you are an embedded Linux developer with the basic knowledge of Yocto Project, this book is an ideal way to broaden your knowledge with recipes for embedded development.

Table of Contents
The build system
The BSP layer
The software layer
Application development
Debugging, tracing and profiling
Read more",9105987d299e2613b5c3298787cb53db0fcb0248bd4f00e0fd83556515b9cbc2,1788399218,978-1788399210,"January 25, 2018",amazon,"['Computer Hardware Embedded Systems', 'Computer Operating Systems', 'Linux Operating System']",Embedded Linux Development Using Yocto Project Cookbook: Practical recipes to help you leverage the power of Yocto to build exciting Linux-based systems,https://www.amazon.com/dp/1788399218,2018
['Rudolf Streif'],"Build Complete Embedded Linux Systems Quickly and Reliably

Developers are increasingly integrating Linux into their embedded systems: It supports virtually all hardware architectures and many peripherals, scales well, offers full source code, and requires no royalties. The Yocto Project makes it much easier to customize Linux for embedded systems. If you’re a developer with working knowledge of Linux, Embedded Linux Systems with the Yocto ProjectTM will help you make the most of it.

An indispensable companion to the official documentation, this guide starts by offering a solid grounding in the embedded Linux landscape and the challenges of creating custom distributions for embedded systems. You’ll master the Yocto Project’s toolbox hands-on, by working through the entire development lifecycle with a variety of real-life examples that you can incorporate into your own projects.

Author Rudolf Streif offers deep insight into Yocto Project’s build system and engine, and addresses advanced topics ranging from board support to compliance management.

You’ll learn how to

Overcome key challenges of creating custom embedded distributions
Jumpstart and iterate OS stack builds with the OpenEmbedded Build System
Master build workflow, architecture, and the BitBake Build Engine
Quickly troubleshoot build problems
Customize new distros with built-in blueprints or from scratch
Use BitBake recipes to create new software packages
Build kernels, set configurations, and apply patches
Support diverse CPU architectures and systems
Create Board Support Packages (BSP) for hardware-specific adaptations
Provide Application Development Toolkits (ADT) for round-trip development
Remotely run and debug applications on actual hardware targets
Ensure open-source license compliance
Scale team-based projects with Toaster, Build History, Source Mirrors, and Autobuilder
Read more",44409d18a6f5fc52f26bdc29b8790ea8adf1b6fdc8d628860a8538043e2d93d0,0133443248,978-0133443240,"May 2, 2016",amazon,"['Linux Programming', 'Computer Hardware Embedded Systems', 'Single Board Computers']",Embedded Linux Systems with the Yocto Project (Pearson Open Source Software Development Series),https://www.amazon.com/dp/0133443248,2016
['Lloyd Brombach'],,cab19c5119c7e7700c9c74aad1a4661e981a2548e700005c32b86527e8efbb4e,9389423465,978-9389423464,"January 29, 2021",amazon,"['C++ Programming Language', 'Single Board Computers', 'Computer Programming Languages']",Practical Robotics in C++: Build and Program Real Autonomous Robots Using Raspberry Pi (English Edition),https://www.amazon.com/dp/9389423465,2021
['Daniele Lacamera'],,4505b8cdabbebb1fff90b0cd999a3972d8747c292e3d270b2fa15f886eababcc,1788832507,978-1788832502,"May 29, 2018",amazon,"['Computer Hardware Embedded Systems', 'C Programming Language', 'Computer Programming Languages']","Embedded Systems Architecture: Explore architectural concepts, pragmatic design patterns, and best practices to produce robust systems",https://www.amazon.com/dp/1788832507,2018
['Christopher Kormanyos'],,107a202addb723f48632b15ac8c5cb11afbe5cbeee8937478915556c7c7f6035,,,"July 14, 2021",amazon,"['Systems Architecture', 'Computer Hardware Design & Architecture', 'Software Development (Kindle Store)']",Real-Time C++: Efficient Object-Oriented and Template Microcontroller Programming,https://www.amazon.com/dp/B099J441CH,2021
['Lewis Van Winkle'],,7d61e3ec82342056e8ad0d0b1c126911666f91e39656ff6cd9bd2d3493e40180,1789349869,978-1789349863,"May 13, 2019",amazon,"['C Programming Language', 'Linux & UNIX Administration', 'Linux Networking & System Administration']",Hands-On Network Programming with C: Learn socket programming in C and write secure and optimized network code,https://www.amazon.com/dp/1789349869,2019
['Christian Benvenuti'],"If you've ever wondered how Linux carries out the complicated tasks assigned to it by the IP protocols -- or if you just want to learn about modern networking through real-life examples -- Understanding Linux Network Internals is for you.

Like the popular O'Reilly book, Understanding the Linux Kernel, this book clearly explains the underlying concepts and teaches you how to follow the actual C code that implements it. Although some background in the TCP/IP protocols is helpful, you can learn a great deal from this text about the protocols themselves and their uses. And if you already have a base knowledge of C, you can use the book's code walkthroughs to figure out exactly what this sophisticated part of the Linux kernel is doing.

Part of the difficulty in understanding networks -- and implementing them -- is that the tasks are broken up and performed at many different times by different pieces of code. One of the strengths of this book is to integrate the pieces and reveal the relationships between far-flung functions and data structures. Understanding Linux Network Internals is both a big-picture discussion and a no-nonsense guide to the details of Linux networking. Topics include:

Key problems with networking
Network interface card (NIC) device drivers
System initialization
Layer 2 (link-layer) tasks and implementation
Layer 3 (IPv4) tasks and implementation
Neighbor infrastructure and protocols (ARP)
Bridging
Routing
ICMP

Author Christian Benvenuti, an operating system designer specializing in networking, explains much more than how Linux code works. He shows the purposes of major networking features and the trade-offs involved in choosing one solution over another. A large number of flowcharts and other diagrams enhance the book's understandability.

Read more",7521e69638daa9d0940b3e594449b0ff808f2bb6384ccf5fb311ad5a8032a1e6,9780596002558,978-0596002558,"February 7, 2006",amazon,"['Software Design & Engineering', 'Linux Networking & System Administration', 'Software Development']",Understanding Linux Network Internals: Guided Tour to Networking on Linux,https://www.amazon.com/dp/0596002556,2006
['David Wolff'],,2e7ef4ce19e02004b75204521ca5cafa4473578261804a290ffa1fc619b394f0,1789342252,978-1789342253,"September 28, 2018",amazon,"['OpenGL Software Programming', '3D Graphic Design', 'Game Programming']","OpenGL 4 Shading Language Cookbook: Build high-quality, real-time 3D graphics with OpenGL 4.6, GLSL 4.6 and C++17, 3rd Edition",https://www.amazon.com/dp/1789342252,2018
"['V. Scott Gordon', 'John Clevenger']","This updated edition includes step-by-step instruction on modern OpenGL 4.0+ GLSL shader programming with C++, along with the theoretical foundations of 3D computer graphics. Every shader stage is explored, from the basics of modeling, textures, lighting, shadows, etc., through advanced techniques such as tessellation, noise maps, water, and stereoscopy. This new edition includes expanded coverage of camera control, refraction, and a new chapter on ray tracing with bounding volume hierarchies for complex models. The companion files include all the source code, shaders, model files, skyboxes, etc., needed to run every example in the book.
Read more",8a40ef9a96729f2d61bf04f5cb1be5e8e56250e72eff639de60e79faabe70020,1501522590,978-1501522598,"March 9, 2024",amazon,"['OpenGL Software Programming', 'Rendering & Ray Tracing', '3D Graphic Design']",Computer Graphics Programming in OpenGL with C++,https://www.amazon.com/dp/1501522590,2024
['Joey de Vries'],"Graphics programmers are often coined the 'wizards' of the game industry. As every magician knows, terms like wizardry and magic are often somewhat exaggerated. Yet, there is a certain charm to graphics programming: the ability to conjure up complete living worlds at our fingertips.




Learn OpenGL will teach you the basics, the intermediate, and tons of advanced knowledge, using modern (core-profile) OpenGL. The aim of this book is to show you all there is to modern OpenGL in an easy-to-understand fashion, with clear examples and step-by-step instructions, while also providing a useful reference for later studies.




After years of continuous work and improvements on the accompanying website learnopengl.com, with the help of thousands of readers, its content has been professionally revised for this physical copy you now find in your hands.

Graphics programming isn't as hard as many people make it out to be... you just need to start.




Read more",cab3e1de5bf878b3ebcc547e63130b8dbee399b03c37549e5eafafa177adf950,9090332561,978-9090332567,"June 17, 2020",amazon,"['OpenGL Software Programming', 'Game Programming', 'Introductory & Beginning Programming']",Learn OpenGL: Learn modern OpenGL graphics programming in a step-by-step fashion.,https://www.amazon.com/dp/9090332561,2020
['Justin Stenning'],"50 practical recipes to guide you through the advanced rendering techniques in Direct3D to help bring your 3D graphics project to life
About This Book


Learn and implement the advanced rendering techniques in Direct3D 11.2 and bring your 3D graphics project to life


Study the source code and digital assets with a small rendering framework and explore the features of Direct3D 11.2


A practical, example-driven, technical cookbook with numerous illustrations and example images to help demonstrate the techniques described


Who This Book Is For

Direct3D Rendering Cookbook is for C# .NET developers who want to learn the advanced rendering techniques made possible with DirectX 11.2. It is expected that the reader has at least a cursory knowledge of graphics programming, and although some knowledge of Direct3D 10+ is helpful, it is not necessary. An understanding of vector and matrix algebra is required.

What You Will Learn


Set up a Direct3D application and perform real-time 3D rendering with C# and SharpDX


Learn techniques for debugging your Direct3D application


Render a 3D environment with lights, shapes, and materials


Explore character animation using bones and vertex skinning


Create additional surface detail using tessellation with displacement mapping and displacement decals


Implement image post-processing tasks within compute shaders


Use real-time deferred rendering techniques to implement improved shading for lighting and shadows


Learn to Program the graphics pipeline with shaders using HLSL implemented by Shader Model 5


In Detail

The latest 3D graphics cards bring us amazing visuals in the latest games, from Indie to AAA titles. This is made possible on Microsoft® platforms including PC, Xbox consoles, and mobile devices thanks to Direct3D– a component of the DirectX API dedicated to exposing 3D graphics hardware to programmers. Microsoft DirectX is the graphics technology powering all of today's hottest games. The latest version— DirectX 11—features tessellation for film-like geometric detail, compute shaders for custom graphics effects, and improved multithreading for better hardware utilization. With it comes a number of fundamental game changing improvements to the way in which we render 3D graphics.




Direct3D Rendering Cookbook provides detailed .NET examples covering a wide range of advanced 3D rendering techniques available in Direct3D 11.2. With this book, you will learn how to use the new Visual Studio 2012 graphics content pipeline, how to perform character animation, how to use advanced hardware tessellation techniques, how to implement displacement mapping, perform image post-processing, and how to use compute shaders for general-purpose computing on GPUs.




After covering a few introductory topics about Direct3D 11.2 and working with the API using C# and SharpDX, we quickly ramp up to the implementation of a range of advanced rendering techniques, building upon the projects we create and the skills we learn in each subsequent chapter. Topics covered include using the new Visual Studio 2012 graphics content pipeline and graphics debugger, texture sampling, normal mapping, lighting and materials, loading meshes, character animation (vertex skinning), hardware tessellation, displacement mapping, using compute shaders for post-process effects, deferred rendering, and finally bringing all of this to Windows Store Apps for PC and mobile. After completing the recipes within Direct3D Rendering Cookbook, you will have an in-depth understanding of a range of advanced Direct3D rendering topics.

Read more",c104e43c6001e977d1e03484b4e57a5f64f3f2aa2d67dd141ab094207a22583a,,,"January 20, 2014",amazon,"['DirectX Software Programming', 'Rendering & Ray Tracing', 'C# Programming (Kindle Store)']",Direct3D Rendering Cookbook,https://www.amazon.com/dp/B00HYQFGYI,2014
['Frank Luna'],"No detailed description available for ""Introduction to 3D Game Programming with DirectX 12"".
Read more",a442d3e840e4f2cc62ccd1965d3ec62665d28788d6a89ad782b1a503daf0e20c,1942270062,978-1942270065,"April 7, 2016",amazon,"['Computer & Video Game Design', 'Game Programming', 'Introductory & Beginning Programming']",Introduction to 3D Game Programming with DirectX 12,https://www.amazon.com/dp/1942270062,2016
['Siddharth Shekar'],"Explore modern game programming and rendering techniques to build games using C++ programming language and its popular libraries

Key Features
Learn how you can build basic 2D and complex 3D games with C++
Understand shadows, texturing, lighting, and rendering in 3D game development using OpenGL
Uncover modern graphics programming techniques and GPU compute methods using the Vulkan API
Book Description

Although numerous languages are currently being used to develop games, C++ remains the standard for fabricating expert libraries and tool chains for game development. This book introduces you to the world of game development with C++.

C++ Game Development By Example starts by touching upon the basic concepts of math, programming, and computer graphics and creating a simple side-scrolling action 2D game. You'll build a solid foundation by studying basic game concepts such as creating game loops, rendering 2D game scenes using SFML, 2D sprite creation and animation, and collision detection. The book will help you advance to creating a 3D physics puzzle game using modern OpenGL and the Bullet physics engine. You'll understand the graphics pipeline, which entails creating 3D objects using vertex and index buffers and rendering them to the scene using vertex and fragment shaders. Finally, you'll create a basic project using the Vulkan library that'll help you get to grips with creating swap chains, image views, render passes, and frame buffers for building high-performance graphics in your games.

By the end of this book, you’ll be ready with 3 compelling projects created with SFML, the Vulkan API, and OpenGL, and you'll be able take your game and graphics programming skills to the next level.

What you will learn
Understand shaders and how to write a basic vertex and fragment shader
Build a Visual Studio project and add SFML to it
Discover how to create sprite animations and a game character class
Add sound effects and background music to your game
Grasp how to integrate Vulkan into Visual Studio
Create shaders and convert them to the SPIR-V binary format
Who this book is for

If you’re a developer keen to learn game development with C++ or get up to date with game development, this book is for you. Some knowledge of C++ programming is assumed.

Table of Contents
C++ Concepts
Mathematics and Graphics Concepts
Setting Up Your Game
Creating your game
Finalizing your Game
Getting started with OpenGL
Building on the game objects
Enhancing your game with Collision, loop, and Lighting
Getting started with Vulkan
Preparing the Clear Screen
Creating Object Resources
Drawing Vulkan Objects
Read more",a27fc9365bb0a2fb74271aa6621285a93c8aef6e2588c6b0abb4e800677d5db3,,,"May 3, 2019",amazon,"['C++ Programming', 'C++ Programming Language', 'Computer Games Programming']","C++ Game Development By Example: Learn to build games and graphics with SFML, OpenGL, and Vulkan using C++ programming",https://www.amazon.com/dp/B07RG9H8CR,2019
['Eric Lengyel'],"The first volume of Foundations of Game Engine Development discusses the mathematics needed by engineers who work on games or other types of virtual simulations. The book begins with conventional treatments of topics such as linear algebra, transforms, and geometry. Then, it introduces Grassmann algebra and geometric algebra to provide a much deeper understanding of the subject matter and highlight the places where traditional arithmetic with vectors, matrices, quaternions, etc., fits into a larger picture. Includes exercises.
Read more",8b43c1d6d5b3f2573d8bc3f04363dc8265a15d42b62734dc81d3c48d53d6fb46,0985811749,978-0985811747,"September 11, 2016",amazon,"['Software Design & Engineering', 'Software Development', 'Business Technology']","Foundations of Game Engine Development, Volume 1: Mathematics",https://www.amazon.com/dp/0985811749,2016
['Robert Nystrom'],"The biggest challenge facing many game programmers is completing their game. Most game projects fizzle out, overwhelmed by the complexity of their own code. Game Programming Patterns tackles that exact problem. Based on years of experience in shipped AAA titles, this book collects proven patterns to untangle and optimize your game, organized as independent recipes so you can pick just the patterns you need.

You will learn how to write a robust game loop, how to organize your entities using components, and take advantage of the CPUs cache to improve your performance. You'll dive deep into how scripting engines encode behavior, how quadtrees and other spatial partitions optimize your engine, and how other classic design patterns can be used in games.

Read more",581c597abd48180ed81c632ba673dbc21928e41ad69b25a27970ccd0b3104e0b,0990582906,978-0990582908,"November 2, 2014",amazon,"['Game Programming', 'Software Development', 'Video & Computer Games']",Game Programming Patterns,https://www.amazon.com/dp/0990582906,2014
['Gabor Szauer'],"Learn animation programming from first principles and implement modern animation techniques that can be integrated into any game development workflow

Key Features
Build a functional and production-ready modern animation system with complete features using C++
Learn basic, advanced, and skinned animation programming with this step-by-step guide
Discover the math required to implement cutting edge animation techniques such as inverse kinematics and dual quaternions
Book Description

Animation is one of the most important parts of any game. Modern animation systems work directly with track-driven animation and provide support for advanced techniques such as inverse kinematics (IK), blend trees, and dual quaternion skinning.

This book will walk you through everything you need to get an optimized, production-ready animation system up and running, and contains all the code required to build the animation system. You'll start by learning the basic principles, and then delve into the core topics of animation programming by building a curve-based skinned animation system. You'll implement different skinning techniques and explore advanced animation topics such as IK, animation blending, dual quaternion skinning, and crowd rendering. The animation system you will build following this book can be easily integrated into your next game development project. The book is intended to be read from start to finish, although each chapter is self-contained and can be read independently as well.

By the end of this book, you'll have implemented a modern animation system and got to grips with optimization concepts and advanced animation techniques.

What you will learn
Get the hang of 3D vectors, matrices, and transforms, and their use in game development
Discover various techniques to smoothly blend animations
Get to grips with GLTF file format and its design decisions and data structures
Design an animation system by using animation tracks and implementing skinning
Optimize various aspects of animation systems such as skinned meshes, clip sampling, and pose palettes
Implement the IK technique for your game characters using CCD and FABRIK solvers
Understand dual quaternion skinning and how to render large instanced crowds
Who this book is for

This book is for professional, independent, and hobbyist developers interested in building a robust animation system from the ground up. Some knowledge of the C++ programming language will be helpful.

Table of Contents
Creating a Game Window
Implementing Vectors
Implementing Matrices
Implementing Quaternions
Implementing Transforms
Building an Abstract Renderer
Exploring the glTF File Format
Creating Curves, Frames, and Tracks
Implementing Animation Clips
Mesh Skinning
Optimizing the Animation Pipeline
Blending between Animations
Implementing Inverse Kinematics
Using Dual Quaternions for Skinning
Rendering Instanced Crowds
Read more",506c137f1f951f6778afe2582c18486651c1fdc21a93c99f5177f52d6651543e,1800208081,978-1800208087,"June 12, 2020",amazon,"['OpenGL Software Programming', 'C++ Programming Language', 'Introductory & Beginning Programming']",Hands-On C++ Game Animation Programming: Learn modern animation techniques from theory to implementation with C++ and OpenGL,https://www.amazon.com/dp/1800208081,2020
['Sanjay Madhav'],"Program 3D Games in C++: The #1 Language at Top Game Studios Worldwide

C++ remains the key language at many leading game development studios. Since it’s used throughout their enormous code bases, studios use it to maintain and improve their games, and look for it constantly when hiring new developers. Game Programming in C++ is a practical, hands-on approach to programming 3D video games in C++. Modeled on Sanjay Madhav’s game programming courses at USC, it’s fun, easy, practical, hands-on, and complete.

Step by step, you’ll learn to use C++ in all facets of real-world game programming, including 2D and 3D graphics, physics, AI, audio, user interfaces, and much more. You’ll hone real-world skills through practical exercises, and deepen your expertise through start-to-finish projects that grow in complexity as you build your skills. Throughout, Madhav pays special attention to demystifying the math that all professional game developers need to know.

Set up your C++ development tools quickly, and get started
Implement basic 2D graphics, game updates, vectors, and game physics
Build more intelligent games with widely used AI algorithms
Implement 3D graphics with OpenGL, shaders, matrices, and transformations
Integrate and mix audio, including 3D positional audio
Detect collisions of objects in a 3D environment
Efficiently respond to player input
Build user interfaces, including Head-Up Displays (HUDs)
Improve graphics quality with anisotropic filtering and deferred shading
Load and save levels and binary game data

Whether you’re a working developer or a student with prior knowledge of C++ and data structures, Game Programming in C++ will prepare you to solve real problems with C++ in roles throughout the game development lifecycle. You’ll master the language that top studios are hiring for―and that’s a proven route to success.


Read more",33fed779841554e4673be83a6edbe7b28866d00f1197b798ee34cb5e5b9618ff,0134597206,978-0134597201,"March 28, 2018",amazon,"['C++ Programming Language', 'Game Programming', 'Software Development']",Game Programming in C++: Creating 3D Games (Game Design),https://www.amazon.com/dp/0134597206,2018
['Rachel Cordone'],"Learn how to use Unreal Engine 4 by building 3D and multiplayer games using Blueprints

Key Features
Learn the fundamentals of Unreal Engine such as project templates, Blueprints, and C++
Learn to design games; use UMG to create menus and HUDs, and replication to create multiplayer games
Build dynamic game elements using Animation Blueprints and Behavior Trees
Book Description

Unreal Engine is a popular game engine for developers to build high-end 2D and 3D games.

This book is a practical guide, starting off by quickly introducing you to the Unreal Engine 4 (UE4) ecosystem. You will learn how to create Blueprints and C++ code to define your game's functionality. You will be familiarized with the core systems of UE4 such as UMG, Animation Blueprints, and Behavior Trees. You will also learn how to use replication to create multiplayer games. By the end of this book, you will have a broad, solid knowledge base to expand upon on your journey with UE4.

What you will learn
Use project templates to give your game a head start
Create custom Blueprints and C++ classes and extend from Epic's base classes
Use UMG to create menus and HUDs for your game
Create more dynamic characters using Animation Blueprints
Learn how to create complex AI with Behavior Trees
Use replication to create multiplayer games
Optimize, test, and deploy a UE4 project
Who this book is for

Readers who already have some game development experience and Unity users who would like to try UE4 will all benefit from this book. Knowledge of basic Object-Oriented Programming topics such as variables, functions, and classes is assumed.

Table of Contents
Introduction to Unreal Engine 4
Programming Using Blueprints
Adding C++ to a Blueprint Project
Creating HUDs and Menus Using UMG
Animation Blueprints
AI with Behavior Tree and Blackboard
Multiplayer Games
Optimization, Testing, and Packaging
Read more",bc57eb312b0beb99e5102bd078eb54ecfb08eee7d3fdcbf127367a951e1a05d8,1789950686,978-1789950687,"May 31, 2019",amazon,"['Design & Graphics Software Books', 'Game Programming', 'Computer Graphics & Design']",Unreal Engine 4 Game Development Quick Start Guide: Programming professional 3D games with Unreal Engine 4,https://www.amazon.com/dp/1789950686,2019
"['Kevin Mack', 'Robert Ruud']","Learn to design and build Virtual Reality experiences, applications, and games in Unreal Engine 4 through a series of practical, hands-on projects that teach you to create controllable avatars, user interfaces, and more.

Key Features
Learn about effective VR design and develop virtual reality games and applications for every VR platform
Build essential features for VR such as player locomotion and interaction, 3D user interfaces, and 360 media players
Learn about multiplayer networking and how to extend the engine using plugins and asset packs
Book Description

Unreal Engine 4 (UE4) is a powerful tool for developing VR games and applications. With its visual scripting language, Blueprint, and built-in support for all major VR headsets, it's a perfect tool for designers, artists, and engineers to realize their visions in VR.

This book will guide you step-by-step through a series of projects that teach essential concepts and techniques for VR development in UE4. You will begin by learning how to think about (and design for) VR and then proceed to set up a development environment. A series of practical projects follows, taking you through essential VR concepts. Through these exercises, you'll learn how to set up UE4 projects that run effectively in VR, how to build player locomotion schemes, and how to use hand controllers to interact with the world. You'll then move on to create user interfaces in 3D space, use the editor's VR mode to build environments directly in VR, and profile/optimize worlds you've built. Finally, you'll explore more advanced topics, such as displaying stereo media in VR, networking in Unreal, and using plugins to extend the engine.

Throughout, this book focuses on creating a deeper understanding of why the relevant tools and techniques work as they do, so you can use the techniques and concepts learned here as a springboard for further learning and exploration in VR.

What you will learn
Understand design principles and concepts for building VR applications
Set up your development environment with Unreal Blueprints and C++
Create a player character with several locomotion schemes
Evaluate and solve performance problems in VR to maintain high frame rates
Display mono and stereo videos in VR
Extend Unreal Engine's capabilities using various plugins
Who this book is for

This book is for anyone interested in learning to develop Virtual Reality games and applications using UE4. Developers new to UE4 will benefit from hands-on projects that guide readers through clearly-explained steps, while both new and experienced developers will learn crucial principles and techniques for VR development in UE4.

Table of Contents
Thinking in VR
Setting up your Development Environment
Hello World: Your First VR Project
Getting Around the Virtual World
Interacting with the Virtual World - Part I
Interacting with the Virtual World - Part II
Creating User Interfaces in VR
Building the World and Optimizing for VR
Displaying Media in VR
Creating a Multiplayer Experience in VR
Taking VR Further: Extending Unreal Engine
Where to Go from Here
A: Useful Mind Hacks
B: Research and Further Reading
Read more",033e9380fe3b79eae524421e27fcc32e3accef055e46d8fc8f02493fddb36bf0,1789132878,978-1789132878,"April 30, 2019",amazon,"['C++ Programming Language', 'Computer Graphics', 'Game Programming']",Unreal Engine 4 Virtual Reality Projects,https://www.amazon.com/dp/1789132878,2019
['Stephen Seth Ulibarri'],"Prepare for Unreal Engine 5! Learn the fundamentals of the C++ programming language as well as Unreal Engine’s code base for creating and packaging a complete hack and slash action game. Implement combat, AI and Behavior Trees, animation, gameplay mechanics, interfaces and delegates, collision and physics, ray casting, game saving, menu and HUD creation via UMG, and much more.
Read more",bd3246b8bf3fc15ad620c39632aee351c8689d62cce2b4330440f119efcb20f6,8648492513,978-8648492517,"June 7, 2020",amazon,"['C++ Programming Language', 'Game Programming', 'Computer Programming Languages']",Unreal Engine C++ the Ultimate Developer's Handbook: Learn C++ and Unreal Engine by Creating a Complete Action Game,https://www.amazon.com/dp/B089M2H7J1,2020
['ZHENYU GEORGE LI'],,0604d8eb7a3b8893c8c52df83d93a148779694d3363c6440fa3b7952920dd7dd,1804613932,978-1804613931,"August 30, 2023",amazon,"['Functional Software Programming', 'C++ Programming Language', 'Game Programming']","Unreal Engine 5 Game Development with C++ Scripting: Become a professional game developer and create fully functional, high-quality games",https://www.amazon.com/dp/1804613932,2023
"['Stuart Butler', 'Tom Oliver']","Improve your game's code with design patterns to make it more readable, reusable, modular, and optimized, guided by an Unreal Authorized Instructor to enhance your overall use of C++ with Unreal Engine

Key Features
Explore programming patterns, structures, and principles and their applications in Unreal Engine 5 game development
Translate code from Blueprint to C++ to implement performant solutions in game development
Build a decoupled communications hierarchy and become a better game developer
Purchase of the print or Kindle book includes a free PDF eBook
Book Description

Design patterns serve as a toolkit of techniques and practices that enable you to write code that’s not only faster, but also more manageable. With this book, you’ll explore a range of design patterns and learn how to apply them to projects developed in Unreal Engine 5.

You’ll begin by delving into the foundational principles of coding and develop a solid understanding of the concepts, challenges, and benefits of using patterns in your code. As you progress, you’ll identify patterns that are woven into the core of Unreal Engine 5 such as Double Buffer, Flyweight, and Spatial Partitioning, followed by some of the existing tool sets that embody patterns in their design and usage including Component, Behavior Tree, and Update.

In the next section of the book, you’ll start developing a series of gameplay use cases in C++ to implement a variety of design patterns such as Interface and Event-based Observers to build a decoupled communications hierarchy. You’ll also work with Singleton, Command, and State, along with Behavioral Patterns, Template, Subclass Sandbox, and Type Object. The final section focuses on using design patterns for optimization, covering Dirty Flag, Data Locality, and Object Pooling.

By the end, you’ll be proficient in designing systems with the perfect C++/Blueprint blend for maintainable and scalable systems.

What you will learn
Grasp the essence of design patterns and their inherent utility
Understand the layers within UE 5 and how they work together
Identify the relationship between C++ code and Blueprint in Unreal Engine 5
Recognize the design patterns found within existing Unreal Engine 5 functions
Explore design patterns to understand their purpose and application within Unreal Engine 5
Creatively apply design patterns to existing code to overcome common challenges
Who this book is for

If you are a beginner or intermediate game developer working with Unreal Engine and looking to improve your C++ coding practices, this book is tailor-made to help you produce clean, reusable code through the application of design patterns.

While this book will cover introductory tasks to show the fundamentals of Unreal Engine 5, its primary purpose is not to teach Unreal Engine from scratch. Prior experience with Unreal Engine will be beneficial, but don’t fret if your knowledge isn’t in-depth; the book will introduce tools and features as needed.

Table of Contents
Understanding Unreal Engine 5 and its layers
“Hello Patterns”
UE5 patterns in action: Double Buffer, Flyweight and Spatial Partitioning
Premade Patterns in UE5: Component, Behaviour Tree and Update Method
Forgetting Tick
Clean communication: Interface and Event Observer patterns
A perfectly decoupled system
Building Design Patterns: Singleton, Command and State
Structuring Code with Behavioural Patterns: Template, Subclass Sandbox and Type Object
Optimisation Through Patterns
Read more",fc3b569bce3d5c38db7bceaa3f607b31585dc98caac764158ed67fe40d4a017a,1803243252,978-1803243252,"January 5, 2024",amazon,"['C++ Programming Language', 'Game Programming', 'Computer Programming Languages']",Game Development Patterns with Unreal Engine 5: Build maintainable and scalable systems with C++ and Blueprint,https://www.amazon.com/dp/1803243252,2024
['Daniel J. Duffy'],,a875e2b82c50677af68cf0980142d2dcb815ea8fa24339c98bfc037b640e442d,,,"September 5, 2018",amazon,"['Financial Engineering (Kindle Store)', 'C++ Programming', 'Financial Engineering']",Financial Instrument Pricing Using C++ (Wiley Finance),https://www.amazon.com/dp/B07H51DPQP,2018
['Erik Schlogl'],"Quantitative Finance: An Object-Oriented Approach in C++ provides readers with a foundation in the key methods and models of quantitative finance. Keeping the material as self-contained as possible, the author introduces computational finance with a focus on practical implementation in C++.

Through an approach based on C++ classes and templates, the text highlights the basic principles common to various methods and models while the algorithmic implementation guides readers to a more thorough, hands-on understanding. By moving beyond a purely theoretical treatment to the actual implementation of the models using C++, readers greatly enhance their career opportunities in the field.

The book also helps readers implement models in a trading or research environment. It presents recipes and extensible code building blocks for some of the most widespread methods in risk management and option pricing.

Web ResourceThe author’s website provides fully functional C++ code, including additional C++ source files and examples. Although the code is used to illustrate concepts (not as a finished software product), it nevertheless compiles, runs, and deals with full, rather than toy, problems. The website also includes a suite of practical exercises for each chapter covering a range of difficulty levels and problem complexity.

Read more",e5683771c4e4f94640d9920392dd36dcb8f2976a2568285ddf51941d1cabb192,1584884797,978-1584884798,"November 19, 2013",amazon,"['Business Pricing', 'Object-Oriented Design', 'Probability & Statistics']",Quantitative Finance (Chapman and Hall/CRC Financial Mathematics Series),https://www.amazon.com/dp/1584884797,2013
['Robert Brooks'],"There are numerous good books related to quantitative finance. There are also numerous good books related to programming in C++. The goal here is to bridge the gap between quantitative finance and C++. In many ways C++ has gotten both easier and harder over the past several years. We focus only on the easier techniques in C++. We do not attempt to provide state-of-the-art C++ programming. Rather we provide elementary techniques that are easy for the non-computer programming professional to understand. Specifically, we seek to aid the professional quantitative finance person in their quest to express their innovative ideas using elementary C++. As a consequence, this work should provide an aid to the professional computer programmer in their quest to understand quantitative finance.
Read more",0b624b9bfe3fb0c44ef8722dc11033833d40f362100e7618e1f2a9ea259281f2,147835075X,978-1478350750,"January 11, 2013",amazon,"['Risk Management', 'Finance']",Building Financial Risk Management Applications with C++,https://www.amazon.com/dp/147835075X,2013
['John Armstrong'],"If you know a little bit about financial mathematics but don’t yet know a lot about programming, then C++ for Financial Mathematics is for you.

C++ is an essential skill for many jobs in quantitative finance, but learning it can be a daunting prospect. This book gathers together everything you need to know to price derivatives in C++ without unnecessary complexities or technicalities. It leads the reader step-by-step from programming novice to writing a sophisticated and flexible financial mathematics library. At every step, each new idea is motivated and illustrated with concrete financial examples.

As employers understand, there is more to programming than knowing a computer language. As well as covering the core language features of C++, this book teaches the skills needed to write truly high quality software. These include topics such as unit tests, debugging, design patterns and data structures.

The book teaches everything you need to know to solve realistic financial problems in C++. It can be used for self-study or as a textbook for an advanced undergraduate or master’s level course.

Read more",2671291485a9b6cac176eb3ea641ad28ba66db65e9ad3afd1fe1442d019dcbfa,,,"January 6, 2017",amazon,"['Probability & Statistics (Kindle Store)', 'Probability & Statistics', 'Finance (Kindle Store)']",C++ for Financial Mathematics (Chapman and Hall/CRC Financial Mathematics Series),https://www.amazon.com/dp/B01N4V75RJ,2017
"['Paul Darbyshire', 'David Hampton']",,356756f0bc1ddca5d229b3f68c505c6d5867b726b10c427452c330a5e7c3e4ce,,,"October 26, 2016",amazon,"['Object-Oriented Design', 'Finance (Kindle Store)', 'Finance']",Hedge Fund Modelling and Analysis: An Object Oriented Approach Using C++ (The Wiley Finance Series),https://www.amazon.com/dp/B01M2A5XWX,2016
"['David C. Black', 'Jack Donovan', 'Bill Bunton']","SystemC provides a robust set of extensions to the C++ language that enables rapid development of complex models of hardware and software systems. The authors focus on practical use of the language for modeling real systems, showing:







A step-by-step build-up of syntax




Code examples for each concept




Updates to reflect the SystemC standard, IEEE 1666




Why features are as they are




Many resource references




How SystemC fits into an ESL methodology




This new edition of an industry best seller is updated to reflect the standardization of SystemC as IEEE 1666 and other improvements that reflect feedback from readers of the first edition. The wide ranging feedback also include suggestions from editors of the Japanese and Korean language translations, professors and students, and computer engineers from a broad industrial and geographical spectrum, all who have successfully used the first edition.




New chapters have been added on the SystemC Verification Library and the Transaction Level Modeling, and proposed changes to the current SystemC standard.




David Black and Jack Donovan, well known consultants in the EDA industry, have teamed with Bill Bunton and Anna Keist, experienced SystemC modeling engineers, to write the second edition of this highly popular classic. As a team the authors bring over 100 years of ASIC and system design experience together to make a very readable introduction to SystemC.

Read more",a2f87c55f7cd358d754d177a401883a66d5f2e854c5e6f256a305a95be813ef5,,,"December 18, 2009",amazon,"['CAD Graphic Design Guides', 'Computer Systems Analysis & Design (Kindle Store)', 'Architectural Drafting & Presentation']","SystemC: From the Ground Up, Second Edition",https://www.amazon.com/dp/B008BBVWPW,2009
['Robert C. Seacord'],"A detailed introduction to the C programming language for experienced programmers.

The world runs on code written in the C programming language, yet most schools begin the curriculum with Python or Java. Effective C bridges this gap and brings C into the modern era--covering the modern C17 Standard as well as potential C2x features. With the aid of this instant classic, you'll soon be writing professional, portable, and secure C programs to power robust systems and solve real-world problems.

Robert C. Seacord introduces C and the C Standard Library while addressing best practices, common errors, and open debates in the C community. Developed together with other C Standards committee experts, Effective C will teach you how to debug, test, and analyze C programs. You'll benefit from Seacord's concise explanations of C language constructs and behaviors, and from his 40 years of coding experience.

You'll learn:

How to identify and handle undefined behavior in a C program
The range and representations of integers and floating-point values
How dynamic memory allocation works and how to use nonstandard functions
How to use character encodings and types
How to perform I/O with terminals and filesystems using C Standard streams and POSIX file descriptors
How to understand the C compiler's translation phases and the role of the preprocessor
How to test, debug, and analyze C programs

Effective C will teach you how to write professional, secure, and portable C code that will stand the test of time and help strengthen the foundation of the computing world.
Read more",45e619c0f02d2aa432d9bd08360352614de59dab18fea9b7a6f0b913c9f86d83,1718501048,978-1718501041,"August 4, 2020",amazon,"['C Programming Language', 'Software Testing', 'Introductory & Beginning Programming']",Effective C: An Introduction to Professional C Programming,https://www.amazon.com/dp/1718501048,2020
['Jens Gustedt'],"Summary
Modern C focuses on the new and unique features of modern C programming. The book is based on the latest C standards and offers an up-to-date perspective on this tried-and-true language.

Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.

About the technology
C is extraordinarily modern for a 50-year-old programming language. Whether you’re writing embedded code, low-level system routines, or high-performance applications, C is up to the challenge. This unique book, based on the latest C standards, exposes a modern perspective of this tried-and-true language.

About the book
Modern C introduces you to modern day C programming, emphasizing the unique and new features of this powerful language. For new C coders, it starts with fundamentals like structure, grammar, compilation, and execution. From there, you’ll advance to control structures, data types, operators, and functions, as you gain a deeper understanding of what’s happening under the hood. In the final chapters, you’ll explore performance considerations, reentrancy, atomicity, threads, and type-generic programming. You’ll code as you go with concept-reinforcing exercises and skill-honing challenges along the way.

What's inside

Operators and functions
Pointers, threading, and atomicity
C’s memory model
Hands-on exercises

About the reader
For programmers comfortable writing simple programs in a language like Java, Python, Ruby, C#, C++, or C.

About the author
Jens Gustedt is a senior scientist at the French National Institute for Computer Science and Control (INRIA) and co-editor of the ISO C standard.
Read more",fb77965a77c2f5c04ced8512fee759489ccae63681da98e6c97bdc73110451be,1617295817,978-1617295812,"October 7, 2019",amazon,"['Compiler Design', 'Software Programming Compilers', 'C Programming Language']",Modern C,https://www.amazon.com/dp/1617295817,2019
['Kamran Amini'],,baa459194292a88979db62b15fdd13028634c9fe9b91b7dabcab85603be4a945,1789343623,978-1789343625,"October 31, 2019",amazon,"['C Programming Language', 'Microsoft Programming', 'Computer Programming Languages']","Extreme C: Taking you to the limit in Concurrency, OOP, and the most advanced capabilities of C",https://www.amazon.com/dp/1789343623,2019
['K. N. King'],"The first edition of C Programming: A Modern Approach was popular with students and faculty alike because of its clarity and comprehensiveness as well as its trademark Q&A sections.

Professor King's spiral approach made it accessible to a broad range of readers, from beginners to more advanced students. With adoptions at over 225 colleges, the first edition was one of the leading C textbooks of the last ten years. The second edition maintains all the book's popular features and brings it up to date with coverage of the C99 standard. The new edition also adds a significant number of exercises and longer programming projects, and includes extensive revisions and updates.
Read more",2e8b08dc69dbb0eabe75c214123bc3f117869dda4980a71a4c9409b154cbea75,0393979504,978-0393979503,"April 19, 2008",amazon,"['C Programming Language', 'Computer Programming Languages', 'Computer Software']","C Programming: A Modern Approach, 2nd Edition",https://www.amazon.com/dp/0393979504,2008
['Axel Schreiner'],"A do-it-yourself guide to object-oriented programming using ANSI-C with detailed examples and a preprocessor (written in awk) to simplify coding.
Read more",1c9975a9ae8b53ceb2d3738ff70c15ef338f28657878bbc1fc9a16ced2113a06,1105105687,978-1105105685,"October 1, 2011",amazon,[],Object-Oriented Programming With ANSI-C,https://www.amazon.com/dp/B00930I6TK,2011
['Scott Meyers'],"This definitive guide to C++ has been updated to reflect the latest ANSI/ISO standard. With more than 50,000 copies sold, the first edition has helped thousands of developers improve their C++ programming skills. Continuing in this tradition, Meyers has reworked every item in the book and has liberally placed cross-references throughout the text.
Read more",3ea5f50a36821ad502318748ca8e3ab658fc3e43afc90c53e6c6af06e50e89c4,0201924889,978-0201924886,"January 1, 1997",amazon,"['C Programming Language', 'Computer Software', 'Mathematics']",Effective C++: 50 Specific Ways to Improve Your Programs and Designs (Addison-Wesley Professional Computing Series),https://www.amazon.com/dp/0201924889,1997
['Scott Meyers'],"More than 150,000 copies in print!

Praise for Scott Meyers’ first book, Effective C++:

“I heartily recommend Effective C++ to anyone who aspires to mastery of C++ at the intermediate level or above.”
– The C/C++ User’s Journal

From the author of the indispensable Effective C++, here are 35 new ways to improve your programs and designs. Drawing on years of experience, Meyers explains how to write software that is more effective: more efficient, more robust, more consistent, more portable, and more reusable. In short, how to write C++ software that’s just plain better.

More Effective C++ includes:

Proven methods for improving program efficiency, including incisive examinations of the time/space costs of C++ language features

Comprehensive descriptions of advanced techniques used by C++ experts, including placement new, virtual constructors, smart pointers, reference counting, proxy classes, and double-dispatching

Examples of the profound impact of exception handling on the structure and behavior of C++ classes and functions

Practical treatments of new language features, including bool, mutable, explicit, namespaces, member templates, the Standard Template Library, and more. If your compilers don’t yet support these features, Meyers shows you how to get the job done without them.

More Effective C++ is filled with pragmatic, down-to-earth advice you’ll use every day. Like Effective C++ before it, More Effective C++ is essential reading for anyone working with C++.

Read more",15e498ee5cc072f250bb86a566ff898d4ab5da17f5fb2bec1ff344dc15d84f57,020163371X,978-0201633719,"January 1, 1996",amazon,"['C++ Programming Language', 'Computer Software', 'Mathematics']",More Effective C++: 35 New Ways to Improve Your Programs and Designs,https://www.amazon.com/dp/020163371X,1996
['James O. Coplien'],"This book assumes a background in the syntax of C++. Coplien shows how to become an expert C++ programmer by learning the idioms of the language. His approach is organized around the abstractions that C++ supports. He shows how these abstractions can be combined to use the language effectively.
Read more",411524de0950217f35ee036040435ff1185bc7e789ee763eaf981b1428f4c9fc,0201548550,978-0201548556,"January 1, 1991",amazon,[],Advanced C++ Programming Styles and Idioms,https://www.amazon.com/dp/0201548550,1991
['Bjarne Stroustrup'],"The designer of C++ recounts its development, dissecting the decisions made in the creation of the language to present a case study in real object-oriented development for the working programmer. In doing so, he presents his views on programming and design in a concrete and useful way. Topics include a prehistory of C++, C with classes, C++ language design rules, standardization, libraries, memory management, multiple inheritance, casting, templates, and exception handling. Annotation copyright Book News, Inc. Portland, Or.
Read more",c90c77c65adbc2ec60d3d232832fe86c74e8d804b53ad039781d71e7d8a26f98,0201543303,978-0201543308,"March 29, 1994",amazon,"['C++ Programming Language', 'Computer Software', 'Mathematics']","Design and Evolution of C++, The",https://www.amazon.com/dp/0201543303,1994
"['Erich Gamma', 'Richard Helm', 'Ralph Johnson']","Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves.




The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently.




Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk.

Read more",afe10fab21b12d10f2843ed0aa4204d6072c5ccbb93bbd5e44b5805dff6d9968,0201633612,978-0201633610,"October 31, 1994",amazon,"['Object-Oriented Design', 'Computer Science', 'Computer Software']",Design Patterns: Elements of Reusable Object-Oriented Software,https://www.amazon.com/dp/0201633612,1994
['John Lakos'],"include a dimension with which even expert software developers may have little or no experience. This is the definitive book for all C++ software professionals involved in large development efforts such as databases, operating systems, compilers, and frameworks. It is the first C++ book that actually demonstrates how to design large systems, and one of the few books on object-oriented design specifically geared to practical aspects of the C++ programming language. In this book, Lakos explains the process of decomposing large systems into physical (not inheritance) hierarchies of smaller, more manageable components. Such systems with their acyclic physical dependencies are fundamentally easier and more economical to maintain, test, and reuse than tightly interdependent systems. In addition to explaining the motivation for following good physical as well as logical design practices, Lakos provides you with a catalog of specific techniques designed to eliminate cyclic, compile-time, and link-time (physical) dependencies. He then extends these concepts from large to very large systems. The book concludes with a comprehensive top-down approach to the logical design of individual components. Appendices include a valuable design pattern """"Protocol Hierarchy"""" designed to avoid fat interfaces while minimizing physical dependencies; the details of implementing an ANSI C compatible C++ procedural interface; and a complete specification for a suite of UNIX-like tools to extract and analyze physical dependencies. Practical design rules, guidelines, and principles are also collected in an appendix and indexed for quick reference.
Read more",99dacc13d3d63426294d049ff4162946bead41133ca2cfc004ab2a3af06989f6,0201633620,978-0201633627,"July 10, 1996",amazon,"['C++ Programming Language', 'Software Development', 'Computer Software']",Large-Scale C++ Software Design,https://www.amazon.com/dp/0201633620,1996
['Jeff Alger'],"Based on the successful first edition, Secrets of the C++ Masters (1995), this book provides a path to true C++ enlightenment. It has been carefully revised to thoroughly cover advanced programming techniques using C++. It includes valuable techniques organized into three categories: Smart Pointers, Class Hierarchies, and Memory Management, and includes applications-oriented coverage of numerous topics including template creation, exception handling, pointers, optimization, and types. The focus of the book is on ANSI C++, and it includes one 3.5"" disk for Windows that features all the source code for examples presented in the book.

* A revision of the highly acclaimed Secrets of the C++ Masters
* Bridges the gap between C++ as described in beginner and intermediate-level books and C++ as practiced by experts
* Valuable techniques are described and organized into three simple themes: indirection, class hierarchies, and memory management
* Provides in depth coverage of template creation, exception handling, pointers and optimization techniques
* Book focuses in ANSI C++ and so is compiler independent
* Includes a 3.5"" disk for Windows with source code of all examples in the book
Read more",1533f938e8c37772ca7a33650c7fa67cb4407b162251101e27d54075cc3a788b,0120499428,978-0120499427,"February 26, 1998",amazon,"['C Programming Language', 'Computer Programming Languages', 'Computer Software']","C++ for Real Programmers, Revised Edition",https://www.amazon.com/dp/0120499428,1998
['Bruce Eckel'],"In the first edition of Thinking in C++, Bruce Eckel synthesized years of C++ teaching and programming experience into a beautifully structured course in making the most of the language. It became an instant classic, winning the 1995 Software Development Jolt Cola Award for best book of the year. Now, Eckel has thoroughly rewritten Thinking in C++ to reflect the final ANSI/ISO C++ standard. Every page has been revisited and rethought, with many new examples and exercises -- all designed to help you understand C++ ""down to the bare metal,"" so you can solve virtually any problem. Eckel starts with a detailed look at objects, showing how C++ programs can be constructed from off-the-shelf object libraries. This edition includes a new, chapter-length overview of the C features that are used in C++ -- plus a new CD-ROM containing an outstanding C seminar that covers all the foundations developers need before they can truly take advantage of C++. Eckel then walks through initialization and cleanup; function overloading and default arguments; constants; inline functions; name control; references and the copy constructor; operator overloading; and more. There are chapters on dynamic object creation; inheritance and composition; polymorphism and virtual functions, and templates. (Bonus coverage of string, templates, and the Standard Template Library, can be found at Eckel's web site.) Every chapter contains many modular, to-the-point examples, plus exercises based on Eckel's extensive experience teaching C++ seminars. Put simply, Eckel has made an outstanding book on C++ even better.

Read more",e66aa1694cc13abfb1b344205022f3d9a4f9c1fa11bd69ec974eb46f36fe9719,0139798099,978-0139798092,"January 1, 2000",amazon,"['C++ Programming Language', 'Computer Software', 'Mathematics']","Thinking in C++, Vol. 1: Introduction to Standard C++, 2nd Edition",https://www.amazon.com/dp/0139798099,2000
"['Bruce Eckel', 'Chuck Allison']","For sophomore/junior level courses in Advanced C++ Programming offered in Computer Science departments.

This text fills the need for a practical C++ topics book beyond the introductory level. No other text covers the topics needed to prepare students for production C++ programming. It streamlines the process of learning the C++ language, presenting material a simple step at a time, which allows the reader to digest each concept before moving on, and provides them with a solid foundation in C++.

Read more",ba93202f268d745383d16da775ac64e6fa1b908b742fa1d41598de5d65264faa,0130353132,978-0130353139,"December 17, 2003",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']","Thinking in C++: Practical Programming, Volume 2",https://www.amazon.com/dp/0130353132,2003
"['Debbie Lafferty', 'Andrei Alexandrescu']","In Modern C++ Design, Andrei Alexandrescu opens new vistas for C++ programmers. Displaying extraordinary creativity and programming virtuosity, Alexandrescu offers a cutting-edge approach to design that unites design patterns, generic programming, and C++, enabling programmers to achieve expressive, flexible, and highly reusable code.

This book introduces the concept of generic components―reusable design templates that produce boilerplate code for compiler consumption―all within C++. Generic components enable an easier and more seamless transition from design to application code, generate code that better expresses the original design intention, and support the reuse of design structures with minimal recoding.

The author describes the specific C++ techniques and features that are used in building generic components and goes on to implement industrial strength generic components for real-world applications. Recurring issues that C++ developers face in their day-to-day activity are discussed in depth and implemented in a generic way. These include:

Policy-based design for flexibility
Partial template specialization
Typelists―powerful type manipulation structures
Patterns such as Visitor, Singleton, Command, and Factories
Multi-method engines

For each generic component, the book presents the fundamental problems and design options, and finally implements a generic solution.

Read more",aef9e12c024da412d7f8f5f2581c9c403bbf98b40a0a4ec884ec0a7385b2d220,0201704315,978-0201704310,"February 13, 2001",amazon,"['C++ Programming Language', 'Computer Programming Languages', 'Computer Software']",Modern C++ Design: Generic Programming and Design Patterns Applied,https://www.amazon.com/dp/0201704315,2001
['Eric Lengyel'],"This second volume in the Foundations of Game Engine Development series explores the vast subject of real-time rendering in modern game engines. The book provides a detailed introduction to color science, world structure, projections, shaders, lighting, shadows, fog, and visibility methods. This is followed by extensive discussions of a variety of advanced rendering techniques that include volumetric effects, atmospheric shadowing, ambient occlusion, motion blur, and isosurface extraction. Emphasis is placed on practical implementation, and code is included.
Read more",d8f9b16bffb3beb61bbd9f35f555303435c32824f01ccbad8d2dad7d0112f5b1,0985811757,978-0985811754,"July 26, 2019",amazon,"['Rendering & Ray Tracing', 'Game Programming', 'Software Design, Testing & Engineering']","Foundations of Game Engine Development, Volume 2: Rendering",https://www.amazon.com/dp/0985811757,2019
['Mukherjee'],"If you are a C++ programmer who has never used Boost libraries before, this book will get you up-to-speed with using them. Whether you are developing new C++ software or maintaining existing code written using Boost libraries, this hands-on introduction will help you decide on the right library and techniques to solve your practical programming problems.",2d70a63bf5c8b6ba4b262db3a69e46d0a55684384054282f26d91629a1ff436a,,9781783551217,"Jul 31, 2015",packtpub,"['Programming', 'C++', 'Functional Programming', 'Boost']","Learning Boost C++: Solve practical programming problems using powerful, portable, and expressive libraries from Boost",https://www.packtpub.com/product/learning-boost-c-libraries/9781783551217,2015
"[""Arthur O'Dwyer""]","Modern C++ has come a long way since 2011. The latest update, C++17, has just been ratified and several implementations are on the way. This book is your guide to the C++ standard library, including the very latest C++17 features. The book starts by exploring the C++ Standard Template Library in depth. You will learn the key differences between classical polymorphism and generic programming, the foundation of the STL. You will also learn how to use the various algorithms and containers in the STL to suit your programming needs. The next module delves into the tools of modern C++. Here you will learn about algebraic types such as std::optional, vocabulary types such as std::function, smart pointers, and synchronization primitives such as std::atomic and std::mutex. In the final module, you will learn about C++'s support for regular expressions and file I/O. By the end of the book you will be proficient in using the C++17 standard library to implement real programs, and you'll have gained a solid understanding of the library's own internals.",53f3809ed1116261a6a6045ff22d5e6e33d612ddf96b22f115c9820411cfd5b1,,9781787126824,"Sep 28, 2017",packtpub,"['Programming', 'C++', 'Programming Language', 'STL']",Mastering the C++17 STL: Make full use of the standard library components in C++17,https://www.packtpub.com/product/mastering-the-c-17-stl/9781787126824,2017
"['Adrian Ostrowski', 'Piotr Gaczkowski']","Software architecture refers to the high-level design of complex applications. It is evolving just like the languages we use, but there are architectural concepts and patterns that you can learn to write high-performance apps in a high-level language without sacrificing readability and maintainability. If you're working with modern C++, this practical guide will help you put your knowledge to work and design distributed, large-scale apps. You'll start by getting up to speed with architectural concepts, including established patterns and rising trends, then move on to understanding what software architecture actually is and start exploring its components. Next, you'll discover the design concepts involved in application architecture and the patterns in software development, before going on to learn how to build, package, integrate, and deploy your components. In the concluding chapters, you'll explore different architectural qualities, such as maintainability, reusability, testability, performance, scalability, and security. Finally, you will get an overview of distributed systems, such as service-oriented architecture, microservices, and cloud-native, and understand how to apply them in application development. By the end of this book, you'll be able to build distributed services using modern C++ and associated tools to deliver solutions as per your clients' requirements.",22ea5c2e6d46eaac3de30b6253e4d33b06ad9443e7f468eefdea329fe825dbe3,,9781838554590,"Apr 23, 2021",packtpub,"['Programming', 'C++', 'Design Patterns']","Software Architecture with C++: Design modern systems using effective architecture concepts, design patterns, and techniques with C++20",https://www.packtpub.com/product/software-architecture-with-c/9781838554590,2021
['Stefan Björnander'],"It is critical that modern developers have the right tools to build practical, user-friendly, and efficient applications in order to compete in today’s market. Through hands-on guidance, this book illustrates and demonstrates C++ best practices and the Small Windows object-oriented class library to ease your development of interactive Windows applications. Begin with a focus on high level application development using Small Windows. Learn how to build four real-world applications which focus on the general problems faced when developing graphical applications. Get essential troubleshooting guidance on drawing, spreadsheet, and word processing applications. Finally finish up with a deep dive into the workings of the Small Windows class library, which will give you all the insights you need to build your own object-oriented class library in C++.",a589e0d4c2670dfcfdb67f39f0d9732e4192460b65ae0430f93e9d1e2dd949e7,,9781786464224,"Sep 12, 2016",packtpub,"['Programming', 'C++', 'Application Development', 'Visual Studio']",C++ Windows Programming: Develop real-world applications in Windows.,https://www.packtpub.com/product/c-windows-programming/9781786464224,2016
['Maya Posch'],"C++ is a great choice for embedded development, most notably, because it does not add any bloat, extends maintainability, and offers many advantages over different programming languages. Hands-On Embedded Programming with C++17 will show you how C++ can be used to build robust and concurrent systems that leverage the available hardware resources. Starting with a primer on embedded programming and the latest features of C++17, the book takes you through various facets of good programming. You’ll learn how to use the concurrency, memory management, and functional programming features of C++ to build embedded systems. You will understand how to integrate your systems with external peripherals and efficient ways of working with drivers. This book will also guide you in testing and optimizing code for better performance and implementing useful design patterns. As an additional benefit, you will see how to work with Qt, the popular GUI library used for building embedded systems. By the end of the book, you will have gained the confidence to use C++ for embedded programming.",124516b7583f3baef543ef38d9c0a02aa41f3d8f46c37eaf74bb4e73e4db04c8,,9781788629300,"Jan 31, 2019",packtpub,"['IoT & Hardware', 'C++', 'Embedded Systems', 'Qt']",Hands-On Embedded Programming with C++17: Create versatile and robust embedded solutions for MCUs and RTOSes with modern C++,https://www.packtpub.com/product/hands-on-embedded-programming-with-c-17/9781788629300,2019
['Radchuk'],"Starting with recipes demonstrating the execution of basic Boost.Asio operations, the book goes on to provide ready-to-use implementations of client and server applications from simple synchronous ones to powerful multithreaded scalable solutions. Finally, you are presented with advanced topics such as implementing a chat application, implementing an HTTP client, and adding SSL support. All the samples presented in the book are ready to be used in real projects just out of the box. As well as excellent practical examples, the book also includes extended supportive theoretical material on distributed application design and construction.",8d5634e61e5b5991fc352db52607fd2e8c6c09957a413666aef3321b0e3f36b2,,9781783986545,"Jan 25, 2016",packtpub,"['Cloud & Networking', 'C++', 'Networking', 'Visual Studio']",Boost.Asio C++ Network Programming Cookbook: Over 25 hands-on recipes to create robust and highly-efficient cross-platform distributed applications with the Boost.Asio library,https://www.packtpub.com/product/boost-asio-c-network-programming-cookbook/9781783986545,2016
['Wisnu Anggoro'],"Boost.Asio is a C++ library used for network programming operations. Organizations use Boost because of its productivity. Use of these high-quality libraries speed up initial development, result in fewer bugs, reduce reinvention-of-the-wheel, and cut long-term maintenance costs. Using Boost libraries gives an organization a head start in adopting new technologies. This book will teach you C++ Network programming using synchronous and asynchronous operations in Boost.Asio with minimum code, along with the fundamentals of Boost, server-client applications, debugging, and more. You will begin by preparing and setting up the required tools to simplify your network programming in C++ with Boost.Asio. Then you will learn about the basic concepts in networking such as IP addressing, TCP/IP protocols, and LAN with its topologies. This will be followed by an overview of the Boost libraries and their usage. Next you will get to know more about Boost.Asio and its concepts related to network programming. We will then go on to create a client-server application, helping you to understand the networking concepts. Moving on, you will discover how to use all the functions inside the Boost.Asio C++ libraries. Lastly, you will understand how to debug the code if there are errors found and will run the code successfully.",4a8b9fcd735da98ae4762551e859c639b46595163c69eda03b254778382bda32,,9781785283079,"Sep 16, 2015",packtpub,"['Programming', 'C++', 'Programming Language', 'Boost.Asio']",Boost.Asio C++ Network Programming: Learn effective C++ network programming with Boost.Asio and become a proficient C++ network programmer,https://www.packtpub.com/product/boost-asio-c-network-programming-second-edition/9781785283079,2015
['David da L Gouveia'],"Audio plays a fundamental role in video games. From music to sound effects or dialogue, it helps to reinforce the experience, convey the mood, and give feedback to the player. Presently, many games have achieved commercial success by incorporating game sounds that have enhanced the user experience. You can achieve this in your games with the help of the FMOD library. This book provides you with a practical guide to implementing the FMOD toolkit in your games. Getting Started with C++ Audio Programming for Game Developers is a quick and practical introduction to the most important audio programming topics that any game developer is expected to know. Whether you need to play only a few audio files or you intend to design a complex audio simulation, this book will help you get started enhancing your game with audio programs. Getting Started with C++ Audio Programming for Game Developers covers a broad range of topics ‚Äì from loading and playing audio files to simulating sounds within a virtual environment and implementing interactive sounds that react to events in the game. The book starts off with an explanation of the fundamental audio concepts, after which it proceeds to explain how to use the FMOD Ex library, how to implement a 3D audio simulation, how to use the FMOD Designer toolkit, and how best to work with multi-layered sounds with complex behaviors attached to them. The final part of the book deals with working with audio at a much lower level by manipulating audio data directly. This book will provide you with a good foundation so that you can successfully implement audio into your games and begin pursuing other advanced topics in audio programming with confidence.",ec74608aa9364e001c471078eddc3fe8b770a602e094ced7a357b92a2a619e1b,,9781849699099,"Aug 26, 2013",packtpub,"['Game Development', 'C++', 'Game Design']","Getting Started with C++ Audio Programming for Game Development: Written specifically to help C++ developers add audio to their games from scratch, this book gives a clear introduction to the concepts and practical application of audio programming using the FMOD library and toolkit.",https://www.packtpub.com/product/getting-started-with-c-audio-programming-for-game-development/9781849699099,2013
"['Whittle', 'Sherif']","Unreal Engine 4 (UE4) is a complete suite of game development tools made by game developers, for game developers. With more than 100 practical recipes, this book is a guide showcasing techniques to use the power of C++ scripting while developing games with UE4. It will start with adding and editing C++ classes from within the Unreal Editor. It will delve into one of Unreal's primary strengths, the ability for designers to customize programmer-developed actors and components. It will help you understand the benefits of when and how to use C++ as the scripting tool. With a blend of task-oriented recipes, this book will provide actionable information about scripting games with UE4, and manipulating the game and the development environment using C++. Towards the end of the book, you will be empowered to become a top-notch developer with Unreal Engine 4 using C++ as the scripting language.",fcd17fcc84b25ec2b0db11ed2bad4a8a590df75db844ec0a01497797921614b3,,9781785885549,"Oct 24, 2016",packtpub,"['Game Development', 'C++', 'Game Scripting', 'Unity']",Unreal Engine 4 Scripting with C++ Cookbook: Get the best out of your games by scripting them using UE4,https://www.packtpub.com/product/unreal-engine-4-scripting-with-c-cookbook/9781785885549,2016
['Jason Turner'],"Note that this book is also available on Amazon in both color and black and white editions if you prefer a printed version.

As a C++ developer and trainer for 20 years, I have learned that there are many common mistakes that C++ developers of all experience levels make. This book distills that experience down into the most important things to address to make your code faster, easier to maintain, and more portable.

Most sections have one or more exercises that help you apply what is discussed in a practical way in the code you are currently working on

This book is intentionally concise! Expect short sections for each item! I use as few words as possible to get across the point and get you applying what you learned to your code.

If you follow me and watch all of my talks this book will present little new information to you. Why should you buy it then? Because I've consolidated the most important items and given you exercises to apply the rules in your code.",3a625da6c7757f2ac39ce41bd120871f88983b7cf04d3b9d6fdd02c9693f1eda,,,2022-07-12,leanpub,"['C and C++', 'Computers and Programming']",C++ Best Practices,https://leanpub.com/cppbestpractices,2022
['Šimon Tóth'],"This book is a complete guide to the C++ standard algorithms, demonstrating examples and pointing out notable, surprising, dangerous or interesting aspects of the different algorithms.

Note that this is a free book and 100% of my royalty goes to EFF.",f38822deca10f3cd2ee7b40c65361232e6636f81f25370cc3004648f68a499e1,,,2023-02-01,leanpub,['C and C++'],A Complete Guide to Standard C++ Algorithms,https://leanpub.com/cpp-algorithms-guide,2023
"['Bartłomiej Filipek', 'Jacek Galowicz']","If you’ve ever asked “what’s in C++17 and what does it mean for me and my code?” — and I hope you have — then this book is for you.

Herb Sutter, herbsutter.com

Available also as the paperback version @Amazon and the interactive online course @Educative

C++11 was a major update for the language. With all the modern features like lambdas, constexpr, variadic templates, threading, range-based for loops, smart pointers and many more powerful elements, it was enormous progress for the language. Even now, in 2018, lots of teams struggle to modernise their projects to leverage all the modern features. Later there was a minor update - C++14, which improved some things from the previous standard and added a few smaller elements. With C++17 we got a lot of mixed emotions.

Although C++17 is not as big as C++11, it's larger than C++14. Everyone expected modules, co-routines, concepts and other powerful features, but it wasn't possible to prepare everything on time.

Is C++17 weak?

Far from it! And this book will show you why!

I spent hundreds of hours investigating how the new things work in order to make a nice and practical book for you. The book will not only save your time but also will guide you through all the nuances of the language.

The book brings you exclusive content about C++17 and draws from the experience of many articles that have appeared on bfilipek.com (and cppstories.com). The chapters were rewritten from the ground-up and updated with the latest information. All of that equipped with lots of new examples and practical tips. Additionally, the book provides insight into the current implementation status, compiler support, performance issues and other relevant knowledge to boost your current projects.

If you have experience with C++11/14 and you want to move forward into the latest C++ standard, then this book is for you.

Here are the features you'll learn:

Part One: C++17 Language features

Fixes and deprecation
Language clarification
General language features
Templates
Attributes

Part Two: C++17 The Standard Library

std::optional
std::variant
std::any
std::string_view
String Conversions
String Matching & Searchers
Filesystem
Parallel STL
Other Changes

Part Three: More Examples and Use Cases

Refactoring with std::optional
Using if constexpr
Using [[nodiscard]] attribute
How to parallelise applications
Book Mentions:

""C++17 In Detail"" appeared in the Visual C++ Team Blog as suggested books for learning C++17!

Have a look: Books on C++17

Review @CppDepend Blog https://cppdepend.com/blog/?p=1180

Review @A Sawicki Blog: http://asawicki.info/news_1715_book_review_c17_in_detail.html

There's also a book page at Goodreads: C++17 In Detail @Goodreads

Other formats:
The book is also available in print at Amazon: C++17 in Detail Paperback
And also as an interactive course at Educative: C++17 in Detail: A Deep Dive

Technical details:

I optimized this book for a PDF reading experience, but other ebook formats should also look good. If you have any issues with the copies, let me know and I'll try to update the formatting.",bcc45e05a7dc62d91b7e61ee2022bfb41d7b330fdf40866ac50f4ee00db3a083,,,2019-09-12,leanpub,['C and C++'],C++17 in Detail,https://leanpub.com/cpp17indetail,2019
['Nicolai M. Josuttis'],"C++17 is the next evolution in modern C++ programming, which is now supported by the latest version of gcc, clang, and Visual C++. Although it is not as big a step as C++11, it contains a large number of small and valuable language and library features, which will change the way we program in C++. As usual, not everything is self-explanatory, combining new features gives even more power, and there are hidden traps.

This book presents all the new language and library features of C++17. It covers the motivation and context of each new feature with examples and background information. The focus is on how these features impact day-to-day programming, what it means to combine them, and how to benefit from this in practice.

Testimonials:

""It's very clearly written and the examples are really helpful!"" Graham Markall

""I am thoroughly enjoying the book; I had skimmed the list of changes in C++17 several times before but until I started reading your book I had no idea how substantial the changes really were. It makes me wonder what I overlooked with previous updates!"" Jason Birch

""I thought I knew a bit about C++. I downloaded this book and learned something new in the *preface*. Highly recommended so far!"" Tristan Brindle

Buy early, pay less, free updates

Note that this book was published step-by-step. It started with 270 pages first published in December 2018. Since then the contents grows with new chapters, examples, and caveats about the features of C++17 and I integrate all feedback I get for the pages already published.

The current version now covers all new features of C++17, both core language and library features.

See www.cppstd17.com for a detailed list of covered topics.

As written, once you bought it you will get all updates for free.

PDF versus Other Formats

I write the book in LaTeX and generate PDF from it (the way I wrote my other books). The other formats (epub, mobi, and online reading) come from the leanpub markdown interface, for which I generate the necessary input from LaTeX by script.

Thus, the PDF layout has a better quality than the other formats. For example, the syntax highlighting rules for the formats other than PDF have to get fixed as soon as possible and the index is missing yet. Leanpub and me are working on corresponding improvements.

I hope you enjoy and benefit.

Nico

#cpp17tcg",6fdd9fe868ef716784d8f8b0d5696606d80afe04ce45df7076c058ea41ee9e2e,,,2022-06-26,leanpub,['C and C++'],C++17 - The Complete Guide,https://leanpub.com/cpp17,2022
['Rainer Grimm'],"My book C++20 is a tutorial and a reference for the C++20 standard. It teaches you C++20 and provides details of this new, thrilling C++ standard. The exciting factor is mainly due to the big four of C++20.

Concepts change the way we think and program templates. They are semantic categories for the template parameters and enable you to express your intention directly in the type system. If something goes wrong, you get a clear error message.
The new ranges library enables it to perform algorithms directly on the container, compose the algorithm with the pipe symbol, and apply them to infinite data streams.
Thanks to coroutines, asynchronous programming in C++ has become mainstream. Coroutines are the base for cooperative tasks, event loops, infinite data streams, or pipelines.
Modules overcome the restrictions of header files. They promise a lot. For example, the separation of header and source files becomes obsolete as the preprocessor. Ultimately, we have faster built time and an easier way to build packages.",d64c72c94eabb2429913c59c13d3f3b9916e81ece8eed6fb2d9bf59e6c97c7d4,,,2023-09-13,leanpub,['C and C++'],C++20,https://leanpub.com/c20,2023
['Rainer Grimm'],"""The C++ Standard Library"" provides a detailed overview of the C++ Standard Library, including C++23.

The Goal

The C++ Standard Library aims to provide a concise reference of the C++ standard library in about 350 pages. This book assumes that you are familiar with C++. If so, you will get the most benefit from this book. If C++ is new to you, you should start with a textbook about core C++. Once you have mastered a textbook about the core language, you can make your next big step by reading my book.

This book also has more than 150 running code examples for the code snippets I present. Therefore, you can combine theory with practice and get the most out of it.

Many Thanks

In particular, I thank the English proofreaders of my book: Mahesh Attarde, Rick Audet, Pete Barrow, Michael Ben-David, Dave Burns, Alvaro Fernandez, Juliette Grimm, Marius Grimm, George Haake, Nicola Jaud-Stoll, Clare Macrae, Arne Mertz, Ian Reeve, Jason Turner, Bart Vandewoestyne, Ivan Vergiliev, and Andrzej Warzynski. They translated my Swabian English into English. Without their work, the book wouldn't have been possible.",f20ceef4468f18ecad686db18da9bcf96dcf6f3ce7aa9d3d4b2ddac6d33874f0,,,2023-03-11,leanpub,"['C and C++', 'Computers and Programming']",The C++ Standard Library,https://leanpub.com/cpplibrary,2023
['Andreas Fertig'],"Programming with C++20 teaches programmers with C++ experience the new features of C++20 and how to apply them. It does so by assuming C++11 knowledge. Elements of the standards between C++11 and C++20 will be briefly introduced, if necessary. However, the focus is on teaching the features of C++20.

You will start with learning about the so-called big four Concepts, Coroutines, std::ranges, and modules. The big four are followed by smaller yet not less important features. You will learn about std::format, the new way to format a string in C++. In Chapter 6, you will learn about a new operator, the so-called spaceship operator, which makes you write less code.

You then will look at various improvements to the language, ensuring more consistency and reducing surprises. You will learn how lambdas improved in C++20 and what new elements you can now pass as non-type template parameters. Your next stop is the improvements to the STL.

Of course, you will not end this book without learning about what happened in the constexpr-world.",27b3b77002062fb17367b18da3e52b023d42eb8c98723c17e7e1529ed13c8246,,,2024-02-08,leanpub,['C and C++'],Programming with C++20,https://leanpub.com/programming-with-cpp20,2024
['Nicolai M. Josuttis'],"C++20 is the next evolution in modern C++ programming, which will be supported step-by-step by the latest version of gcc, clang, and Visual C++.

C++20 is a big step, maybe even larger than C++11.

It contains a couple of new key features (modules, concepts, ranges, corountines) plus several small but valuable language and library features, which will change the way we program in C++. As usual, not everything is self-explanatory, combining new features gives even more power, and there are hidden traps.

This book presents all the new language and library features of C++20. It covers the motivation and context of each new feature with examples and background information. The focus is on how these features impact day-to-day programming, what it means to combine them, and how to benefit from C++20 in practice.

Testimonials:

""C++20 scared me for a few years, and I am a C++ educator. After reading Nico's fantastic new book, I may still be afraid of C++20, but at least now I have a much deeper understanding of what it actually is I am afraid of. Leor Zolman

""I use this book as reference almost everyday."" Selvakumar Jawahar

Buy early, pay less, free updates

Note that this book is published step-by-step. The first public version was published in June 2021. Since then, the contents grows with new chapters, examples, and caveats about the features of C++20 and I integrate all feedback I get for the pages already published.

The book is feature complete now.

Just minore details and copy editing is missing.

See cppstd20.com for a detailed list of all the topics covered.

As written, once you bought the ebook you will get all updates for free.

PDF versus Other Formats

I write the book in LaTeX and generate PDF from it (the way I wrote my other books). The other formats (epub, mobi, and online reading) come from the leanpub markdown interface, for which I generate the necessary input from LaTeX by script.

Thus, the PDF layout has a better quality than the other formats. For example, the syntax highlighting rules for the formats other than PDF have to get fixed as soon as possible and the index is missing yet. Leanpub and me are working on corresponding improvements.

I hope you enjoy and benefit.

Nico

#cpp20tcg",d22bb32aadd9cfd59428db70d2758db25aa273d8338ac914608eabd7bc85b20f,,,2024-08-08,leanpub,['C and C++'],C++20 - The Complete Guide,https://leanpub.com/cpp20,2024
['Sandor Dargo'],"In this book, you are going to discover one of the flagship features of C++20, concepts.

You will learn about:

the motivations behind concepts
the 4 ways to use them with functions
3 different ways to use them with classes
what kind of concepts are shipped with the standard library
how to write your own concepts from scratch
some real-life examples",e22e8c08beb37c5d9a2cb48e43a7008247e24a2d26dd9c6c6eb6c5668e24eb58,,,2022-07-15,leanpub,['C and C++'],C++ Concepts,https://leanpub.com/cppconcepts,2022
['Pavel Yosifovich'],,60af0cb0667a3c0656487a5b9da0562be393ec392f9d24c4c5bee4ae01138ad2,,,2024-06-21,leanpub,[],"Windows 10 System Programming, Part 2",https://leanpub.com/windows10systemprogrammingpart2,2024
"['Edouard Alligand', 'Joel Falcou']","To say that C++ programmers embrace metaprogramming is a real stretch. Outright rejection is probably more accurate. And yet, C++ template metaprogramming is ideal for performing automatic compile-time optimization. With this example-driven ebook, you’ll learn how improved metaprogramming techniques in C++11 and C++14 can help you avoid a lot of mistakes and tedious work by making the compiler work for you.

Authors Edouard Alligand and Joel Falcou show you how the process works and what it takes to build and apply a basic metaprogramming toolbox. Then comes the real payoff: you’ll learn about a set of existing metaprogramming techniques you can use to perform fast and precise metaprogramming tasks without error—including the Boost.MPL, Boost.Hana, and Brigand libraries.

Understand basic metaprogramming concepts: programs whose input and output are programs themselves
Learn how metaprogramming principles can help make your code more compact, generic, elegant, and less error-prone
Explore how features in C++11 and C++14 make the design of metaprograms easier
Improve performance, reduce maintenance, and test less often
Show and hide more",8bca269653bba5c46a530b4bb04851bf33af01d510fe0c1f1d3f09b2aa9b5ce2,,9781491955031,September 2016,oreilly,,Practical C++ Metaprogramming,https://www.oreilly.com/library/view/practical-c-metaprogramming/9781492042778/,2016
